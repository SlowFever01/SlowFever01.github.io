<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker实用篇</title>
    <url>/2024/01/20/Docker%E5%AE%9E%E7%94%A8%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Docker实用篇"><a href="#Docker实用篇" class="headerlink" title="Docker实用篇"></a>Docker实用篇</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-初识Docker"><a href="#1-初识Docker" class="headerlink" title="1.初识Docker"></a>1.初识Docker</h1><h2 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1.什么是Docker"></a>1.1.什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p>
<ul>
<li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li>
<li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li>
</ul>
<h3 id="1-1-1-应用部署的环境问题"><a href="#1-1-1-应用部署的环境问题" class="headerlink" title="1.1.1.应用部署的环境问题"></a>1.1.1.应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p>
<ul>
<li><p>依赖关系复杂，容易出现兼容性问题</p>
</li>
<li><p>开发、测试、生产环境有差异</p>
</li>
</ul>
<p><img src="/assets/image-20210731141907366.png" alt="image-20210731141907366"></p>
<p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p>
<h3 id="1-1-2-Docker解决依赖兼容问题"><a href="#1-1-2-Docker解决依赖兼容问题" class="headerlink" title="1.1.2.Docker解决依赖兼容问题"></a>1.1.2.Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p>
<p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p>
<ul>
<li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p>
</li>
<li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p>
</li>
</ul>
<p><img src="/assets/image-20210731142219735.png" alt="image-20210731142219735"></p>
<p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p>
<p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p>
<h3 id="1-1-3-Docker解决操作系统环境差异"><a href="#1-1-3-Docker解决操作系统环境差异" class="headerlink" title="1.1.3.Docker解决操作系统环境差异"></a>1.1.3.Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p>
<p><img src="/assets/image-20210731143401460.png" alt="image-20210731143401460"></p>
<p>结构包括：</p>
<ul>
<li>计算机硬件：例如CPU、内存、磁盘等</li>
<li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li>
<li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li>
</ul>
<p>应用于计算机交互的流程如下：</p>
<p>1）应用调用操作系统应用（函数库），实现各种功能</p>
<p>2）系统函数库是对内核指令集的封装，会调用内核指令</p>
<p>3）内核指令操作计算机硬件</p>
<p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p>
<p><img src="/assets/image-20210731144304990.png" alt="image-20210731144304990"></p>
<p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p>
<p><img src="/assets/image-20210731144458680.png" alt="image-20210731144458680"></p>
<p>Docker如何解决不同系统环境的问题？</p>
<ul>
<li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li>
<li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li>
</ul>
<p>如图：</p>
<p><img src="/assets/image-20210731144820638.png" alt="image-20210731144820638"></p>
<h3 id="1-1-4-小结"><a href="#1-1-4-小结" class="headerlink" title="1.1.4.小结"></a>1.1.4.小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p>
<ul>
<li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li>
<li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li>
</ul>
<p>Docker如何解决开发、测试、生产环境有差异的问题？</p>
<ul>
<li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li>
</ul>
<p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p>
<ul>
<li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li>
<li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li>
<li>启动、移除都可以通过一行命令完成，方便快捷</li>
</ul>
<h2 id="1-2-Docker和虚拟机的区别"><a href="#1-2-Docker和虚拟机的区别" class="headerlink" title="1.2.Docker和虚拟机的区别"></a>1.2.Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p>
<p>两者有什么差异呢？</p>
<p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p>
<p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p>
<p><img src="/assets/image-20210731145914960.png" alt="image-20210731145914960"></p>
<p>对比来看：</p>
<p><img src="/assets/image-20210731152243765.png" alt="image-20210731152243765"></p>
<p>小结：</p>
<p>Docker和虚拟机的差异：</p>
<ul>
<li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p>
</li>
<li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p>
</li>
</ul>
<h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3.Docker架构"></a>1.3.Docker架构</h2><h3 id="1-3-1-镜像和容器"><a href="#1-3-1-镜像和容器" class="headerlink" title="1.3.1.镜像和容器"></a>1.3.1.镜像和容器</h3><p>Docker中有几个重要的概念：</p>
<p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p>
<p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p>
<p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p>
<p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p>
<p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p>
<p><img src="/assets/image-20210731153059464.png" alt="image-20210731153059464"></p>
<p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p>
<h3 id="1-3-2-DockerHub"><a href="#1-3-2-DockerHub" class="headerlink" title="1.3.2.DockerHub"></a>1.3.2.DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p>
<ul>
<li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p>
</li>
<li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p>
</li>
</ul>
<p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p>
<p><img src="/assets/image-20210731153743354.png" alt="image-20210731153743354"></p>
<h3 id="1-3-3-Docker架构"><a href="#1-3-3-Docker架构" class="headerlink" title="1.3.3.Docker架构"></a>1.3.3.Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p>
<p>Docker是一个CS架构的程序，由两部分组成：</p>
<ul>
<li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p>
</li>
<li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p>
</li>
</ul>
<p>如图：</p>
<p><img src="/assets/image-20210731154257653.png" alt="image-20210731154257653"></p>
<h3 id="1-3-4-小结"><a href="#1-3-4-小结" class="headerlink" title="1.3.4.小结"></a>1.3.4.小结</h3><p>镜像：</p>
<ul>
<li>将应用程序及其依赖、环境、配置打包在一起</li>
</ul>
<p>容器：</p>
<ul>
<li>镜像运行起来就是容器，一个镜像可以运行多个容器</li>
</ul>
<p>Docker结构：</p>
<ul>
<li><p>服务端：接收命令或远程请求，操作镜像或容器</p>
</li>
<li><p>客户端：发送命令或者请求到Docker服务端</p>
</li>
</ul>
<p>DockerHub：</p>
<ul>
<li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li>
</ul>
<h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4.安装Docker"></a>1.4.安装Docker</h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker。参考课前资料中的文档：</p>
<p><img src="/assets/image-20210731155002425.png" alt="image-20210731155002425"></p>
<h1 id="2-Docker的基本操作"><a href="#2-Docker的基本操作" class="headerlink" title="2.Docker的基本操作"></a>2.Docker的基本操作</h1><h2 id="2-1-镜像操作"><a href="#2-1-镜像操作" class="headerlink" title="2.1.镜像操作"></a>2.1.镜像操作</h2><h3 id="2-1-1-镜像名称"><a href="#2-1-1-镜像名称" class="headerlink" title="2.1.1.镜像名称"></a>2.1.1.镜像名称</h3><p>首先来看下镜像的名称组成：</p>
<ul>
<li>镜名称一般分两部分组成：[repository]:[tag]。</li>
<li>在没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
<p>如图：</p>
<p><img src="/assets/image-20210731155141362.png" alt="image-20210731155141362"></p>
<p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p>
<h3 id="2-1-2-镜像命令"><a href="#2-1-2-镜像命令" class="headerlink" title="2.1.2.镜像命令"></a>2.1.2.镜像命令</h3><p>常见的镜像操作命令如图：</p>
<p><img src="/assets/image-20210731155649535.png" alt="image-20210731155649535"></p>
<h3 id="2-1-3-案例1-拉取、查看镜像"><a href="#2-1-3-案例1-拉取、查看镜像" class="headerlink" title="2.1.3.案例1-拉取、查看镜像"></a>2.1.3.案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p>
<p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p>
<p><img src="/assets/image-20210731155844368.png" alt="image-20210731155844368"></p>
<p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p>
<p><img src="/assets/image-20210731155856199.png" alt="image-20210731155856199"></p>
<p>3）通过命令：docker images 查看拉取到的镜像</p>
<p><img src="/assets/image-20210731155903037.png" alt="image-20210731155903037"></p>
<h3 id="2-1-4-案例2-保存、导入镜像"><a href="#2-1-4-案例2-保存、导入镜像" class="headerlink" title="2.1.4.案例2-保存、导入镜像"></a>2.1.4.案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p>
<p>1）利用docker xx –help命令查看docker save和docker load的语法</p>
<p>例如，查看save命令用法，可以输入命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/assets/image-20210731161104732.png" alt="image-20210731161104732"></p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure>



<p>2）使用docker save导出镜像到磁盘 </p>
<p>运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<p><img src="/assets/image-20210731161354344.png" alt="image-20210731161354344"></p>
<p>3）使用docker load加载镜像</p>
<p>先删除本地的nginx镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure>



<p>然后运行命令，加载本地文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/assets/image-20210731161746245.png" alt="image-20210731161746245"></p>
<h3 id="2-1-5-练习"><a href="#2-1-5-练习" class="headerlink" title="2.1.5.练习"></a>2.1.5.练习</h3><p>需求：去DockerHub搜索并拉取一个Redis镜像</p>
<p>目标：</p>
<p>1）去DockerHub搜索Redis镜像</p>
<p>2）查看Redis镜像的名称和版本</p>
<p>3）利用docker pull命令拉取镜像</p>
<p>4）利用docker save命令将 redis:latest打包为一个redis.tar包</p>
<p>5）利用docker rmi 删除本地的redis:latest</p>
<p>6）利用docker load 重新加载 redis.tar文件</p>
<h2 id="2-2-容器操作"><a href="#2-2-容器操作" class="headerlink" title="2.2.容器操作"></a>2.2.容器操作</h2><h3 id="2-2-1-容器相关命令"><a href="#2-2-1-容器相关命令" class="headerlink" title="2.2.1.容器相关命令"></a>2.2.1.容器相关命令</h3><p>容器操作的命令如图：</p>
<p><img src="/assets/image-20210731161950495.png" alt="image-20210731161950495"></p>
<p>容器保护三个状态：</p>
<ul>
<li>运行：进程正常运行</li>
<li>暂停：进程暂停，CPU不再运行，并不释放内存</li>
<li>停止：进程终止，回收进程占用的内存、CPU等资源</li>
</ul>
<p>其中：</p>
<ul>
<li><p>docker run：创建并运行一个容器，处于运行状态</p>
</li>
<li><p>docker pause：让一个运行的容器暂停</p>
</li>
<li><p>docker unpause：让一个容器从暂停状态恢复运行</p>
</li>
<li><p>docker stop：停止一个运行的容器</p>
</li>
<li><p>docker start：让一个停止的容器再次运行</p>
</li>
<li><p>docker rm：删除一个容器</p>
</li>
</ul>
<h3 id="2-2-2-案例-创建并运行一个容器"><a href="#2-2-2-案例-创建并运行一个容器" class="headerlink" title="2.2.2.案例-创建并运行一个容器"></a>2.2.2.案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li>docker run ：创建并运行一个容器</li>
<li>–name : 给容器起一个名字，比如叫做mn</li>
<li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li>
<li>-d：后台运行容器</li>
<li>nginx：镜像名称，例如nginx</li>
</ul>
<p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p>
<p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p>
<p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p>
<p><img src="/assets/image-20210731163255863.png" alt="image-20210731163255863"></p>
<h3 id="2-2-3-案例-进入容器，修改文件"><a href="#2-2-3-案例-进入容器，修改文件" class="headerlink" title="2.2.3.案例-进入容器，修改文件"></a>2.2.3.案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p>
<p><strong>提示</strong>：进入容器要用到docker exec命令。</p>
<p><strong>步骤</strong>：</p>
<p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li><p>docker exec ：进入容器内部，执行一个命令</p>
</li>
<li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p>
</li>
<li><p>mn ：要进入的容器的名称</p>
</li>
<li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p>
</li>
</ul>
<p>2）进入nginx的HTML所在目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
<p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p>
<p><img src="/assets/image-20210731164159811.png" alt="image-20210731164159811"></p>
<p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p>
<p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p>
<p>我们执行命令，进入该目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure>

<p> 查看目录下文件：</p>
<p><img src="/assets/image-20210731164455818.png" alt="image-20210731164455818"></p>
<p>3）修改index.html的内容</p>
<p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#传智教育欢迎您#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure>



<p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p>
<p><img src="/assets/image-20210731164717604.png" alt="image-20210731164717604"></p>
<h3 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4.小结"></a>2.2.4.小结</h3><p>docker run命令的常见参数有哪些？</p>
<ul>
<li>–name：指定容器名称</li>
<li>-p：指定端口映射</li>
<li>-d：让容器后台运行</li>
</ul>
<p>查看容器日志的命令：</p>
<ul>
<li>docker logs</li>
<li>添加 -f 参数可以持续查看日志</li>
</ul>
<p>查看容器状态：</p>
<ul>
<li>docker ps</li>
<li>docker ps -a 查看所有容器，包括已经停止的</li>
</ul>
<h2 id="2-3-数据卷（容器数据管理）"><a href="#2-3-数据卷（容器数据管理）" class="headerlink" title="2.3.数据卷（容器数据管理）"></a>2.3.数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p>
<p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p>
<p><img src="/assets/image-20210731172440275.png" alt="image-20210731172440275"></p>
<p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p>
<h3 id="2-3-1-什么是数据卷"><a href="#2-3-1-什么是数据卷" class="headerlink" title="2.3.1.什么是数据卷"></a>2.3.1.什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p>
<p><img src="/assets/image-20210731173541846.png" alt="image-20210731173541846"></p>
<p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p>
<p>这样，我们操作宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html目录，就等于操作容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录了</p>
<h3 id="2-3-2-数据集操作命令"><a href="#2-3-2-数据集操作命令" class="headerlink" title="2.3.2.数据集操作命令"></a>2.3.2.数据集操作命令</h3><p>数据卷操作的基本语法如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure>

<p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p>
<ul>
<li>create 创建一个volume</li>
<li>inspect 显示一个或多个volume的信息</li>
<li>ls 列出所有的volume</li>
<li>prune 删除未使用的volume</li>
<li>rm 删除一个或多个指定的volume</li>
</ul>
<h3 id="2-3-3-创建和查看数据卷"><a href="#2-3-3-创建和查看数据卷" class="headerlink" title="2.3.3.创建和查看数据卷"></a>2.3.3.创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p>
<p>① 创建数据卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure>



<p>② 查看所有数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/assets/image-20210731173746910.png" alt="image-20210731173746910"></p>
<p>③ 查看数据卷详细信息卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/assets/image-20210731173809877.png" alt="image-20210731173809877"></p>
<p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p>
<p><strong>小结</strong>：</p>
<p>数据卷的作用：</p>
<ul>
<li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li>
</ul>
<p>数据卷操作：</p>
<ul>
<li>docker volume create：创建数据卷</li>
<li>docker volume ls：查看所有数据卷</li>
<li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li>
<li>docker volume rm：删除指定数据卷</li>
<li>docker volume prune：删除所有未使用的数据卷</li>
</ul>
<h3 id="2-3-4-挂载数据卷"><a href="#2-3-4-挂载数据卷" class="headerlink" title="2.3.4.挂载数据卷"></a>2.3.4.挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80</span><br><span class="line">  nginx \</span><br></pre></td></tr></table></figure>

<p>这里的-v就是挂载数据卷的命令：</p>
<ul>
<li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的&#x2F;root&#x2F;html这个目录中</li>
</ul>
<h3 id="2-3-5-案例-给nginx挂载数据卷"><a href="#2-3-5-案例-给nginx挂载数据卷" class="headerlink" title="2.3.5.案例-给nginx挂载数据卷"></a>2.3.5.案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p>
<p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p>
<p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p>
<p>步骤：</p>
<p>① 创建容器并挂载数据卷到容器内的HTML目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>



<p>② 进入html数据卷所在位置，并修改HTML内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure>



<h3 id="2-3-6-案例-给MySQL挂载本地目录"><a href="#2-3-6-案例-给MySQL挂载本地目录" class="headerlink" title="2.3.6.案例-给MySQL挂载本地目录"></a>2.3.6.案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p>
<ul>
<li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li>
<li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li>
</ul>
<p>如图：</p>
<p><img src="/assets/image-20210731175155453.png" alt="image-20210731175155453"></p>
<p><strong>语法</strong>：</p>
<p>目录挂载与数据卷挂载的语法是类似的：</p>
<ul>
<li>-v [宿主机目录]:[容器内目录]</li>
<li>-v [宿主机文件]:[容器内文件]</li>
</ul>
<p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p>
<p>实现思路如下：</p>
<p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p>
<p>2）创建目录&#x2F;tmp&#x2F;mysql&#x2F;data</p>
<p>3）创建目录&#x2F;tmp&#x2F;mysql&#x2F;conf，将课前资料提供的hmy.cnf文件上传到&#x2F;tmp&#x2F;mysql&#x2F;conf</p>
<p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p>
<p>① 挂载&#x2F;tmp&#x2F;mysql&#x2F;data到mysql容器内数据存储目录</p>
<p>② 挂载&#x2F;tmp&#x2F;mysql&#x2F;conf&#x2F;hmy.cnf到mysql容器的配置文件</p>
<p>③ 设置MySQL密码</p>
<h3 id="2-3-7-小结"><a href="#2-3-7-小结" class="headerlink" title="2.3.7.小结"></a>2.3.7.小结</h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p>
<ul>
<li>-v volume名称:容器内目录</li>
<li>-v 宿主机文件:容器内文</li>
<li>-v 宿主机目录:容器内目录</li>
</ul>
<p>数据卷挂载与目录直接挂载的</p>
<ul>
<li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li>
<li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li>
</ul>
<h1 id="3-Dockerfile自定义镜像"><a href="#3-Dockerfile自定义镜像" class="headerlink" title="3.Dockerfile自定义镜像"></a>3.Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p>
<p>而要自定义镜像，就必须先了解镜像的结构才行。</p>
<h2 id="3-1-镜像结构"><a href="#3-1-镜像结构" class="headerlink" title="3.1.镜像结构"></a>3.1.镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p>
<p>我们以MySQL为例，来看看镜像的组成结构：</p>
<p><img src="/assets/image-20210731175806273.png" alt="image-20210731175806273"></p>
<p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p>
<p>我们要构建镜像，其实就是实现上述打包的过程。</p>
<h2 id="3-2-Dockerfile语法"><a href="#3-2-Dockerfile语法" class="headerlink" title="3.2.Dockerfile语法"></a>3.2.Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p>
<p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p>
<p>而描述上述信息的文件就是Dockerfile文件。</p>
<p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p>
<p><img src="/assets/image-20210731180321133.png" alt="image-20210731180321133"></p>
<p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p>
<h2 id="3-3-构建Java项目"><a href="#3-3-构建Java项目" class="headerlink" title="3.3.构建Java项目"></a>3.3.构建Java项目</h2><h3 id="3-3-1-基于Ubuntu构建Java项目"><a href="#3-3-1-基于Ubuntu构建Java项目" class="headerlink" title="3.3.1.基于Ubuntu构建Java项目"></a>3.3.1.基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p>
<ul>
<li><p>步骤1：新建一个空文件夹docker-demo</p>
<p><img src="/assets/image-20210801101207444.png" alt="image-20210801101207444"></p>
</li>
<li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p>
<p><img src="/assets/image-20210801101314816.png" alt="image-20210801101314816"></p>
</li>
<li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p>
<p><img src="/assets/image-20210801101410200.png" alt="image-20210801101410200"></p>
</li>
<li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p>
<p><img src="/assets/image-20210801101455590.png" alt="image-20210801101455590"></p>
<p>其中的内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>步骤5：进入docker-demo</p>
<p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p>
</li>
<li><p>步骤6：运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后访问 <a href="http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p>
<h3 id="3-3-2-基于java8构建Java项目"><a href="#3-3-2-基于java8构建Java项目" class="headerlink" title="3.3.2.基于java8构建Java项目"></a>3.3.2.基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p>
<p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p>
<p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p>
<p>实现思路如下：</p>
<ul>
<li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p>
</li>
<li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p>
</li>
<li><p>③ 编写Dockerfile文件：</p>
<ul>
<li><p>a ）基于java:8-alpine作为基础镜像</p>
</li>
<li><p>b ）将app.jar拷贝到镜像中</p>
</li>
<li><p>c ）暴露端口</p>
</li>
<li><p>d ）编写入口ENTRYPOINT</p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>④ 使用docker build命令构建镜像</p>
</li>
<li><p>⑤ 使用docker run创建容器并运行</p>
</li>
</ul>
<h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4.小结"></a>3.4.小结</h2><p>小结：</p>
<ol>
<li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p>
</li>
<li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p>
</li>
<li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p>
</li>
</ol>
<h1 id="4-Docker-Compose"><a href="#4-Docker-Compose" class="headerlink" title="4.Docker-Compose"></a>4.Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p>
<p><img src="/assets/image-20210731180921742.png" alt="image-20210731180921742"></p>
<h2 id="4-1-初识DockerCompose"><a href="#4-1-初识DockerCompose" class="headerlink" title="4.1.初识DockerCompose"></a>4.1.初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的Compose文件就描述一个项目，其中包含两个容器：</p>
<ul>
<li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li>
<li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li>
</ul>
<p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p>
<p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p>
<h2 id="4-2-安装DockerCompose"><a href="#4-2-安装DockerCompose" class="headerlink" title="4.2.安装DockerCompose"></a>4.2.安装DockerCompose</h2><p>参考课前资料</p>
<h2 id="4-3-部署微服务集群"><a href="#4-3-部署微服务集群" class="headerlink" title="4.3.部署微服务集群"></a>4.3.部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p>
<p><strong>实现思路</strong>：</p>
<p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p>
<p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p>
<p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p>
<p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p>
<p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p>
<h3 id="4-3-1-compose文件"><a href="#4-3-1-compose文件" class="headerlink" title="4.3.1.compose文件"></a>4.3.1.compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p>
<p><img src="/assets/image-20210731181341330.png" alt="image-20210731181341330"></p>
<p>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span><br><span class="line">  <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">  <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，其中包含5个service服务：</p>
<ul>
<li><code>nacos</code>：作为注册中心和配置中心<ul>
<li><code>image: nacos/nacos-server</code>： 基于nacos&#x2F;nacos-server镜像构建</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MODE: standalone</code>：单点模式启动</li>
</ul>
</li>
<li><code>ports</code>：端口映射，这里暴露了8848端口</li>
</ul>
</li>
<li><code>mysql</code>：数据库<ul>
<li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li>
</ul>
</li>
<li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li>
</ul>
</li>
<li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li>
</ul>
<p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p>
<p><img src="/assets/image-20210801095205034.png" alt="image-20210801095205034"></p>
<p>查看微服务目录，可以看到都包含Dockerfile文件：</p>
<p><img src="/assets/image-20210801095320586.png" alt="image-20210801095320586"></p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>





<h3 id="4-3-2-修改微服务配置"><a href="#4-3-2-修改微服务配置" class="headerlink" title="4.3.2.修改微服务配置"></a>4.3.2.修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p>
<p>如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-3-打包"><a href="#4-3-3-打包" class="headerlink" title="4.3.3.打包"></a>4.3.3.打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p>
<p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打包后：</p>
<p><img src="/assets/image-20210801095951030.png" alt="image-20210801095951030"></p>
<h3 id="4-3-4-拷贝jar包到部署目录"><a href="#4-3-4-拷贝jar包到部署目录" class="headerlink" title="4.3.4.拷贝jar包到部署目录"></a>4.3.4.拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p>
<p>user-service：</p>
<p><img src="/assets/image-20210801100201253.png" alt="image-20210801100201253"></p>
<p>order-service：</p>
<p><img src="/assets/image-20210801100231495.png" alt="image-20210801100231495"></p>
<p>gateway：</p>
<p><img src="/assets/image-20210801100308102.png" alt="image-20210801100308102"></p>
<h3 id="4-3-5-部署"><a href="#4-3-5-部署" class="headerlink" title="4.3.5.部署"></a>4.3.5.部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p>
<p>上传到任意目录：</p>
<p><img src="/assets/image-20210801100955653.png" alt="image-20210801100955653"></p>
<p>部署：</p>
<p>进入cloud-demo目录，然后运行下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>







<h1 id="5-Docker镜像仓库"><a href="#5-Docker镜像仓库" class="headerlink" title="5.Docker镜像仓库"></a>5.Docker镜像仓库</h1><h2 id="5-1-搭建私有镜像仓库"><a href="#5-1-搭建私有镜像仓库" class="headerlink" title="5.1.搭建私有镜像仓库"></a>5.1.搭建私有镜像仓库</h2><p>参考课前资料《CentOS7安装Docker.md》</p>
<h2 id="5-2-推送、拉取镜像"><a href="#5-2-推送、拉取镜像" class="headerlink" title="5.2.推送、拉取镜像"></a>5.2.推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p>
<p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080&#x2F;</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>



<p>② 推送镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>



<p>③ 拉取镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos安装指南</title>
    <url>/2024/01/08/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Nacos安装指南"><a href="#Nacos安装指南" class="headerlink" title="Nacos安装指南"></a>Nacos安装指南</h1><h1 id="1-Windows安装"><a href="#1-Windows安装" class="headerlink" title="1.Windows安装"></a>1.Windows安装</h1><p>开发阶段采用单机安装即可。</p>
<h2 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1.下载安装包"></a>1.1.下载安装包</h2><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p>
<p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p>
<p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<p>如图：</p>
<p><img src="/assets/image-20210402161102887.png" alt="image-20210402161102887"></p>
<p>本课程采用1.4.1.版本的Nacos，课前资料已经准备了安装包：</p>
<p><img src="/assets/image-20210402161130261.png" alt="image-20210402161130261"></p>
<p>windows版本使用<code>nacos-server-1.4.1.zip</code>包即可。</p>
<h2 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h2><p>将这个包解压到任意非中文目录下，如图：</p>
<p><img src="/assets/image-20210402161843337.png" alt="image-20210402161843337"></p>
<p>目录说明：</p>
<ul>
<li>bin：启动脚本</li>
<li>conf：配置文件</li>
</ul>
<h2 id="1-3-端口配置"><a href="#1-3-端口配置" class="headerlink" title="1.3.端口配置"></a>1.3.端口配置</h2><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p>
<p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p>
<p><img src="/assets/image-20210402162008280.png" alt="image-20210402162008280"></p>
<p>修改其中的内容：</p>
<p><img src="/assets/image-20210402162251093.png" alt="image-20210402162251093"></p>
<h2 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4.启动"></a>1.4.启动</h2><p>启动非常简单，进入bin目录，结构如下：</p>
<p><img src="/assets/image-20210402162350977.png" alt="image-20210402162350977"></p>
<p>然后执行命令即可：</p>
<ul>
<li><p>windows命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></li>
</ul>
<p>执行后的效果如图：</p>
<p><img src="/assets/image-20210402162526774.png" alt="image-20210402162526774"></p>
<h2 id="1-5-访问"><a href="#1-5-访问" class="headerlink" title="1.5.访问"></a>1.5.访问</h2><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%EF%BC%9A">http://127.0.0.1:8848/nacos即可：</a></p>
<p><img src="/assets/image-20210402162630427.png" alt="image-20210402162630427"></p>
<p>默认的账号和密码都是nacos，进入后：</p>
<p><img src="/assets/image-20210402162709515.png" alt="image-20210402162709515"></p>
<h1 id="2-Linux安装"><a href="#2-Linux安装" class="headerlink" title="2.Linux安装"></a>2.Linux安装</h1><p>Linux或者Mac安装方式与Windows类似。</p>
<h2 id="2-1-安装JDK"><a href="#2-1-安装JDK" class="headerlink" title="2.1.安装JDK"></a>2.1.安装JDK</h2><p>Nacos依赖于JDK运行，索引Linux上也需要安装JDK才行。</p>
<p>上传jdk安装包：</p>
<p><img src="/assets/image-20210402172334810.png" alt="image-20210402172334810"></p>
<p>上传到某个目录，例如：<code>/usr/local/</code></p>
<p>然后解压缩：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvf jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后重命名为java</p>
<p>配置环境变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<p>设置环境变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>





<h2 id="2-2-上传安装包"><a href="#2-2-上传安装包" class="headerlink" title="2.2.上传安装包"></a>2.2.上传安装包</h2><p>如图：</p>
<p><img src="/assets/image-20210402161102887.png" alt="image-20210402161102887"></p>
<p>也可以直接使用课前资料中的tar.gz：</p>
<p><img src="/assets/image-20210402161130261.png" alt="image-20210402161130261"></p>
<p>上传到Linux服务器的某个目录，例如<code>/usr/local/src</code>目录下：</p>
<p><img src="/assets/image-20210402163715580.png" alt="image-20210402163715580"></p>
<h2 id="2-3-解压"><a href="#2-3-解压" class="headerlink" title="2.3.解压"></a>2.3.解压</h2><p>命令解压缩安装包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后删除安装包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf nacos-server-1.4.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>目录中最终样式：</p>
<p><img src="/assets/image-20210402163858429.png" alt="image-20210402163858429"></p>
<p>目录内部：</p>
<p><img src="/assets/image-20210402164414827.png" alt="image-20210402164414827"></p>
<h2 id="2-4-端口配置"><a href="#2-4-端口配置" class="headerlink" title="2.4.端口配置"></a>2.4.端口配置</h2><p>与windows中类似</p>
<h2 id="2-5-启动"><a href="#2-5-启动" class="headerlink" title="2.5.启动"></a>2.5.启动</h2><p>在nacos&#x2F;bin目录中，输入命令启动Nacos：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure>







<h1 id="3-Nacos的依赖"><a href="#3-Nacos的依赖" class="headerlink" title="3.Nacos的依赖"></a>3.Nacos的依赖</h1><p>父工程：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>客户端：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Nacos</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装指南</title>
    <url>/2024/01/20/Centos7%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h1 id="0-安装Docker"><a href="#0-安装Docker" class="headerlink" title="0.安装Docker"></a>0.安装Docker</h1><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p>
<p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p>
<p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS上的安装。</p>
<h1 id="1-CentOS安装Docker"><a href="#1-CentOS安装Docker" class="headerlink" title="1.CentOS安装Docker"></a>1.CentOS安装Docker</h1><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p>
<h2 id="1-1-卸载（可选）"><a href="#1-1-卸载（可选）" class="headerlink" title="1.1.卸载（可选）"></a>1.1.卸载（可选）</h2><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure>



<h2 id="1-2-安装docker"><a href="#1-2-安装docker" class="headerlink" title="1.2.安装docker"></a>1.2.安装docker</h2><p>首先需要大家虚拟机联网，安装yum工具</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure>



<p>然后更新本地镜像源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>





<p>然后输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure>

<p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p>
<h2 id="1-3-启动docker"><a href="#1-3-启动docker" class="headerlink" title="1.3.启动docker"></a>1.3.启动docker</h2><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>



<p>通过命令启动docker：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br></pre></td></tr></table></figure>



<p>然后输入命令，可以查看docker版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="/assets/image-20210418154704436.png" alt="image-20210418154704436"> </p>
<h2 id="1-4-配置镜像加速"><a href="#1-4-配置镜像加速" class="headerlink" title="1.4.配置镜像加速"></a>1.4.配置镜像加速</h2><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p>
<p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<h1 id="2-CentOS7安装DockerCompose"><a href="#2-CentOS7安装DockerCompose" class="headerlink" title="2.CentOS7安装DockerCompose"></a>2.CentOS7安装DockerCompose</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1.下载"></a>2.1.下载</h2><p>Linux下需要通过命令下载：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果下载速度较慢，或者下载失败，可以使用课前资料提供的docker-compose文件：</p>
<p><img src="/assets/image-20210417133020614.png" alt="image-20210417133020614"></p>
<p>上传到<code>/usr/local/bin/</code>目录也可以。</p>
<h2 id="2-2-修改文件权限"><a href="#2-2-修改文件权限" class="headerlink" title="2.2.修改文件权限"></a>2.2.修改文件权限</h2><p>修改文件权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>





<h2 id="2-3-Base自动补全命令："><a href="#2-3-Base自动补全命令：" class="headerlink" title="2.3.Base自动补全命令："></a>2.3.Base自动补全命令：</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补全命令</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果这里出现错误，需要修改自己的hosts文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>





<h1 id="3-Docker镜像仓库"><a href="#3-Docker镜像仓库" class="headerlink" title="3.Docker镜像仓库"></a>3.Docker镜像仓库</h1><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p>
<p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p>
<h2 id="3-1-简化版镜像仓库"><a href="#3-1-简化版镜像仓库" class="headerlink" title="3.1.简化版镜像仓库"></a>3.1.简化版镜像仓库</h2><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p>
<p>搭建方式比较简单，命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry	\</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure>



<p>命令中挂载了一个数据卷registry-data到容器内的&#x2F;var&#x2F;lib&#x2F;registry 目录，这是私有镜像库存放数据的目录。</p>
<p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p>
<h2 id="3-2-带有图形化界面版本"><a href="#3-2-带有图形化界面版本" class="headerlink" title="3.2.带有图形化界面版本"></a>3.2.带有图形化界面版本</h2><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=传智教育私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure>



<h2 id="3-3-配置Docker信任地址"><a href="#3-3-配置Docker信任地址" class="headerlink" title="3.3.配置Docker信任地址"></a>3.3.配置Docker信任地址</h2><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.150.101:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2024/01/20/RabbitMQ/</url>
    <content><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h1 id="1-初识MQ"><a href="#1-初识MQ" class="headerlink" title="1.初识MQ"></a>1.初识MQ</h1><ul>
<li>注：ctrl+p查看参数列表</li>
</ul>
<h2 id="1-1-同步和异步通讯"><a href="#1-1-同步和异步通讯" class="headerlink" title="1.1.同步和异步通讯"></a>1.1.同步和异步通讯</h2><p>微服务间通讯有同步和异步两种方式：</p>
<p>同步通讯：就像打电话，需要实时响应。</p>
<p>异步通讯：就像发邮件，不需要马上回复。</p>
<p><img src="/assets/image-20210717161939695.png" alt="image-20210717161939695"></p>
<p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p>
<h3 id="1-1-1-同步通讯"><a href="#1-1-1-同步通讯" class="headerlink" title="1.1.1.同步通讯"></a>1.1.1.同步通讯</h3><p>我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：</p>
<p><img src="/assets/image-20210717162004285.png" alt="image-20210717162004285"></p>
<p>总结：</p>
<p>同步调用的优点：</p>
<ul>
<li>时效性较强，可以立即得到结果</li>
</ul>
<p>同步调用的问题：</p>
<ul>
<li>耦合度高</li>
<li>性能和吞吐能力下降</li>
<li>有额外的资源消耗</li>
<li>有级联失败问题</li>
</ul>
<h3 id="1-1-2-异步通讯"><a href="#1-1-2-异步通讯" class="headerlink" title="1.1.2.异步通讯"></a>1.1.2.异步通讯</h3><p>异步调用则可以避免上述问题：</p>
<p>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p>
<p>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p>
<p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p>
<p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p>
<p><img src="/assets/image-20210422095356088.png" alt="image-20210422095356088"></p>
<p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p>
<p>好处：</p>
<ul>
<li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p>
</li>
<li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p>
</li>
<li><p>调用间没有阻塞，不会造成无效的资源占用</p>
</li>
<li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p>
</li>
<li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>架构复杂了，业务没有明显的流程线，不好管理</li>
<li>需要依赖于Broker的可靠、安全、性能</li>
</ul>
<p>好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。</p>
<h2 id="1-2-技术对比："><a href="#1-2-技术对比：" class="headerlink" title="1.2.技术对比："></a>1.2.技术对比：</h2><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。</p>
<p>比较常见的MQ实现：</p>
<ul>
<li>ActiveMQ</li>
<li>RabbitMQ</li>
<li>RocketMQ</li>
<li>Kafka</li>
</ul>
<p>几种常见MQ的对比：</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>RabbitMQ</strong></th>
<th><strong>ActiveMQ</strong></th>
<th><strong>RocketMQ</strong></th>
<th><strong>Kafka</strong></th>
</tr>
</thead>
<tbody><tr>
<td>公司&#x2F;社区</td>
<td>Rabbit</td>
<td>Apache</td>
<td>阿里</td>
<td>Apache</td>
</tr>
<tr>
<td>开发语言</td>
<td>Erlang</td>
<td>Java</td>
<td>Java</td>
<td>Scala&amp;Java</td>
</tr>
<tr>
<td>协议支持</td>
<td>AMQP，XMPP，SMTP，STOMP</td>
<td>OpenWire,STOMP，REST,XMPP,AMQP</td>
<td>自定义协议</td>
<td>自定义协议</td>
</tr>
<tr>
<td>可用性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>单机吞吐量</td>
<td>一般</td>
<td>差</td>
<td>高</td>
<td>非常高</td>
</tr>
<tr>
<td>消息延迟</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>毫秒级</td>
<td>毫秒以内</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>一般</td>
</tr>
</tbody></table>
<p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p>
<p>追求可靠性：RabbitMQ、RocketMQ</p>
<p>追求吞吐能力：RocketMQ、Kafka</p>
<p>追求消息低延迟：RabbitMQ、Kafka</p>
<h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h1><h2 id="2-1-安装RabbitMQ"><a href="#2-1-安装RabbitMQ" class="headerlink" title="2.1.安装RabbitMQ"></a>2.1.安装RabbitMQ</h2><p>安装RabbitMQ，参考课前资料：</p>
<p><img src="/assets/image-20210717162628635.png" alt="image-20210717162628635"></p>
<p>MQ的基本结构：</p>
<p><img src="/assets/image-20210717162752376.png" alt="image-20210717162752376"></p>
<p>RabbitMQ中的一些角色：</p>
<ul>
<li>publisher：生产者</li>
<li>consumer：消费者</li>
<li>exchange个：交换机，负责消息路由</li>
<li>queue：队列，存储消息</li>
<li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li>
</ul>
<h2 id="2-2-RabbitMQ消息模型"><a href="#2-2-RabbitMQ消息模型" class="headerlink" title="2.2.RabbitMQ消息模型"></a>2.2.RabbitMQ消息模型</h2><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：</p>
<p><img src="/assets/image-20210717163332646.png" alt="image-20210717163332646"></p>
<h2 id="2-3-导入Demo工程"><a href="#2-3-导入Demo工程" class="headerlink" title="2.3.导入Demo工程"></a>2.3.导入Demo工程</h2><p>课前资料提供了一个Demo工程，mq-demo:</p>
<p><img src="/assets/image-20210717163253264.png" alt="image-20210717163253264"></p>
<p>导入后可以看到结构如下：</p>
<p><img src="/assets/image-20210717163604330.png" alt="image-20210717163604330"></p>
<p>包括三部分：</p>
<ul>
<li>mq-demo：父工程，管理项目依赖</li>
<li>publisher：消息的发送者</li>
<li>consumer：消息的消费者</li>
</ul>
<h2 id="2-4-入门案例"><a href="#2-4-入门案例" class="headerlink" title="2.4.入门案例"></a>2.4.入门案例</h2><p>简单队列模式的模型图：</p>
<p> <img src="/assets/image-20210717163434647.png" alt="image-20210717163434647"></p>
<p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p>
<ul>
<li>publisher：消息发布者，将消息发送到队列queue</li>
<li>queue：消息队列，负责接受并缓存消息</li>
<li>consumer：订阅队列，处理队列中的消息</li>
</ul>
<h3 id="2-4-1-publisher实现"><a href="#2-4-1-publisher实现" class="headerlink" title="2.4.1.publisher实现"></a>2.4.1.publisher实现</h3><p>思路：</p>
<ul>
<li>建立连接</li>
<li>创建Channel</li>
<li>声明队列</li>
<li>发送消息</li>
<li>关闭连接和channel</li>
</ul>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="2-4-2-consumer实现"><a href="#2-4-2-consumer实现" class="headerlink" title="2.4.2.consumer实现"></a>2.4.2.consumer实现</h3><p>代码思路：</p>
<ul>
<li>建立连接</li>
<li>创建Channel</li>
<li>声明队列</li>
<li>订阅消息</li>
</ul>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5.总结"></a>2.5.总结</h2><p>基本消息队列的消息发送流程：</p>
<ol>
<li><p>建立connection</p>
</li>
<li><p>创建channel</p>
</li>
<li><p>利用channel声明队列</p>
</li>
<li><p>利用channel向队列发送消息</p>
</li>
</ol>
<p>基本消息队列的消息接收流程：</p>
<ol>
<li><p>建立connection</p>
</li>
<li><p>创建channel</p>
</li>
<li><p>利用channel声明队列</p>
</li>
<li><p>定义consumer的消费行为handleDelivery()</p>
</li>
<li><p>利用channel将消费者与队列绑定</p>
</li>
</ol>
<h1 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3.SpringAMQP"></a>3.SpringAMQP</h1><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p>
<p>SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p>
<p><img src="/assets/image-20210717164024967.png" alt="image-20210717164024967"></p>
<p><img src="/assets/image-20210717164038678.png" alt="image-20210717164038678"></p>
<p>SpringAMQP提供了三个功能：</p>
<ul>
<li>自动声明队列、交换机及其绑定关系</li>
<li>基于注解的监听器模式，异步接收消息</li>
<li>封装了RabbitTemplate工具，用于发送消息</li>
</ul>
<h2 id="3-1-Basic-Queue-简单队列模型"><a href="#3-1-Basic-Queue-简单队列模型" class="headerlink" title="3.1.Basic Queue 简单队列模型"></a>3.1.Basic Queue 简单队列模型</h2><p>在父工程mq-demo中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-1-1-消息发送"><a href="#3-1-1-消息发送" class="headerlink" title="3.1.1.消息发送"></a>3.1.1.消息发送</h3><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>



<p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-1-2-消息接收"><a href="#3-1-2-消息接收" class="headerlink" title="3.1.2.消息接收"></a>3.1.2.消息接收</h3><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>



<p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1-3-测试"><a href="#3-1-3-测试" class="headerlink" title="3.1.3.测试"></a>3.1.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p>
<h2 id="3-2-WorkQueue"><a href="#3-2-WorkQueue" class="headerlink" title="3.2.WorkQueue"></a>3.2.WorkQueue</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p>
<p><img src="/assets/image-20210717164238910.png" alt="image-20210717164238910"></p>
<p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p>
<p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p>
<h3 id="3-2-1-消息发送"><a href="#3-2-1-消息发送" class="headerlink" title="3.2.1.消息发送"></a>3.2.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p>
<p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-2-2-消息接收"><a href="#3-2-2-消息接收" class="headerlink" title="3.2.2.消息接收"></a>3.2.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到这个消费者sleep了1000秒，模拟任务耗时。</p>
<h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3.测试"></a>3.2.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p>
<p>可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。</p>
<p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p>
<h3 id="3-2-4-能者多劳"><a href="#3-2-4-能者多劳" class="headerlink" title="3.2.4.能者多劳"></a>3.2.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-5-总结"><a href="#3-2-5-总结" class="headerlink" title="3.2.5.总结"></a>3.2.5.总结</h3><p>Work模型的使用：</p>
<ul>
<li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li>
<li>通过设置prefetch来控制消费者预取的消息数量</li>
</ul>
<h2 id="3-3-发布-订阅"><a href="#3-3-发布-订阅" class="headerlink" title="3.3.发布&#x2F;订阅"></a>3.3.发布&#x2F;订阅</h2><p>发布订阅的模型如图：</p>
<p><img src="/assets/image-20210717165309625.png" alt="image-20210717165309625"></p>
<p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p>
<ul>
<li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li>
<li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul>
<li>Fanout：广播，将消息交给所有绑定到交换机的队列</li>
<li>Direct：定向，把消息交给符合指定routing key 的队列</li>
<li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li>
</ul>
</li>
<li>Consumer：消费者，与以前一样，订阅队列，没有变化</li>
<li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li>
</ul>
<p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>
<h2 id="3-4-Fanout"><a href="#3-4-Fanout" class="headerlink" title="3.4.Fanout"></a>3.4.Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p>
<p><img src="/assets/image-20210717165438225.png" alt="image-20210717165438225"></p>
<p>在广播模式下，消息发送流程是这样的：</p>
<ul>
<li>1）  可以有多个队列</li>
<li>2）  每个队列都要绑定到Exchange（交换机）</li>
<li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li>
<li>4）  交换机把消息发送给绑定过的所有队列</li>
<li>5）  订阅队列的消费者都能拿到消息</li>
</ul>
<p>我们的计划是这样的：</p>
<ul>
<li>创建一个交换机 itcast.fanout，类型是Fanout</li>
<li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li>
</ul>
<p><img src="/assets/image-20210717165509466.png" alt="image-20210717165509466"></p>
<h3 id="3-4-1-声明队列和交换机"><a href="#3-4-1-声明队列和交换机" class="headerlink" title="3.4.1.声明队列和交换机"></a>3.4.1.声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p>
<p><img src="/assets/image-20210717165552676.png" alt="image-20210717165552676"></p>
<p>在consumer中创建一个类，声明队列和交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-2-消息发送"><a href="#3-4-2-消息发送" class="headerlink" title="3.4.2.消息发送"></a>3.4.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-3-消息接收"><a href="#3-4-3-消息接收" class="headerlink" title="3.4.3.消息接收"></a>3.4.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>交换机的作用是什么？</p>
<ul>
<li>接收publisher发送的消息</li>
<li>将消息按照规则路由到与之绑定的队列</li>
<li>不能缓存消息，路由失败，消息丢失</li>
<li>FanoutExchange的会将消息路由到每个绑定的队列</li>
</ul>
<p>声明队列、交换机、绑定关系的Bean是什么？</p>
<ul>
<li>Queue</li>
<li>FanoutExchange</li>
<li>Binding</li>
</ul>
<h2 id="3-5-Direct"><a href="#3-5-Direct" class="headerlink" title="3.5.Direct"></a>3.5.Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p>
<p><img src="/assets/image-20210717170041447.png" alt="image-20210717170041447"></p>
<p> 在Direct模型下：</p>
<ul>
<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li>
<li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li>
<li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li>
</ul>
<p><strong>案例需求如下</strong>：</p>
<ol>
<li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p>
</li>
<li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p>
</li>
<li><p>在publisher中编写测试方法，向itcast. direct发送消息</p>
</li>
</ol>
<p><img src="/assets/image-20210717170223317.png" alt="image-20210717170223317"></p>
<h3 id="3-5-1-基于注解声明队列和交换机"><a href="#3-5-1-基于注解声明队列和交换机" class="headerlink" title="3.5.1.基于注解声明队列和交换机"></a>3.5.1.基于注解声明队列和交换机</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p>
<p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-5-2-消息发送"><a href="#3-5-2-消息发送" class="headerlink" title="3.5.2.消息发送"></a>3.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-5-3-总结"><a href="#3-5-3-总结" class="headerlink" title="3.5.3.总结"></a>3.5.3.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p>
<ul>
<li>Fanout交换机将消息路由给每一个与之绑定的队列</li>
<li>Direct交换机根据RoutingKey判断路由给哪个队列</li>
<li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li>
</ul>
<p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p>
<ul>
<li>@Queue</li>
<li>@Exchange</li>
</ul>
<h2 id="3-6-Topic"><a href="#3-6-Topic" class="headerlink" title="3.6.Topic"></a>3.6.Topic</h2><h3 id="3-6-1-说明"><a href="#3-6-1-说明" class="headerlink" title="3.6.1.说明"></a>3.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p>
<p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p>
<p> 通配符规则：</p>
<p><code>#</code>：匹配一个或多个词</p>
<p><code>*</code>：匹配不多不少恰好1个词</p>
<p>举例：</p>
<p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p>
<p><code>item.*</code>：只能匹配<code>item.spu</code></p>
<p>​     </p>
<p>图示：</p>
<p> <img src="/assets/image-20210717170705380.png" alt="image-20210717170705380"></p>
<p>解释：</p>
<ul>
<li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li>
<li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li>
</ul>
<p>案例需求：</p>
<p>实现思路如下：</p>
<ol>
<li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p>
</li>
<li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p>
</li>
<li><p>在publisher中编写测试方法，向itcast. topic发送消息</p>
</li>
</ol>
<p><img src="/assets/image-20210717170829229.png" alt="image-20210717170829229"></p>
<h3 id="3-6-2-消息发送"><a href="#3-6-2-消息发送" class="headerlink" title="3.6.2.消息发送"></a>3.6.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * topicExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-6-3-消息接收"><a href="#3-6-3-消息接收" class="headerlink" title="3.6.3.消息接收"></a>3.6.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-6-4-总结"><a href="#3-6-4-总结" class="headerlink" title="3.6.4.总结"></a>3.6.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p>
<ul>
<li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li>
<li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li>
<li><code>#</code>：代表0个或多个词</li>
<li><code>*</code>：代表1个词</li>
</ul>
<h2 id="3-7-消息转换器"><a href="#3-7-消息转换器" class="headerlink" title="3.7.消息转换器"></a>3.7.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p>
<p><img src="/assets/image-20200525170410401.png" alt="image-20200525170410401"></p>
<p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p>
<ul>
<li>数据体积过大</li>
<li>有安全漏洞</li>
<li>可读性差</li>
</ul>
<p>我们来测试一下。</p>
<h3 id="3-7-1-测试默认转换器"><a href="#3-7-1-测试默认转换器" class="headerlink" title="3.7.1.测试默认转换器"></a>3.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;simple.queue&quot;</span>,<span class="string">&quot;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>停止consumer服务</p>
<p>发送消息后查看控制台：</p>
<p><img src="/assets/image-20210422232835363.png" alt="image-20210422232835363"></p>
<h3 id="3-7-2-配置JSON转换器"><a href="#3-7-2-配置JSON转换器" class="headerlink" title="3.7.2.配置JSON转换器"></a>3.7.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p>
<p>在publisher和consumer两个服务中都引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置消息转换器。</p>
<p>在启动类中添加一个Bean即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ部署指南</title>
    <url>/2024/01/20/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="RabbitMQ部署指南"><a href="#RabbitMQ部署指南" class="headerlink" title="RabbitMQ部署指南"></a>RabbitMQ部署指南</h1><h1 id="1-单机部署"><a href="#1-单机部署" class="headerlink" title="1.单机部署"></a>1.单机部署</h1><p>我们在Centos7虚拟机中使用Docker来安装。</p>
<h2 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1.下载镜像"></a>1.1.下载镜像</h2><p>方式一：在线拉取</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>



<p>方式二：从本地加载</p>
<p>在课前资料已经提供了镜像包：</p>
<p><img src="/assets/image-20210423191210349.png" alt="image-20210423191210349"> </p>
<p>上传到虚拟机中后，使用命令加载镜像即可：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load -i mq.tar</span><br></pre></td></tr></table></figure>





<h2 id="1-2-安装MQ"><a href="#1-2-安装MQ" class="headerlink" title="1.2.安装MQ"></a>1.2.安装MQ</h2><p>执行下面的命令来运行MQ容器：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=itcast \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure>







<h1 id="2-集群部署"><a href="#2-集群部署" class="headerlink" title="2.集群部署"></a>2.集群部署</h1><p>接下来，我们看看如何安装RabbitMQ的集群。</p>
<h2 id="2-1-集群分类"><a href="#2-1-集群分类" class="headerlink" title="2.1.集群分类"></a>2.1.集群分类</h2><p>在RabbitMQ的官方文档中，讲述了两种集群的配置方式：</p>
<ul>
<li>普通模式：普通模式集群不进行数据同步，每个MQ都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有2个MQ：mq1，和mq2，如果你的消息在mq1，而你连接到了mq2，那么mq2会去mq1拉取消息，然后返回给你。如果mq1宕机，消息就会丢失。</li>
<li>镜像模式：与普通模式不同，队列会在各个mq的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li>
</ul>
<p>我们先来看普通模式集群。</p>
<h2 id="2-2-设置网络"><a href="#2-2-设置网络" class="headerlink" title="2.2.设置网络"></a>2.2.设置网络</h2><p>首先，我们需要让3台MQ互相知道对方的存在。</p>
<p>分别在3台机器中，设置 &#x2F;etc&#x2F;hosts文件，添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.150.101 mq1</span><br><span class="line">192.168.150.102 mq2</span><br><span class="line">192.168.150.103 mq3</span><br></pre></td></tr></table></figure>

<p>并在每台机器上测试，是否可以ping通对方：</p>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud day1</title>
    <url>/2024/01/08/SpringCloud01/</url>
    <content><![CDATA[<h1 id="SpringCloud-day1"><a href="#SpringCloud-day1" class="headerlink" title="SpringCloud day1"></a>SpringCloud day1</h1><h1 id="1-认识微服务"><a href="#1-认识微服务" class="headerlink" title="1.认识微服务"></a>1.认识微服务</h1><p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p>
<h2 id="1-0-学习目标"><a href="#1-0-学习目标" class="headerlink" title="1.0.学习目标"></a>1.0.学习目标</h2><p>了解微服务架构的优缺点</p>
<h2 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1.单体架构"></a>1.1.单体架构</h2><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p>
<p><img src="/assets/image-20210713202807818.png" alt="image-20210713202807818"></p>
<p>单体架构的优缺点如下：</p>
<p><strong>优点：</strong></p>
<ul>
<li>架构简单</li>
<li>部署成本低</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>耦合度高（维护困难、升级困难）</li>
</ul>
<h2 id="1-2-分布式架构"><a href="#1-2-分布式架构" class="headerlink" title="1.2.分布式架构"></a>1.2.分布式架构</h2><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p>
<p><img src="/assets/image-20210713203124797.png" alt="image-20210713203124797"></p>
<p>分布式架构的优缺点：</p>
<p><strong>优点：</strong></p>
<ul>
<li>降低服务耦合</li>
<li>有利于服务升级和拓展</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>服务调用关系错综复杂</li>
</ul>
<p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p>
<ul>
<li>服务拆分的粒度如何界定？</li>
<li>服务之间如何调用？</li>
<li>服务的调用关系如何管理？</li>
</ul>
<p>人们需要制定一套行之有效的标准来约束分布式架构。</p>
<h2 id="1-3-微服务"><a href="#1-3-微服务" class="headerlink" title="1.3.微服务"></a>1.3.微服务</h2><p>微服务的架构特征：</p>
<ul>
<li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li>
<li>自治：团队独立、技术独立、数据独立，独立部署和交付</li>
<li>面向服务：服务提供统一标准的接口，与语言和技术无关</li>
<li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li>
</ul>
<p><img src="/assets/image-20210713203753373.png" alt="image-20210713203753373"></p>
<p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p>
<p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p>
<p>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案。</p>
<p>其中在Java领域最引人注目的就是SpringCloud提供的方案了。</p>
<h2 id="1-4-SpringCloud"><a href="#1-4-SpringCloud" class="headerlink" title="1.4.SpringCloud"></a>1.4.SpringCloud</h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud%E3%80%82">https://spring.io/projects/spring-cloud。</a></p>
<p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p>
<p>其中常见的组件包括：</p>
<p><img src="/assets/image-20210713204155887.png" alt="image-20210713204155887"></p>
<p>另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：</p>
<p><img src="/assets/image-20210713205003790.png" alt="image-20210713205003790"></p>
<p>我们课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。</p>
<h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5.总结"></a>1.5.总结</h2><ul>
<li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p>
</li>
<li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p>
</li>
<li><p>微服务：一种良好的分布式架构方案</p>
<p>①优点：拆分粒度更小、服务更独立、耦合度更低</p>
<p>②缺点：架构非常复杂，运维、监控、部署难度提高</p>
</li>
<li><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p>
</li>
</ul>
<h1 id="2-服务拆分和远程调用"><a href="#2-服务拆分和远程调用" class="headerlink" title="2.服务拆分和远程调用"></a>2.服务拆分和远程调用</h1><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p>
<h2 id="2-1-服务拆分原则"><a href="#2-1-服务拆分原则" class="headerlink" title="2.1.服务拆分原则"></a>2.1.服务拆分原则</h2><p>这里我总结了微服务拆分时的几个原则：</p>
<ul>
<li>不同微服务，不要重复开发相同业务</li>
<li>微服务数据独立，不要访问其它微服务的数据库</li>
<li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li>
</ul>
<p><img src="/assets/image-20210713210800950.png" alt="image-20210713210800950"></p>
<h2 id="2-2-服务拆分示例"><a href="#2-2-服务拆分示例" class="headerlink" title="2.2.服务拆分示例"></a>2.2.服务拆分示例</h2><p>以课前资料中的微服务cloud-demo为例，其结构如下：</p>
<p><img src="/assets/image-20210713211009593.png" alt="image-20210713211009593"></p>
<p>cloud-demo：父工程，管理依赖</p>
<ul>
<li>order-service：订单微服务，负责订单相关业务</li>
<li>user-service：用户微服务，负责用户相关业务</li>
</ul>
<p>要求：</p>
<ul>
<li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li>
<li>订单服务和用户服务都对外暴露Restful的接口</li>
<li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li>
</ul>
<h3 id="2-2-1-导入Sql语句"><a href="#2-2-1-导入Sql语句" class="headerlink" title="2.2.1.导入Sql语句"></a>2.2.1.导入Sql语句</h3><p>首先，将课前资料提供的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>导入到mysql中：</p>
<p><img src="/assets/image-20210713211417049.png" alt="image-20210713211417049"></p>
<p>cloud-user表中初始数据如下：</p>
<p><img src="/assets/image-20210713211550169.png" alt="image-20210713211550169"></p>
<p>cloud-order表中初始数据如下：</p>
<p><img src="/assets/image-20210713211657319.png" alt="image-20210713211657319"></p>
<p>cloud-order表中持有cloud-user表中的id字段。</p>
<h3 id="2-2-2-导入demo工程"><a href="#2-2-2-导入demo工程" class="headerlink" title="2.2.2.导入demo工程"></a>2.2.2.导入demo工程</h3><p>用IDEA导入课前资料提供的Demo：</p>
<p><img src="/assets/image-20210713211814094.png" alt="image-20210713211814094"></p>
<p>项目结构如下：</p>
<p><img src="/assets/image-20210713212656887.png" alt="image-20210713212656887"></p>
<p>导入后，会在IDEA右下角出现弹窗：</p>
<p><img src="/assets/image-20210713212349272.png" alt="image-20210713212349272"></p>
<p>点击弹窗，然后按下图选择：</p>
<p><img src="/assets/image-20210713212336185.png" alt="image-20210713212336185"></p>
<p>会出现这样的菜单：</p>
<p><img src="/assets/image-20210713212513324.png" alt="image-20210713212513324"></p>
<p>配置下项目使用的JDK：</p>
<p><img src="/assets/image-20210713220736408.png" alt="image-20210713220736408"></p>
<h2 id="2-3-实现远程调用案例"><a href="#2-3-实现远程调用案例" class="headerlink" title="2.3.实现远程调用案例"></a>2.3.实现远程调用案例</h2><p>在order-service服务中，有一个根据id查询订单的接口：</p>
<p><img src="/assets/image-20210713212749575.png" alt="image-20210713212749575"></p>
<p>根据id查询订单，返回值是Order对象，如图：</p>
<p><img src="/assets/image-20210713212901725.png" alt="image-20210713212901725"></p>
<p>其中的user为null</p>
<p>在user-service中有一个根据id查询用户的接口：</p>
<p><img src="/assets/image-20210713213146089.png" alt="image-20210713213146089"></p>
<p>查询的结果如图：</p>
<p><img src="/assets/image-20210713213213075.png" alt="image-20210713213213075"></p>
<h3 id="2-3-1-案例需求："><a href="#2-3-1-案例需求：" class="headerlink" title="2.3.1.案例需求："></a>2.3.1.案例需求：</h3><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p>
<p><img src="/assets/image-20210713213312278.png" alt="image-20210713213312278"></p>
<p>因此，我们需要在order-service中 向user-service发起一个http的请求，调用<a href="http://localhost:8081/user/%7BuserId%7D%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E3%80%82">http://localhost:8081/user/{userId}这个接口。</a></p>
<p>大概的步骤是这样的：</p>
<ul>
<li>注册一个RestTemplate的实例到Spring容器</li>
<li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li>
<li>将查询的User填充到Order对象，一起返回</li>
</ul>
<h3 id="2-3-2-注册RestTemplate"><a href="#2-3-2-注册RestTemplate" class="headerlink" title="2.3.2.注册RestTemplate"></a>2.3.2.注册RestTemplate</h3><p>首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-3-实现远程调用"><a href="#2-3-3-实现远程调用" class="headerlink" title="2.3.3.实现远程调用"></a>2.3.3.实现远程调用</h3><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p>
<p><img src="/assets/image-20210713213959569.png" alt="image-20210713213959569"></p>
<h2 id="2-4-提供者与消费者"><a href="#2-4-提供者与消费者" class="headerlink" title="2.4.提供者与消费者"></a>2.4.提供者与消费者</h2><p>在服务调用关系中，会有两个不同的角色：</p>
<p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p>
<p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p>
<p><img src="/assets/image-20210713214404481.png" alt="image-20210713214404481"></p>
<p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p>
<p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p>
<ul>
<li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li>
<li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li>
</ul>
<p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p>
<h1 id="3-Eureka注册中心"><a href="#3-Eureka注册中心" class="headerlink" title="3.Eureka注册中心"></a>3.Eureka注册中心</h1><p>假如我们的服务提供者user-service部署了多个实例，如图：</p>
<p><img src="/assets/image-20210713214925388.png" alt="image-20210713214925388"></p>
<p>大家思考几个问题：</p>
<ul>
<li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li>
<li>有多个user-service实例地址，order-service调用时该如何选择？</li>
<li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li>
</ul>
<h2 id="3-1-Eureka的结构和作用"><a href="#3-1-Eureka的结构和作用" class="headerlink" title="3.1.Eureka的结构和作用"></a>3.1.Eureka的结构和作用</h2><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p>
<p><img src="/assets/image-20210713220104956.png" alt="image-20210713220104956"></p>
<p>回答之前的各个问题。</p>
<p>问题1：order-service如何得知user-service实例地址？</p>
<p>获取地址信息的流程如下：</p>
<ul>
<li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册</li>
<li>eureka-server保存服务名称到服务实例地址列表的映射关系</li>
<li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取</li>
</ul>
<p>问题2：order-service如何从多个user-service实例中选择具体的实例？</p>
<ul>
<li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li>
<li>向该实例地址发起远程调用</li>
</ul>
<p>问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p>
<ul>
<li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li>
<li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li>
<li>order-service拉取服务时，就能将故障实例排除了</li>
</ul>
<blockquote>
<p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p>
</blockquote>
<p>因此，接下来我们动手实践的步骤包括：</p>
<p><img src="/assets/image-20210713220509769.png" alt="image-20210713220509769"></p>
<h2 id="3-2-搭建eureka-server"><a href="#3-2-搭建eureka-server" class="headerlink" title="3.2.搭建eureka-server"></a>3.2.搭建eureka-server</h2><p>首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务</p>
<h3 id="3-2-1-创建eureka-server服务"><a href="#3-2-1-创建eureka-server服务" class="headerlink" title="3.2.1.创建eureka-server服务"></a>3.2.1.创建eureka-server服务</h3><p>在cloud-demo父工程下，创建一个子模块：</p>
<p><img src="/assets/image-20210713220605881.png" alt="image-20210713220605881"></p>
<p>填写模块信息：</p>
<p><img src="/assets/image-20210713220857396.png" alt="image-20210713220857396"></p>
<p>然后填写服务信息：</p>
<p><img src="/assets/image-20210713221339022.png" alt="image-20210713221339022"></p>
<h3 id="3-2-2-引入eureka依赖"><a href="#3-2-2-引入eureka依赖" class="headerlink" title="3.2.2.引入eureka依赖"></a>3.2.2.引入eureka依赖</h3><p>引入SpringCloud为eureka提供的starter依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-3-编写启动类"><a href="#3-2-3-编写启动类" class="headerlink" title="3.2.3.编写启动类"></a>3.2.3.编写启动类</h3><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-4-编写配置文件"><a href="#3-2-4-编写配置文件" class="headerlink" title="3.2.4.编写配置文件"></a>3.2.4.编写配置文件</h3><p>编写一个application.yml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-5-启动服务"><a href="#3-2-5-启动服务" class="headerlink" title="3.2.5.启动服务"></a>3.2.5.启动服务</h3><p>启动微服务，然后在浏览器访问：<a href="http://127.0.0.1:10086/">http://127.0.0.1:10086</a></p>
<p>看到下面结果应该是成功了：</p>
<p><img src="/assets/image-20210713222157190.png" alt="image-20210713222157190"></p>
<h2 id="3-3-服务注册"><a href="#3-3-服务注册" class="headerlink" title="3.3.服务注册"></a>3.3.服务注册</h2><p>下面，我们将user-service注册到eureka-server中去。</p>
<h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2）配置文件"><a href="#2）配置文件" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>



<h3 id="3）启动多个user-service实例"><a href="#3）启动多个user-service实例" class="headerlink" title="3）启动多个user-service实例"></a>3）启动多个user-service实例</h3><p>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。</p>
<p>首先，复制原来的user-service启动配置：</p>
<p><img src="/assets/image-20210713222656562.png" alt="image-20210713222656562"></p>
<p>然后，在弹出的窗口中，填写信息：</p>
<p><img src="/assets/image-20210713222757702.png" alt="image-20210713222757702"></p>
<p>现在，SpringBoot窗口会出现两个user-service启动配置：</p>
<p><img src="/assets/image-20210713222841951.png" alt="image-20210713222841951"></p>
<p>不过，第一个是8081端口，第二个是8082端口。</p>
<p>启动两个user-service实例：</p>
<p><img src="/assets/image-20210713223041491.png" alt="image-20210713223041491"></p>
<p>查看eureka-server管理页面：</p>
<p><img src="/assets/image-20210713223150650.png" alt="image-20210713223150650"></p>
<h2 id="3-4-服务发现"><a href="#3-4-服务发现" class="headerlink" title="3.4.服务发现"></a>3.4.服务发现</h2><p>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p>
<h3 id="1）引入依赖-1"><a href="#1）引入依赖-1" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。</p>
<p>在order-service的pom文件中，引入下面的eureka-client依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2）配置文件-1"><a href="#2）配置文件-1" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p>
<p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>



<h3 id="3）服务拉取和负载均衡"><a href="#3）服务拉取和负载均衡" class="headerlink" title="3）服务拉取和负载均衡"></a>3）服务拉取和负载均衡</h3><p>最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。</p>
<p>不过这些动作不用我们去做，只需要添加一些注解即可。</p>
<p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p>
<p><img src="/assets/image-20210713224049419.png" alt="image-20210713224049419"></p>
<p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p>
<p><img src="/assets/image-20210713224245731.png" alt="image-20210713224245731"></p>
<p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p>
<h1 id="4-Ribbon负载均衡"><a href="#4-Ribbon负载均衡" class="headerlink" title="4.Ribbon负载均衡"></a>4.Ribbon负载均衡</h1><p>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p>
<h2 id="4-1-负载均衡原理"><a href="#4-1-负载均衡原理" class="headerlink" title="4.1.负载均衡原理"></a>4.1.负载均衡原理</h2><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p>
<p><img src="/assets/image-20210713224517686.png" alt="image-20210713224517686"></p>
<p>那么我们发出的请求明明是<a href="http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F">http://userservice/user/1，怎么变成了http://localhost:8081的呢？</a></p>
<h2 id="4-2-源码跟踪"><a href="#4-2-源码跟踪" class="headerlink" title="4.2.源码跟踪"></a>4.2.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p>
<p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p>
<p>我们进行源码跟踪：</p>
<h3 id="1）LoadBalancerIntercepor"><a href="#1）LoadBalancerIntercepor" class="headerlink" title="1）LoadBalancerIntercepor"></a>1）LoadBalancerIntercepor</h3><p><img src="/assets/1525620483637.png" alt="1525620483637"></p>
<p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p>
<ul>
<li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li>
<li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li>
<li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li>
</ul>
<p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p>
<h3 id="2）LoadBalancerClient"><a href="#2）LoadBalancerClient" class="headerlink" title="2）LoadBalancerClient"></a>2）LoadBalancerClient</h3><p>继续跟入execute方法：</p>
<p><img src="/assets/1525620787090.png" alt="1525620787090"></p>
<p>代码是这样的：</p>
<ul>
<li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li>
<li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li>
</ul>
<p>放行后，再次访问并跟踪，发现获取的是8081：</p>
<p> <img src="/assets/1525620835911.png" alt="1525620835911"></p>
<p>果然实现了负载均衡。</p>
<h3 id="3）负载均衡策略IRule"><a href="#3）负载均衡策略IRule" class="headerlink" title="3）负载均衡策略IRule"></a>3）负载均衡策略IRule</h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p>
<p> <img src="/assets/1525620835911.png" alt="1525620835911"></p>
<p>我们继续跟入：</p>
<p><img src="/assets/1544361421671.png" alt="1544361421671"></p>
<p>继续跟踪源码chooseServer方法，发现这么一段代码：</p>
<p> <img src="/assets/1525622652849.png" alt="1525622652849"></p>
<p>我们看看这个rule是谁：</p>
<p> <img src="/assets/1525622699666.png" alt="1525622699666"></p>
<p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p>
<p> <img src="/assets/1525622754316.png" alt="1525622754316"></p>
<p>这不就是轮询的意思嘛。</p>
<p>到这里，整个负载均衡的流程我们就清楚了。</p>
<h3 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p>
<p><img src="/assets/image-20210713224724673.png" alt="image-20210713224724673"></p>
<p>基本流程如下：</p>
<ul>
<li>拦截我们的RestTemplate请求<a href="http://userservice/user/1">http://userservice/user/1</a></li>
<li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li>
<li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li>
<li>eureka返回列表，localhost:8081、localhost:8082</li>
<li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li>
<li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82">http://localhost:8081/user/1，发起真实请求</a></li>
</ul>
<h2 id="4-3-负载均衡策略"><a href="#4-3-负载均衡策略" class="headerlink" title="4.3.负载均衡策略"></a>4.3.负载均衡策略</h2><h3 id="4-3-1-负载均衡策略"><a href="#4-3-1-负载均衡策略" class="headerlink" title="4.3.1.负载均衡策略"></a>4.3.1.负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p>
<p><img src="/assets/image-20210713225653000.png" alt="image-20210713225653000"></p>
<p>不同规则的含义如下：</p>
<table>
<thead>
<tr>
<th><strong>内置负载均衡规则类</strong></th>
<th><strong>规则描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>RoundRobinRule</td>
<td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>
</tr>
<tr>
<td><strong>ZoneAvoidanceRule</strong></td>
<td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个可用的服务器。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>重试机制的选择逻辑</td>
</tr>
</tbody></table>
<p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p>
<h3 id="4-3-2-自定义负载均衡策略"><a href="#4-3-2-自定义负载均衡策略" class="headerlink" title="4.3.2.自定义负载均衡策略"></a>4.3.2.自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p>
<ol>
<li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p>
</blockquote>
<h2 id="4-4-饥饿加载"><a href="#4-4-饥饿加载" class="headerlink" title="4.4.饥饿加载"></a>4.4.饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p>
<p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure>



<h1 id="5-Nacos注册中心"><a href="#5-Nacos注册中心" class="headerlink" title="5.Nacos注册中心"></a>5.Nacos注册中心</h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p>
<h2 id="5-1-认识和安装Nacos"><a href="#5-1-认识和安装Nacos" class="headerlink" title="5.1.认识和安装Nacos"></a>5.1.认识和安装Nacos</h2><p><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p>
<p><img src="/assets/image-20210713230444308.png" alt="image-20210713230444308"></p>
<p>安装方式可以参考课前资料《Nacos安装指南.md》</p>
<ul>
<li><p>windows命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-2-服务注册到nacos"><a href="#5-2-服务注册到nacos" class="headerlink" title="5.2.服务注册到nacos"></a>5.2.服务注册到nacos</h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p>
<p>主要差异在于：</p>
<ul>
<li>依赖不同</li>
<li>服务地址不同</li>
</ul>
<h3 id="1）引入依赖-2"><a href="#1）引入依赖-2" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p>
</blockquote>
<h3 id="2）配置nacos地址"><a href="#2）配置nacos地址" class="headerlink" title="2）配置nacos地址"></a>2）配置nacos地址</h3><p>在user-service和order-service的application.yml中添加nacos地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意</strong>：不要忘了注释掉eureka的地址</p>
</blockquote>
<h3 id="3）重启"><a href="#3）重启" class="headerlink" title="3）重启"></a>3）重启</h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p>
<p><img src="/assets/image-20210713231439607.png" alt="image-20210713231439607"></p>
<h2 id="5-3-服务分级存储模型"><a href="#5-3-服务分级存储模型" class="headerlink" title="5.3.服务分级存储模型"></a>5.3.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p>
<ul>
<li>127.0.0.1:8081</li>
<li>127.0.0.1:8082</li>
<li>127.0.0.1:8083</li>
</ul>
<p>假如这些实例分布于全国各地的不同机房，例如：</p>
<ul>
<li>127.0.0.1:8081，在上海机房</li>
<li>127.0.0.1:8082，在上海机房</li>
<li>127.0.0.1:8083，在杭州机房</li>
</ul>
<p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p>
<p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p>
<p><img src="/assets/image-20210713232522531.png" alt="image-20210713232522531"></p>
<p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p>
<p><img src="/assets/image-20210713232658928.png" alt="image-20210713232658928"></p>
<p>杭州机房内的order-service应该优先访问同机房的user-service。</p>
<h3 id="5-3-1-给user-service配置集群"><a href="#5-3-1-给user-service配置集群" class="headerlink" title="5.3.1.给user-service配置集群"></a>5.3.1.给user-service配置集群</h3><p>修改user-service的application.yml文件，添加集群配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure>

<p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p>
<p><img src="/assets/image-20210713232916215.png" alt="image-20210713232916215"></p>
<p>我们再次复制一个user-service启动配置，添加属性：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH</span><br></pre></td></tr></table></figure>

<p>配置如图所示：</p>
<p><img src="/assets/image-20210713233528982.png" alt="image-20210713233528982"></p>
<p>启动UserApplication3后再次查看nacos控制台：</p>
<p><img src="/assets/image-20210713233727923.png" alt="image-20210713233727923"></p>
<h3 id="5-3-2-同集群优先的负载均衡"><a href="#5-3-2-同集群优先的负载均衡" class="headerlink" title="5.3.2.同集群优先的负载均衡"></a>5.3.2.同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p>
<p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p>
<p>1）给order-service配置集群信息</p>
<p>修改order-service的application.yml文件，添加集群配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      discovery:</span><br><span class="line">        cluster-name: HZ <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure>



<p>2）修改负载均衡规则</p>
<p>修改order-service的application.yml文件，修改负载均衡规则：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure>



<h2 id="5-4-权重配置"><a href="#5-4-权重配置" class="headerlink" title="5.4.权重配置"></a>5.4.权重配置</h2><p>实际部署中会出现这样的场景：</p>
<p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p>
<p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p>
<p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p>
<p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p>
<p><img src="/assets/image-20210713235133225.png" alt="image-20210713235133225"></p>
<p>在弹出的编辑窗口，修改权重：</p>
<p><img src="/assets/image-20210713235235219.png" alt="image-20210713235235219"></p>
<blockquote>
<p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p>
</blockquote>
<h2 id="5-5-环境隔离"><a href="#5-5-环境隔离" class="headerlink" title="5.5.环境隔离"></a>5.5.环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p>
<ul>
<li>nacos中可以有多个namespace</li>
<li>namespace下可以有group、service等</li>
<li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li>
</ul>
<p><img src="/assets/image-20210714000101516.png" alt="image-20210714000101516"></p>
<h3 id="5-5-1-创建namespace"><a href="#5-5-1-创建namespace" class="headerlink" title="5.5.1.创建namespace"></a>5.5.1.创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p>
<p><img src="/assets/image-20210714000414781.png" alt="image-20210714000414781"></p>
<p>我们可以点击页面新增按钮，添加一个namespace：</p>
<p><img src="/assets/image-20210714000440143.png" alt="image-20210714000440143"></p>
<p>然后，填写表单：</p>
<p><img src="/assets/image-20210714000505928.png" alt="image-20210714000505928"></p>
<p>就能在页面看到一个新的namespace：</p>
<p><img src="/assets/image-20210714000522913.png" alt="image-20210714000522913"></p>
<h3 id="5-5-2-给微服务配置namespace"><a href="#5-5-2-给微服务配置namespace" class="headerlink" title="5.5.2.给微服务配置namespace"></a>5.5.2.给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p>
<p>例如，修改order-service的application.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure>



<p>重启order-service后，访问控制台，可以看到下面的结果：</p>
<p><img src="/assets/image-20210714000830703.png" alt="image-20210714000830703"></p>
<p><img src="/assets/image-20210714000837140.png" alt="image-20210714000837140"></p>
<p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p>
<p><img src="/assets/image-20210714000941256.png" alt="image-20210714000941256"></p>
<h2 id="5-6-Nacos与Eureka的区别"><a href="#5-6-Nacos与Eureka的区别" class="headerlink" title="5.6.Nacos与Eureka的区别"></a>5.6.Nacos与Eureka的区别</h2><p>Nacos的服务实例分为两种l类型：</p>
<ul>
<li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p>
</li>
<li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p>
</li>
</ul>
<p>配置一个服务实例为永久实例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure>





<p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p>
<p><img src="/assets/image-20210714001728017.png" alt="image-20210714001728017"></p>
<ul>
<li><p>Nacos与eureka的共同点</p>
<ul>
<li>都支持服务注册和服务拉取</li>
<li>都支持服务提供者心跳方式做健康检测</li>
</ul>
</li>
<li><p>Nacos与Eureka的区别</p>
<ul>
<li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li>
<li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li>
<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>
<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud day2</title>
    <url>/2024/01/08/SpringCloud%E5%AE%9E%E7%94%A8%E7%AF%8702/</url>
    <content><![CDATA[<h1 id="SpringCloud-day2"><a href="#SpringCloud-day2" class="headerlink" title="SpringCloud day2"></a>SpringCloud day2</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-Nacos配置管理"><a href="#1-Nacos配置管理" class="headerlink" title="1.Nacos配置管理"></a>1.Nacos配置管理</h1><p>Nacos除了可以做注册中心，同样可以做配置管理来使用。</p>
<h2 id="1-1-统一配置管理"><a href="#1-1-统一配置管理" class="headerlink" title="1.1.统一配置管理"></a>1.1.统一配置管理</h2><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</p>
<p><img src="/assets/image-20210714164426792.png" alt="image-20210714164426792"></p>
<p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p>
<h3 id="1-1-1-在nacos中添加配置文件"><a href="#1-1-1-在nacos中添加配置文件" class="headerlink" title="1.1.1.在nacos中添加配置文件"></a>1.1.1.在nacos中添加配置文件</h3><p>如何在nacos中管理配置呢？</p>
<p><img src="/assets/image-20210714164742924.png" alt="image-20210714164742924"></p>
<p>然后在弹出的表单中，填写配置信息：</p>
<p><img src="/assets/image-20210714164856664.png" alt="image-20210714164856664"></p>
<blockquote>
<p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p>
</blockquote>
<h3 id="1-1-2-从微服务拉取配置"><a href="#1-1-2-从微服务拉取配置" class="headerlink" title="1.1.2.从微服务拉取配置"></a>1.1.2.从微服务拉取配置</h3><p>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。</p>
<p>但如果尚未读取application.yml，又如何得知nacos地址呢？</p>
<p>因此spring引入了一种新的配置文件：bootstrap.yaml文件，会在application.yml之前被读取，流程如下：</p>
<p><img src="/assets/L0iFYNF.png" alt="img"></p>
<p>1）引入nacos-config依赖</p>
<p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）添加bootstrap.yaml</p>
<p>然后，在user-service中添加一个bootstrap.yaml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure>

<p>这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据</p>
<p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id，来读取配置。</p>
<p>本例中，就是去读取<code>userservice-dev.yaml</code>：</p>
<p><img src="/assets/image-20210714170845901.png" alt="image-20210714170845901"></p>
<p>3）读取nacos配置</p>
<p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p>
<p><img src="/assets/image-20210714170337448.png" alt="image-20210714170337448"></p>
<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在页面访问，可以看到效果：</p>
<p><img src="/assets/image-20210714170449612.png" alt="image-20210714170449612"></p>
<h2 id="1-2-配置热更新"><a href="#1-2-配置热更新" class="headerlink" title="1.2.配置热更新"></a>1.2.配置热更新</h2><p>我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p>
<p>要实现配置热更新，可以使用两种方式：</p>
<h3 id="1-2-1-方式一"><a href="#1-2-1-方式一" class="headerlink" title="1.2.1.方式一"></a>1.2.1.方式一</h3><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p>
<p><img src="/assets/image-20210714171036335.png" alt="image-20210714171036335"></p>
<h3 id="1-2-2-方式二"><a href="#1-2-2-方式二" class="headerlink" title="1.2.2.方式二"></a>1.2.2.方式二</h3><p>使用@ConfigurationProperties注解代替@Value注解。</p>
<p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在UserController中使用这个类代替@Value：</p>
<p><img src="/assets/image-20210714171316124.png" alt="image-20210714171316124"></p>
<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.config.PatternProperties;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1-3-配置共享"><a href="#1-3-配置共享" class="headerlink" title="1.3.配置共享"></a>1.3.配置共享</h2><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p>
<ul>
<li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p>
</li>
<li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p>
</li>
</ul>
<p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p>
<p>下面我们通过案例来测试配置共享</p>
<h3 id="1）添加一个环境共享配置"><a href="#1）添加一个环境共享配置" class="headerlink" title="1）添加一个环境共享配置"></a>1）添加一个环境共享配置</h3><p>我们在nacos中添加一个userservice.yaml文件：</p>
<p><img src="/assets/image-20210714173233650.png" alt="image-20210714173233650"></p>
<h3 id="2）在user-service中读取共享配置"><a href="#2）在user-service中读取共享配置" class="headerlink" title="2）在user-service中读取共享配置"></a>2）在user-service中读取共享配置</h3><p>在user-service服务中，修改PatternProperties类，读取新添加的属性：</p>
<p><img src="/assets/image-20210714173324231.png" alt="image-20210714173324231"></p>
<p>在user-service服务中，修改UserController，添加一个方法：</p>
<p><img src="/assets/image-20210714173721309.png" alt="image-20210714173721309"></p>
<h3 id="3）运行两个UserApplication，使用不同的profile"><a href="#3）运行两个UserApplication，使用不同的profile" class="headerlink" title="3）运行两个UserApplication，使用不同的profile"></a>3）运行两个UserApplication，使用不同的profile</h3><p>修改UserApplication2这个启动项，改变其profile值：</p>
<p><img src="/assets/image-20210714173538538.png" alt="image-20210714173538538"></p>
<p><img src="/assets/image-20210714173519963.png" alt="image-20210714173519963"></p>
<p>这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。</p>
<p>启动UserApplication和UserApplication2</p>
<p>访问<a href="http://localhost:8081/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:8081/user/prop，结果：</a></p>
<p><img src="/assets/image-20210714174313344.png" alt="image-20210714174313344"></p>
<p>访问<a href="http://localhost:8082/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:8082/user/prop，结果：</a></p>
<p><img src="/assets/image-20210714174424818.png" alt="image-20210714174424818"></p>
<p>可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</p>
<h3 id="4）配置共享的优先级"><a href="#4）配置共享的优先级" class="headerlink" title="4）配置共享的优先级"></a>4）配置共享的优先级</h3><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p>
<p><img src="/assets/image-20210714174623557.png" alt="image-20210714174623557"></p>
<h2 id="1-4-搭建Nacos集群"><a href="#1-4-搭建Nacos集群" class="headerlink" title="1.4.搭建Nacos集群"></a>1.4.搭建Nacos集群</h2><p>Nacos生产环境下一定要部署为集群状态，部署方式参考课前资料中的文档：</p>
<p><img src="/assets/image-20210714174728042.png" alt="image-20210714174728042"></p>
<h1 id="2-Feign远程调用"><a href="#2-Feign远程调用" class="headerlink" title="2.Feign远程调用"></a>2.Feign远程调用</h1><p>先来看我们以前利用RestTemplate发起远程调用的代码：</p>
<p><img src="/assets/image-20210714174814204.png" alt="image-20210714174814204"></p>
<p>存在下面的问题：</p>
<p>•代码可读性差，编程体验不统一</p>
<p>•参数复杂URL难以维护</p>
<p>Feign是一个声明式的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p>
<p>其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</p>
<p><img src="/assets/image-20210714174918088.png" alt="image-20210714174918088"></p>
<h2 id="2-1-Feign替代RestTemplate"><a href="#2-1-Feign替代RestTemplate" class="headerlink" title="2.1.Feign替代RestTemplate"></a>2.1.Feign替代RestTemplate</h2><p>Fegin的使用步骤如下：</p>
<h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>我们在order-service服务的pom文件中引入feign的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2）添加注解"><a href="#2）添加注解" class="headerlink" title="2）添加注解"></a>2）添加注解</h3><p>在order-service的启动类添加注解开启Feign的功能：</p>
<p><img src="/assets/image-20210714175102524.png" alt="image-20210714175102524"></p>
<h3 id="3）编写Feign的客户端"><a href="#3）编写Feign的客户端" class="headerlink" title="3）编写Feign的客户端"></a>3）编写Feign的客户端</h3><p>在order-service中新建一个接口，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p>
<ul>
<li>服务名称：userservice</li>
<li>请求方式：GET</li>
<li>请求路径：&#x2F;user&#x2F;{id}</li>
<li>请求参数：Long id</li>
<li>返回值类型：User</li>
</ul>
<p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p>
<h3 id="4）测试"><a href="#4）测试" class="headerlink" title="4）测试"></a>4）测试</h3><p>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：</p>
<p><img src="/assets/image-20210714175415087.png" alt="image-20210714175415087"></p>
<p>是不是看起来优雅多了。</p>
<h3 id="5）总结"><a href="#5）总结" class="headerlink" title="5）总结"></a>5）总结</h3><p>使用Feign的步骤：</p>
<p>① 引入依赖</p>
<p>② 添加@EnableFeignClients注解</p>
<p>③ 编写FeignClient接口</p>
<p>④ 使用FeignClient中定义的方法代替RestTemplate</p>
<h2 id="2-2-自定义配置"><a href="#2-2-自定义配置" class="headerlink" title="2.2.自定义配置"></a>2.2.自定义配置</h2><p>Feign可以支持很多的自定义配置，如下表所示：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>feign.Logger.Level</strong></td>
<td>修改日志级别</td>
<td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td>
</tr>
<tr>
<td>feign.codec.Decoder</td>
<td>响应结果的解析器</td>
<td>http远程调用的结果做解析，例如解析json字符串为java对象</td>
</tr>
<tr>
<td>feign.codec.Encoder</td>
<td>请求参数编码</td>
<td>将请求参数编码，便于通过http请求发送</td>
</tr>
<tr>
<td>feign. Contract</td>
<td>支持的注解格式</td>
<td>默认是SpringMVC的注解</td>
</tr>
<tr>
<td>feign. Retryer</td>
<td>失败重试机制</td>
<td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td>
</tr>
</tbody></table>
<p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p>
<p>下面以日志为例来演示如何自定义配置。</p>
<h3 id="2-2-1-配置文件方式"><a href="#2-2-1-配置文件方式" class="headerlink" title="2.2.1.配置文件方式"></a>2.2.1.配置文件方式</h3><p>基于配置文件修改feign的日志级别可以针对单个服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure>

<p>也可以针对所有服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure>



<p>而日志的级别分为四种：</p>
<ul>
<li>NONE：不记录任何日志信息，这是默认值。</li>
<li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li>
<li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li>
<li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li>
</ul>
<h3 id="2-2-2-Java代码方式"><a href="#2-2-2-Java代码方式" class="headerlink" title="2.2.2.Java代码方式"></a>2.2.2.Java代码方式</h3><p>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure>



<p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure>







<h2 id="2-3-Feign使用优化"><a href="#2-3-Feign使用优化" class="headerlink" title="2.3.Feign使用优化"></a>2.3.Feign使用优化</h2><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p>
<p>•URLConnection：默认实现，不支持连接池</p>
<p>•Apache HttpClient ：支持连接池</p>
<p>•OKHttp：支持连接池</p>
<p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p>
<p>这里我们用Apache的HttpClient来演示。</p>
<p>1）引入依赖</p>
<p>在order-service的pom文件中引入Apache的HttpClient依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2）配置连接池</p>
<p>在order-service的application.yml中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure>



<p>接下来，在FeignClientFactoryBean中的loadBalance方法中打断点：</p>
<p><img src="/assets/image-20210714185925910.png" alt="image-20210714185925910"></p>
<p>Debug方式启动order-service服务，可以看到这里的client，底层就是Apache HttpClient：</p>
<p><img src="/assets/image-20210714190041542.png" alt="image-20210714190041542"></p>
<p>总结，Feign的优化：</p>
<p>1.日志级别尽量用basic</p>
<p>2.使用HttpClient或OKHttp代替URLConnection</p>
<p>①  引入feign-httpClient依赖</p>
<p>②  配置文件开启httpClient功能，设置连接池参数</p>
<h2 id="2-4-最佳实践"><a href="#2-4-最佳实践" class="headerlink" title="2.4.最佳实践"></a>2.4.最佳实践</h2><p>所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。</p>
<p>自习观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：</p>
<p>feign客户端：</p>
<p><img src="/assets/image-20210714190542730.png" alt="image-20210714190542730"></p>
<p>UserController：</p>
<p><img src="/assets/image-20210714190528450.png" alt="image-20210714190528450"></p>
<p>有没有一种办法简化这种重复的代码编写呢？</p>
<h3 id="2-4-1-继承方式"><a href="#2-4-1-继承方式" class="headerlink" title="2.4.1.继承方式"></a>2.4.1.继承方式</h3><p>一样的代码可以通过继承来共享：</p>
<p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p>
<p>2）Feign客户端和Controller都集成改接口</p>
<p><img src="/assets/image-20210714190640857.png" alt="image-20210714190640857"></p>
<p>优点：</p>
<ul>
<li>简单</li>
<li>实现了代码共享</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>服务提供方、服务消费方紧耦合</p>
</li>
<li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p>
</li>
</ul>
<h3 id="2-4-2-抽取方式"><a href="#2-4-2-抽取方式" class="headerlink" title="2.4.2.抽取方式"></a>2.4.2.抽取方式</h3><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p>
<p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p>
<p><img src="/assets/image-20210714214041796.png" alt="image-20210714214041796"></p>
<h3 id="2-4-3-实现基于抽取的最佳实践"><a href="#2-4-3-实现基于抽取的最佳实践" class="headerlink" title="2.4.3.实现基于抽取的最佳实践"></a>2.4.3.实现基于抽取的最佳实践</h3><h4 id="1）抽取"><a href="#1）抽取" class="headerlink" title="1）抽取"></a>1）抽取</h4><p>首先创建一个module，命名为feign-api：</p>
<p><img src="/assets/image-20210714204557771.png" alt="image-20210714204557771"></p>
<p>项目结构：</p>
<p><img src="/assets/image-20210714204656214.png" alt="image-20210714204656214"></p>
<p>在feign-api中然后引入feign的starter依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p>
<p><img src="/assets/image-20210714205221970.png" alt="image-20210714205221970"></p>
<h4 id="2）在order-service中使用feign-api"><a href="#2）在order-service中使用feign-api" class="headerlink" title="2）在order-service中使用feign-api"></a>2）在order-service中使用feign-api</h4><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p>
<p>在order-service的pom文件中中引入feign-api的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p>
<h4 id="3）重启测试"><a href="#3）重启测试" class="headerlink" title="3）重启测试"></a>3）重启测试</h4><p>重启后，发现服务报错了：</p>
<p><img src="/assets/image-20210714205623048.png" alt="image-20210714205623048"></p>
<p>这是因为UserClient现在在cn.itcast.feign.clients包下，</p>
<p>而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。</p>
<h4 id="4）解决扫描包问题"><a href="#4）解决扫描包问题" class="headerlink" title="4）解决扫描包问题"></a>4）解决扫描包问题</h4><p>方式一：</p>
<p>指定Feign应该扫描的包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure>



<p>方式二：</p>
<p>指定需要加载的Client接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure>









<h1 id="3-Gateway服务网关"><a href="#3-Gateway服务网关" class="headerlink" title="3.Gateway服务网关"></a>3.Gateway服务网关</h1><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>
<h2 id="3-1-为什么需要网关"><a href="#3-1-为什么需要网关" class="headerlink" title="3.1.为什么需要网关"></a>3.1.为什么需要网关</h2><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p>
<p>网关的<strong>核心功能特性</strong>：</p>
<ul>
<li>请求路由</li>
<li>权限控制</li>
<li>限流</li>
</ul>
<p>架构图：</p>
<p><img src="/assets/image-20210714210131152.png" alt="image-20210714210131152"></p>
<p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p>
<p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p>
<p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p>
<p>在SpringCloud中网关的实现包括两种：</p>
<ul>
<li>gateway</li>
<li>zuul</li>
</ul>
<p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p>
<h2 id="3-2-gateway快速入门"><a href="#3-2-gateway快速入门" class="headerlink" title="3.2.gateway快速入门"></a>3.2.gateway快速入门</h2><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p>
<ol>
<li>创建SpringBoot工程gateway，引入网关依赖</li>
<li>编写启动类</li>
<li>编写基础配置和路由规则</li>
<li>启动网关服务进行测试</li>
</ol>
<h3 id="1）创建gateway服务，引入依赖"><a href="#1）创建gateway服务，引入依赖" class="headerlink" title="1）创建gateway服务，引入依赖"></a>1）创建gateway服务，引入依赖</h3><p>创建服务：</p>
<p><img src="/assets/image-20210714210919458.png" alt="image-20210714210919458"></p>
<p>引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2）编写启动类"><a href="#2）编写启动类" class="headerlink" title="2）编写启动类"></a>2）编写启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3）编写基础配置和路由规则"><a href="#3）编写基础配置和路由规则" class="headerlink" title="3）编写基础配置和路由规则"></a>3）编写基础配置和路由规则</h3><p>创建application.yml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure>



<p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p>
<p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p>
<h3 id="4）重启测试"><a href="#4）重启测试" class="headerlink" title="4）重启测试"></a>4）重启测试</h3><p>重启网关，访问<a href="http://localhost:10010/user/1%E6%97%B6%EF%BC%8C%E7%AC%A6%E5%90%88%60/user/**%60%E8%A7%84%E5%88%99%EF%BC%8C%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B0uri%EF%BC%9Ahttp://userservice/user/1%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BA%86%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:10010/user/1时，符合`/user/**`规则，请求转发到uri：http://userservice/user/1，得到了结果：</a></p>
<p><img src="/assets/image-20210714211908341.png" alt="image-20210714211908341"></p>
<h3 id="5）网关路由的流程图"><a href="#5）网关路由的流程图" class="headerlink" title="5）网关路由的流程图"></a>5）网关路由的流程图</h3><p>整个访问的流程如下：</p>
<p><img src="/assets/image-20210714211742956.png" alt="image-20210714211742956"></p>
<p>总结：</p>
<p>网关搭建步骤：</p>
<ol>
<li><p>创建项目，引入nacos服务发现和gateway依赖</p>
</li>
<li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p>
</li>
</ol>
<p>路由配置包括：</p>
<ol>
<li><p>路由id：路由的唯一标示</p>
</li>
<li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p>
</li>
<li><p>路由断言（predicates）：判断路由的规则，</p>
</li>
<li><p>路由过滤器（filters）：对请求或响应做处理</p>
</li>
</ol>
<p>接下来，就重点来学习路由断言和路由过滤器的详细知识</p>
<h2 id="3-3-断言工厂"><a href="#3-3-断言工厂" class="headerlink" title="3.3.断言工厂"></a>3.3.断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p>
<p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由</p>
<p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p>
<p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>After</td>
<td>是某个时间点后的请求</td>
<td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td>
</tr>
<tr>
<td>Before</td>
<td>是某个时间点之前的请求</td>
<td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td>
</tr>
<tr>
<td>Between</td>
<td>是某两个时间点之前的请求</td>
<td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td>
</tr>
<tr>
<td>Cookie</td>
<td>请求必须包含某些cookie</td>
<td>- Cookie&#x3D;chocolate, ch.p</td>
</tr>
<tr>
<td>Header</td>
<td>请求必须包含某些header</td>
<td>- Header&#x3D;X-Request-Id, \d+</td>
</tr>
<tr>
<td>Host</td>
<td>请求必须是访问某个host（域名）</td>
<td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td>
</tr>
<tr>
<td>Method</td>
<td>请求方式必须是指定方式</td>
<td>- Method&#x3D;GET,POST</td>
</tr>
<tr>
<td>Path</td>
<td>请求路径必须符合指定规则</td>
<td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td>
</tr>
<tr>
<td>Query</td>
<td>请求参数必须包含指定参数</td>
<td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td>
</tr>
<tr>
<td>RemoteAddr</td>
<td>请求者的ip必须是指定范围</td>
<td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td>
</tr>
<tr>
<td>Weight</td>
<td>权重处理</td>
<td></td>
</tr>
</tbody></table>
<p>我们只需要掌握Path这种路由工程就可以了。</p>
<h2 id="3-4-过滤器工厂"><a href="#3-4-过滤器工厂" class="headerlink" title="3.4.过滤器工厂"></a>3.4.过滤器工厂</h2><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p>
<p><img src="/assets/image-20210714212312871.png" alt="image-20210714212312871"></p>
<h3 id="3-4-1-路由过滤器的种类"><a href="#3-4-1-路由过滤器的种类" class="headerlink" title="3.4.1.路由过滤器的种类"></a>3.4.1.路由过滤器的种类</h3><p>Spring提供了31种不同的路由过滤器工厂。例如：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>AddRequestHeader</td>
<td>给当前请求添加一个请求头</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td>移除请求中的一个请求头</td>
</tr>
<tr>
<td>AddResponseHeader</td>
<td>给响应结果中添加一个响应头</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td>从响应结果中移除有一个响应头</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td>限制请求的流量</td>
</tr>
</tbody></table>
<h3 id="3-4-2-请求头过滤器"><a href="#3-4-2-请求头过滤器" class="headerlink" title="3.4.2.请求头过滤器"></a>3.4.2.请求头过滤器</h3><p>下面我们以AddRequestHeader 为例来讲解。</p>
<blockquote>
<p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth&#x3D;itcast is freaking awesome!</p>
</blockquote>
<p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> </span><br><span class="line">        <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure>

<p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p>
<h3 id="3-4-3-默认过滤器"><a href="#3-4-3-默认过滤器" class="headerlink" title="3.4.3.默认过滤器"></a>3.4.3.默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> </span><br></pre></td></tr></table></figure>



<h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>过滤器的作用是什么？</p>
<p>① 对路由的请求或响应做加工处理，比如添加请求头</p>
<p>② 配置在路由下的过滤器只对当前路由的请求生效</p>
<p>defaultFilters的作用是什么？</p>
<p>① 对所有路由都生效的过滤器</p>
<h2 id="3-5-全局过滤器"><a href="#3-5-全局过滤器" class="headerlink" title="3.5.全局过滤器"></a>3.5.全局过滤器</h2><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p>
<h3 id="3-5-1-全局过滤器作用"><a href="#3-5-1-全局过滤器作用" class="headerlink" title="3.5.1.全局过滤器作用"></a>3.5.1.全局过滤器作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p>
<p>定义方式是实现GlobalFilter接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在filter中编写自定义逻辑，可以实现下列功能：</p>
<ul>
<li>登录状态判断</li>
<li>权限校验</li>
<li>请求限流等</li>
</ul>
<h3 id="3-5-2-自定义全局过滤器"><a href="#3-5-2-自定义全局过滤器" class="headerlink" title="3.5.2.自定义全局过滤器"></a>3.5.2.自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p>
<ul>
<li><p>参数中是否有authorization，</p>
</li>
<li><p>authorization参数值是否为admin</p>
</li>
</ul>
<p>如果同时满足则放行，否则拦截</p>
<p>实现：</p>
<p>在gateway中定义一个过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.拦截</span></span><br><span class="line">        <span class="comment">// 4.1.禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="comment">// 4.2.结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3-5-3-过滤器执行顺序"><a href="#3-5-3-过滤器执行顺序" class="headerlink" title="3.5.3.过滤器执行顺序"></a>3.5.3.过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p>
<p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p>
<p><img src="/assets/image-20210714214228409.png" alt="image-20210714214228409"></p>
<p>排序的规则是什么呢？</p>
<ul>
<li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li>
<li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li>
<li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li>
<li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li>
</ul>
<p>详细内容，可以查看源码：</p>
<p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p>
<p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p>
<h2 id="3-6-跨域问题"><a href="#3-6-跨域问题" class="headerlink" title="3.6.跨域问题"></a>3.6.跨域问题</h2><h3 id="3-6-1-什么是跨域问题"><a href="#3-6-1-什么是跨域问题" class="headerlink" title="3.6.1.什么是跨域问题"></a>3.6.1.什么是跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p>
<ul>
<li><p>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</p>
</li>
<li><p>域名相同，端口不同：localhost:8080和localhost8081</p>
</li>
</ul>
<p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p>
<p>解决方案：CORS，这个以前应该学习过，这里不再赘述了。不知道的小伙伴可以查看<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<h3 id="3-6-2-模拟跨域问题"><a href="#3-6-2-模拟跨域问题" class="headerlink" title="3.6.2.模拟跨域问题"></a>3.6.2.模拟跨域问题</h3><p>找到课前资料的页面文件：</p>
<p><img src="/assets/image-20210714215713563.png" alt="image-20210714215713563"></p>
<p>放入tomcat或者nginx这样的web服务器中，启动并访问。</p>
<p>可以在浏览器控制台看到下面的错误：</p>
<p><img src="/assets/image-20210714215832675.png" alt="image-20210714215832675"></p>
<p>从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p>
<h3 id="3-6-3-解决跨域问题"><a href="#3-6-3-解决跨域问题" class="headerlink" title="3.6.3.解决跨域问题"></a>3.6.3.解决跨域问题</h3><p>在gateway服务的application.yml文件中，添加下面的配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos集群搭建</title>
    <url>/2024/01/08/nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h1><h1 id="1-集群结构图"><a href="#1-集群结构图" class="headerlink" title="1.集群结构图"></a>1.集群结构图</h1><p>官方给出的Nacos集群图：</p>
<p><img src="/assets/image-20210409210621117.png" alt="image-20210409210621117"></p>
<p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里负载均衡器可以使用nginx。</p>
<p>我们计划的集群结构：</p>
<p><img src="/assets/image-20210409211355037.png" alt="image-20210409211355037"></p>
<p>三个nacos节点的地址：</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>ip</th>
<th>port</th>
</tr>
</thead>
<tbody><tr>
<td>nacos1</td>
<td>192.168.150.1</td>
<td>8845</td>
</tr>
<tr>
<td>nacos2</td>
<td>192.168.150.1</td>
<td>8846</td>
</tr>
<tr>
<td>nacos3</td>
<td>192.168.150.1</td>
<td>8847</td>
</tr>
</tbody></table>
<h1 id="2-搭建集群"><a href="#2-搭建集群" class="headerlink" title="2.搭建集群"></a>2.搭建集群</h1><p>搭建集群的基本步骤：</p>
<ul>
<li>搭建数据库，初始化数据库表结构</li>
<li>下载nacos安装包</li>
<li>配置nacos</li>
<li>启动nacos集群</li>
<li>nginx反向代理</li>
</ul>
<h2 id="2-1-初始化数据库"><a href="#2-1-初始化数据库" class="headerlink" title="2.1.初始化数据库"></a>2.1.初始化数据库</h2><p>Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。</p>
<p>官方推荐的最佳实践是使用带有主从的高可用数据库集群，主从模式的高可用数据库可以参考<strong>传智教育</strong>的后续高手课程。</p>
<p>这里我们以单点的数据库为例来讲解。</p>
<p>首先新建一个数据库，命名为nacos，而后导入下面的SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">	`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">	`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="2-2-下载nacos"><a href="#2-2-下载nacos" class="headerlink" title="2.2.下载nacos"></a>2.2.下载nacos</h2><p>nacos在GitHub上有下载地址：<a href="https://github.com/alibaba/nacos/tags%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82">https://github.com/alibaba/nacos/tags，可以选择任意版本下载。</a></p>
<p>本例中才用1.4.1版本：</p>
<p><img src="/assets/image-20210409212119411.png" alt="image-20210409212119411"></p>
<h2 id="2-3-配置Nacos"><a href="#2-3-配置Nacos" class="headerlink" title="2.3.配置Nacos"></a>2.3.配置Nacos</h2><p>将这个包解压到任意非中文目录下，如图：</p>
<p><img src="/assets/image-20210402161843337.png" alt="image-20210402161843337"></p>
<p>目录说明：</p>
<ul>
<li>bin：启动脚本</li>
<li>conf：配置文件</li>
</ul>
<p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf：</p>
<p><img src="/assets/image-20210409212459292.png" alt="image-20210409212459292"></p>
<p>然后添加内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:8845</span><br><span class="line">127.0.0.1.8846</span><br><span class="line">127.0.0.1.8847</span><br></pre></td></tr></table></figure>



<p>然后修改application.properties文件，添加数据库配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>



<h2 id="2-4-启动"><a href="#2-4-启动" class="headerlink" title="2.4.启动"></a>2.4.启动</h2><p>将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p>
<p><img src="/assets/image-20210409213335538.png" alt="image-20210409213335538"> </p>
<p>然后分别修改三个文件夹中的application.properties，</p>
<p>nacos1:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure>

<p>nacos2:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8846</span></span><br></pre></td></tr></table></figure>

<p>nacos3:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8847</span></span><br></pre></td></tr></table></figure>



<p>然后分别启动三个nacos节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup.cmd</span><br></pre></td></tr></table></figure>



<h2 id="2-5-nginx反向代理"><a href="#2-5-nginx反向代理" class="headerlink" title="2.5.nginx反向代理"></a>2.5.nginx反向代理</h2><p>找到课前资料提供的nginx安装包： </p>
<p><img src="/assets/image-20210410103253355.png" alt="image-20210410103253355"> </p>
<p>解压到任意非中文目录下：</p>
<p><img src="/assets/image-20210410103322874.png" alt="image-20210410103322874"> </p>
<p>修改conf&#x2F;nginx.conf文件，配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> nacos-cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8845</span>;</span><br><span class="line">	<span class="attribute">server</span> <span class="number">127.0.0.1:8846</span>;</span><br><span class="line">	<span class="attribute">server</span> <span class="number">127.0.0.1:8847</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nacos &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>而后在浏览器访问：<a href="http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost/nacos即可。</a></p>
<p>代码中application.yml文件配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment"># Nacos地址</span></span><br></pre></td></tr></table></figure>







<h2 id="2-6-优化"><a href="#2-6-优化" class="headerlink" title="2.6.优化"></a>2.6.优化</h2><ul>
<li><p>实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.</p>
</li>
<li><p>Nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Nacos</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch day3</title>
    <url>/2024/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E03/</url>
    <content><![CDATA[<h1 id="分布式搜索引擎03"><a href="#分布式搜索引擎03" class="headerlink" title="分布式搜索引擎03"></a>分布式搜索引擎03</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-数据聚合"><a href="#1-数据聚合" class="headerlink" title="1.数据聚合"></a>1.数据聚合</h1><p>**<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">聚合（</a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">aggregations</a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">）</a>**可以让我们极其方便的实现对数据的统计、分析、运算。例如：</p>
<ul>
<li>什么品牌的手机最受欢迎？</li>
<li>这些手机的平均价格、最高价格、最低价格？</li>
<li>这些手机每月的销售情况如何？</li>
</ul>
<p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近实时搜索效果。</p>
<h2 id="1-1-聚合的种类"><a href="#1-1-聚合的种类" class="headerlink" title="1.1.聚合的种类"></a>1.1.聚合的种类</h2><p>聚合常见的有三类：</p>
<ul>
<li><p><strong>桶（Bucket）</strong>聚合：用来对文档做分组</p>
<ul>
<li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li>
<li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li>
</ul>
</li>
<li><p><strong>度量（Metric）</strong>聚合：用以计算一些值，比如：最大值、最小值、平均值等</p>
<ul>
<li>Avg：求平均值</li>
<li>Max：求最大值</li>
<li>Min：求最小值</li>
<li>Stats：同时求max、min、avg、sum等</li>
</ul>
</li>
<li><p><strong>管道（pipeline）</strong>聚合：其它聚合的结果为基础做聚合</p>
</li>
</ul>
<blockquote>
<p><strong>注意：</strong>参加聚合的字段必须是keyword、日期、数值、布尔类型</p>
</blockquote>
<h2 id="1-2-DSL实现聚合"><a href="#1-2-DSL实现聚合" class="headerlink" title="1.2.DSL实现聚合"></a>1.2.DSL实现聚合</h2><p>现在，我们要统计所有数据中的酒店品牌有几种，其实就是按照品牌对数据分组。此时可以根据酒店品牌的名称做聚合，也就是Bucket聚合。</p>
<h3 id="1-2-1-Bucket聚合语法"><a href="#1-2-1-Bucket聚合语法" class="headerlink" title="1.2.1.Bucket聚合语法"></a>1.2.1.Bucket聚合语法</h3><p>语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>  <span class="comment">// 设置size为0，结果中不包含文档，只包含聚合结果</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 定义聚合</span></span><br><span class="line">    <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//给聚合起个名字</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 聚合的类型，按照品牌值聚合，所以选择term</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span> <span class="comment">// 参与聚合的字段</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span> <span class="comment">// 希望获取的聚合结果数量</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<p><img src="/assets/image-20210723171948228.png" alt="image-20210723171948228"></p>
<h3 id="1-2-2-聚合结果排序"><a href="#1-2-2-聚合结果排序" class="headerlink" title="1.2.2.聚合结果排序"></a>1.2.2.聚合结果排序</h3><p>默认情况下，Bucket聚合会统计Bucket内的文档数量，记为_count，并且按照_count降序排序。</p>
<p>我们可以指定order属性，自定义聚合的排序方式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span> <span class="comment">// 按照_count升序排列</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-3-限定聚合范围"><a href="#1-2-3-限定聚合范围" class="headerlink" title="1.2.3.限定聚合范围"></a>1.2.3.限定聚合范围</h3><p>默认情况下，Bucket聚合是对索引库的所有文档做聚合，但真实场景下，用户会输入搜索条件，因此聚合必须是对搜索结果聚合。那么聚合必须添加限定条件。</p>
<p>我们可以限定要聚合的文档范围，只要添加query条件即可：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">200</span> <span class="comment">// 只对200元以下的文档聚合</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>这次，聚合得到的品牌明显变少了：</p>
<p><img src="/assets/image-20210723172404836.png" alt="image-20210723172404836"></p>
<h3 id="1-2-4-Metric聚合语法"><a href="#1-2-4-Metric聚合语法" class="headerlink" title="1.2.4.Metric聚合语法"></a>1.2.4.Metric聚合语法</h3><p>上节课，我们对酒店按照品牌分组，形成了一个个桶。现在我们需要对桶内的酒店做运算，获取每个品牌的用户评分的min、max、avg等值。</p>
<p>这就要用到Metric聚合了，例如stat聚合：就可以获取min、max、avg等结果。</p>
<p>语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 是brands聚合的子聚合，也就是分组后对每组分别计算</span></span><br><span class="line">        <span class="attr">&quot;score_stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 聚合名称</span></span><br><span class="line">          <span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 聚合类型，这里stats可以计算min、max、avg等</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;score&quot;</span> <span class="comment">// 聚合字段，这里是score</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>这次的score_stats聚合是在brandAgg的聚合内部嵌套的子聚合。因为我们需要在每个桶分别计算。</p>
<p>另外，我们还可以给聚合结果做个排序，例如按照每个桶的酒店平均分做排序：</p>
<p><img src="/assets/image-20210723172917636.png" alt="image-20210723172917636"></p>
<h3 id="1-2-5-小结"><a href="#1-2-5-小结" class="headerlink" title="1.2.5.小结"></a>1.2.5.小结</h3><p>aggs代表聚合，与query同级，此时query的作用是？</p>
<ul>
<li>限定聚合的的文档范围</li>
</ul>
<p>聚合必须的三要素：</p>
<ul>
<li>聚合名称</li>
<li>聚合类型</li>
<li>聚合字段</li>
</ul>
<p>聚合可配置属性有：</p>
<ul>
<li>size：指定聚合结果数量</li>
<li>order：指定聚合结果排序方式</li>
<li>field：指定聚合字段</li>
</ul>
<h2 id="1-3-RestAPI实现聚合"><a href="#1-3-RestAPI实现聚合" class="headerlink" title="1.3.RestAPI实现聚合"></a>1.3.RestAPI实现聚合</h2><h3 id="1-3-1-API语法"><a href="#1-3-1-API语法" class="headerlink" title="1.3.1.API语法"></a>1.3.1.API语法</h3><p>聚合条件与query条件同级别，因此需要使用request.source()来指定聚合条件。</p>
<p>聚合条件的语法：</p>
<p><img src="/assets/image-20210723173057733.png" alt="image-20210723173057733"></p>
<p>聚合的结果也与查询结果不同，API也比较特殊。不过同样是JSON逐层解析：</p>
<p><img src="/assets/image-20210723173215728.png" alt="image-20210723173215728"></p>
<h3 id="1-3-2-业务需求"><a href="#1-3-2-业务需求" class="headerlink" title="1.3.2.业务需求"></a>1.3.2.业务需求</h3><p>需求：搜索页面的品牌、城市等信息不应该是在页面写死，而是通过聚合索引库中的酒店数据得来的：</p>
<p><img src="/assets/image-20210723192605566.png" alt="image-20210723192605566"></p>
<p>分析：</p>
<p>目前，页面的城市列表、星级列表、品牌列表都是写死的，并不会随着搜索结果的变化而变化。但是用户搜索条件改变时，搜索结果会跟着变化。</p>
<p>例如：用户搜索“东方明珠”，那搜索的酒店肯定是在上海东方明珠附近，因此，城市只能是上海，此时城市列表中就不应该显示北京、深圳、杭州这些信息了。</p>
<p>也就是说，搜索结果中包含哪些城市，页面就应该列出哪些城市；搜索结果中包含哪些品牌，页面就应该列出哪些品牌。</p>
<p>如何得知搜索结果中包含哪些品牌？如何得知搜索结果中包含哪些城市？</p>
<p>使用聚合功能，利用Bucket聚合，对搜索结果中的文档基于品牌分组、基于城市分组，就能得知包含哪些品牌、哪些城市了。</p>
<p>因为是对搜索结果聚合，因此聚合是<strong>限定范围的聚合</strong>，也就是说聚合的限定条件跟搜索文档的条件一致。</p>
<p>查看浏览器可以发现，前端其实已经发出了这样的一个请求：</p>
<p><img src="/assets/image-20210723193730799.png" alt="image-20210723193730799"></p>
<p>请求<strong>参数与搜索文档的参数完全一致</strong>。</p>
<p>返回值类型就是页面要展示的最终结果：</p>
<p><img src="/assets/image-20210723203915982.png" alt="image-20210723203915982"></p>
<p>结果是一个Map结构：</p>
<ul>
<li>key是字符串，城市、星级、品牌、价格</li>
<li>value是集合，例如多个城市的名称</li>
</ul>
<h3 id="1-3-3-业务实现"><a href="#1-3-3-业务实现" class="headerlink" title="1.3.3.业务实现"></a>1.3.3.业务实现</h3><p>在<code>cn.itcast.hotel.web</code>包的<code>HotelController</code>中添加一个方法，遵循下面的要求：</p>
<ul>
<li>请求方式：<code>POST</code></li>
<li>请求路径：<code>/hotel/filters</code></li>
<li>请求参数：<code>RequestParams</code>，与搜索文档的参数一致</li>
<li>返回值类型：<code>Map&lt;String, List&lt;String&gt;&gt;</code></li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;filters&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">getFilters</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hotelService.getFilters(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这里调用了IHotelService中的getFilters方法，尚未实现。</p>
<p>在<code>cn.itcast.hotel.service.IHotelService</code>中定义新方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">filters</span><span class="params">(RequestParams params)</span>;</span><br></pre></td></tr></table></figure>



<p>在<code>cn.itcast.hotel.service.impl.HotelService</code>中实现该方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">filters</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1.query</span></span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line">        <span class="comment">// 2.2.设置size</span></span><br><span class="line">        request.source().size(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 2.3.聚合</span></span><br><span class="line">        buildAggregation(request);</span><br><span class="line">        <span class="comment">// 3.发出请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析结果</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">        <span class="comment">// 4.1.根据品牌名称，获取品牌结果</span></span><br><span class="line">        List&lt;String&gt; brandList = getAggByName(aggregations, <span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;品牌&quot;</span>, brandList);</span><br><span class="line">        <span class="comment">// 4.2.根据品牌名称，获取品牌结果</span></span><br><span class="line">        List&lt;String&gt; cityList = getAggByName(aggregations, <span class="string">&quot;cityAgg&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;城市&quot;</span>, cityList);</span><br><span class="line">        <span class="comment">// 4.3.根据品牌名称，获取品牌结果</span></span><br><span class="line">        List&lt;String&gt; starList = getAggByName(aggregations, <span class="string">&quot;starAgg&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;星级&quot;</span>, starList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildAggregation</span><span class="params">(SearchRequest request)</span> &#123;</span><br><span class="line">    request.source().aggregation(AggregationBuilders</span><br><span class="line">                                 .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                                 .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                                 .size(<span class="number">100</span>)</span><br><span class="line">                                );</span><br><span class="line">    request.source().aggregation(AggregationBuilders</span><br><span class="line">                                 .terms(<span class="string">&quot;cityAgg&quot;</span>)</span><br><span class="line">                                 .field(<span class="string">&quot;city&quot;</span>)</span><br><span class="line">                                 .size(<span class="number">100</span>)</span><br><span class="line">                                );</span><br><span class="line">    request.source().aggregation(AggregationBuilders</span><br><span class="line">                                 .terms(<span class="string">&quot;starAgg&quot;</span>)</span><br><span class="line">                                 .field(<span class="string">&quot;starName&quot;</span>)</span><br><span class="line">                                 .size(<span class="number">100</span>)</span><br><span class="line">                                );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; <span class="title function_">getAggByName</span><span class="params">(Aggregations aggregations, String aggName)</span> &#123;</span><br><span class="line">    <span class="comment">// 4.1.根据聚合名称获取聚合结果</span></span><br><span class="line">    <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(aggName);</span><br><span class="line">    <span class="comment">// 4.2.获取buckets</span></span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">    <span class="comment">// 4.3.遍历</span></span><br><span class="line">    List&lt;String&gt; brandList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 4.4.获取key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">        brandList.add(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> brandList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="2-自动补全"><a href="#2-自动补全" class="headerlink" title="2.自动补全"></a>2.自动补全</h1><p>当用户在搜索框输入字符时，我们应该提示出与该字符有关的搜索项，如图：</p>
<p><img src="/assets/image-20210723204936367.png" alt="image-20210723204936367"></p>
<p>这种根据用户输入的字母，提示完整词条的功能，就是自动补全了。</p>
<p>因为需要根据拼音字母来推断，因此要用到拼音分词功能。</p>
<h2 id="2-1-拼音分词器"><a href="#2-1-拼音分词器" class="headerlink" title="2.1.拼音分词器"></a>2.1.拼音分词器</h2><p>要实现根据字母做补全，就必须对文档按照拼音分词。在GitHub上恰好有elasticsearch的拼音分词插件。地址：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p>
<p><img src="/assets/image-20210723205932746.png" alt="image-20210723205932746"></p>
<p>课前资料中也提供了拼音分词器的安装包：</p>
<p><img src="/assets/image-20210723205722303.png" alt="image-20210723205722303"> </p>
<p>安装方式与IK分词器一样，分三步：</p>
<p>​	①解压</p>
<p>​	②上传到虚拟机中，elasticsearch的plugin目录</p>
<p>​	③重启elasticsearch</p>
<p>​	④测试</p>
<p>详细安装步骤可以参考IK分词器的安装过程。</p>
<p>测试用法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家酒店还不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/assets/image-20210723210126506.png" alt="image-20210723210126506"> </p>
<h2 id="2-2-自定义分词器"><a href="#2-2-自定义分词器" class="headerlink" title="2.2.自定义分词器"></a>2.2.自定义分词器</h2><p>默认的拼音分词器会将每个汉字单独分为拼音，而我们希望的是每个词条形成一组拼音，需要对拼音分词器做个性化定制，形成自定义分词器。</p>
<p>elasticsearch中分词器（analyzer）的组成包含三部分：</p>
<ul>
<li>character filters：在tokenizer之前对文本进行处理。例如删除字符、替换字符</li>
<li>tokenizer：将文本按照一定的规则切割成词条（term）。例如keyword，就是不分词；还有ik_smart</li>
<li>tokenizer filter：将tokenizer输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等</li>
</ul>
<p>文档分词时会依次由这三部分来处理文档：</p>
<p>   <img src="/assets/image-20210723210427878.png" alt="image-20210723210427878"></p>
<p>声明自定义分词器的语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 自定义分词器</span></span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">// 分词器名称</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 自定义tokenizer filter</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 过滤器名称</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span> <span class="comment">// 过滤器类型，这里是pinyin</span></span><br><span class="line">		  <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_analyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>测试：</p>
<p><img src="/assets/image-20210723211829150.png" alt="image-20210723211829150"></p>
<p>总结：</p>
<p>如何使用拼音分词器？</p>
<ul>
<li><p>①下载pinyin分词器</p>
</li>
<li><p>②解压并放到elasticsearch的plugin目录</p>
</li>
<li><p>③重启即可</p>
</li>
</ul>
<p>如何自定义分词器？</p>
<ul>
<li><p>①创建索引库时，在settings中配置，可以包含三部分</p>
</li>
<li><p>②character filter</p>
</li>
<li><p>③tokenizer</p>
</li>
<li><p>④filter</p>
</li>
</ul>
<p>拼音分词器注意事项？</p>
<ul>
<li>为了避免搜索到同音字，搜索时不要使用拼音分词器</li>
</ul>
<h2 id="2-3-自动补全查询"><a href="#2-3-自动补全查询" class="headerlink" title="2.3.自动补全查询"></a>2.3.自动补全查询</h2><p>elasticsearch提供了<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/search-suggesters.html">Completion Suggester</a>查询来实现自动补全功能。这个查询会匹配以用户输入内容开头的词条并返回。为了提高补全查询的效率，对于文档中字段的类型有一些约束：</p>
<ul>
<li><p>参与补全查询的字段必须是completion类型。</p>
</li>
<li><p>字段的内容一般是用来补全的多个词条形成的数组。</p>
</li>
</ul>
<p>比如，一个这样的索引库：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建索引库</span></span><br><span class="line">PUT test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后插入下面的数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例数据</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Sony&quot;</span><span class="punctuation">,</span> <span class="string">&quot;WH-1000XM3&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;SK-II&quot;</span><span class="punctuation">,</span> <span class="string">&quot;PITERA&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST test/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Nintendo&quot;</span><span class="punctuation">,</span> <span class="string">&quot;switch&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>查询的DSL语句如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动补全查询</span></span><br><span class="line">GET /test/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title_suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s&quot;</span><span class="punctuation">,</span> <span class="comment">// 关键字</span></span><br><span class="line">      <span class="attr">&quot;completion&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span> <span class="comment">// 补全查询的字段</span></span><br><span class="line">        <span class="attr">&quot;skip_duplicates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 跳过重复的</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span> <span class="comment">// 获取前10条结果</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>







<h2 id="2-4-实现酒店搜索框自动补全"><a href="#2-4-实现酒店搜索框自动补全" class="headerlink" title="2.4.实现酒店搜索框自动补全"></a>2.4.实现酒店搜索框自动补全</h2><p>现在，我们的hotel索引库还没有设置拼音分词器，需要修改索引库中的配置。但是我们知道索引库是无法修改的，只能删除然后重新创建。</p>
<p>另外，我们需要添加一个字段，用来做自动补全，将brand、suggestion、city等都放进去，作为自动补全的提示。</p>
<p>因此，总结一下，我们需要做的事情包括：</p>
<ol>
<li><p>修改hotel索引库结构，设置自定义拼音分词器</p>
</li>
<li><p>修改索引库的name、all字段，使用自定义分词器</p>
</li>
<li><p>索引库添加一个新字段suggestion，类型为completion类型，使用自定义的分词器</p>
</li>
<li><p>给HotelDoc类添加suggestion字段，内容包含brand、business</p>
</li>
<li><p>重新导入数据到hotel库</p>
</li>
</ol>
<h3 id="2-4-1-修改酒店映射结构"><a href="#2-4-1-修改酒店映射结构" class="headerlink" title="2.4.1.修改酒店映射结构"></a>2.4.1.修改酒店映射结构</h3><p>代码如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 酒店数据索引库</span></span><br><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;text_anlyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;completion_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text_anlyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;business&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text_anlyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;suggestion&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion_analyzer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-2-修改HotelDoc实体"><a href="#2-4-2-修改HotelDoc实体" class="headerlink" title="2.4.2.修改HotelDoc实体"></a>2.4.2.修改HotelDoc实体</h3><p>HotelDoc中要添加一个字段，用来做自动补全，内容可以是酒店品牌、城市、商圈等信息。按照自动补全字段的要求，最好是这些字段的数组。</p>
<p>因此我们在HotelDoc中添加一个suggestion字段，类型为<code>List&lt;String&gt;</code>，然后将brand、city、business等信息放到里面。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="keyword">private</span> Object distance;</span><br><span class="line">    <span class="keyword">private</span> Boolean isAD;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; suggestion;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">        <span class="comment">// 组装suggestion</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.business.contains(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// business有多个值，需要切割</span></span><br><span class="line">            String[] arr = <span class="built_in">this</span>.business.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="comment">// 添加元素</span></span><br><span class="line">            <span class="built_in">this</span>.suggestion = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="built_in">this</span>.suggestion.add(<span class="built_in">this</span>.brand);</span><br><span class="line">            Collections.addAll(<span class="built_in">this</span>.suggestion, arr);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.suggestion = Arrays.asList(<span class="built_in">this</span>.brand, <span class="built_in">this</span>.business);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-3-重新导入"><a href="#2-4-3-重新导入" class="headerlink" title="2.4.3.重新导入"></a>2.4.3.重新导入</h3><p>重新执行之前编写的导入数据功能，可以看到新的酒店数据中包含了suggestion：</p>
<p><img src="/assets/image-20210723213546183.png" alt="image-20210723213546183"></p>
<h3 id="2-4-4-自动补全查询的JavaAPI"><a href="#2-4-4-自动补全查询的JavaAPI" class="headerlink" title="2.4.4.自动补全查询的JavaAPI"></a>2.4.4.自动补全查询的JavaAPI</h3><p>之前我们学习了自动补全查询的DSL，而没有学习对应的JavaAPI，这里给出一个示例：</p>
<p><img src="/assets/image-20210723213759922.png" alt="image-20210723213759922"></p>
<p>而自动补全的结果也比较特殊，解析的代码如下：</p>
<p><img src="/assets/image-20210723213917524.png" alt="image-20210723213917524"></p>
<h3 id="2-4-5-实现搜索框自动补全"><a href="#2-4-5-实现搜索框自动补全" class="headerlink" title="2.4.5.实现搜索框自动补全"></a>2.4.5.实现搜索框自动补全</h3><p>查看前端页面，可以发现当我们在输入框键入时，前端会发起ajax请求：</p>
<p><img src="/assets/image-20210723214021062.png" alt="image-20210723214021062"></p>
<p>返回值是补全词条的集合，类型为<code>List&lt;String&gt;</code></p>
<p>1）在<code>cn.itcast.hotel.web</code>包下的<code>HotelController</code>中添加新接口，接收新的请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;suggestion&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getSuggestions</span><span class="params">(<span class="meta">@RequestParam(&quot;key&quot;)</span> String prefix)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hotelService.getSuggestions(prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2）在<code>cn.itcast.hotel.service</code>包下的<code>IhotelService</code>中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; <span class="title function_">getSuggestions</span><span class="params">(String prefix)</span>;</span><br></pre></td></tr></table></figure>



<p>3）在<code>cn.itcast.hotel.service.impl.HotelService</code>中实现该方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getSuggestions</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备DSL</span></span><br><span class="line">        request.source().suggest(<span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>().addSuggestion(</span><br><span class="line">            <span class="string">&quot;suggestions&quot;</span>,</span><br><span class="line">            SuggestBuilders.completionSuggestion(<span class="string">&quot;suggestion&quot;</span>)</span><br><span class="line">            .prefix(prefix)</span><br><span class="line">            .skipDuplicates(<span class="literal">true</span>)</span><br><span class="line">            .size(<span class="number">10</span>)</span><br><span class="line">        ));</span><br><span class="line">        <span class="comment">// 3.发起请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析结果</span></span><br><span class="line">        <span class="type">Suggest</span> <span class="variable">suggest</span> <span class="operator">=</span> response.getSuggest();</span><br><span class="line">        <span class="comment">// 4.1.根据补全查询名称，获取补全结果</span></span><br><span class="line">        <span class="type">CompletionSuggestion</span> <span class="variable">suggestions</span> <span class="operator">=</span> suggest.getSuggestion(<span class="string">&quot;suggestions&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2.获取options</span></span><br><span class="line">        List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestions.getOptions();</span><br><span class="line">        <span class="comment">// 4.3.遍历</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(options.size());</span><br><span class="line">        <span class="keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> option.getText().toString();</span><br><span class="line">            list.add(text);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="3-数据同步"><a href="#3-数据同步" class="headerlink" title="3.数据同步"></a>3.数据同步</h1><p>elasticsearch中的酒店数据来自于mysql数据库，因此mysql数据发生改变时，elasticsearch也必须跟着改变，这个就是elasticsearch与mysql之间的<strong>数据同步</strong>。</p>
<p><img src="/assets/image-20210723214758392.png" alt="image-20210723214758392"></p>
<h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1.思路分析"></a>3.1.思路分析</h2><p>常见的数据同步方案有三种：</p>
<ul>
<li>同步调用</li>
<li>异步通知</li>
<li>监听binlog</li>
</ul>
<h3 id="3-1-1-同步调用"><a href="#3-1-1-同步调用" class="headerlink" title="3.1.1.同步调用"></a>3.1.1.同步调用</h3><p>方案一：同步调用</p>
<p><img src="/assets/image-20210723214931869.png" alt="image-20210723214931869"></p>
<p>基本步骤如下：</p>
<ul>
<li>hotel-demo对外提供接口，用来修改elasticsearch中的数据</li>
<li>酒店管理服务在完成数据库操作后，直接调用hotel-demo提供的接口，</li>
</ul>
<h3 id="3-1-2-异步通知"><a href="#3-1-2-异步通知" class="headerlink" title="3.1.2.异步通知"></a>3.1.2.异步通知</h3><p>方案二：异步通知</p>
<p><img src="/assets/image-20210723215140735.png" alt="image-20210723215140735"></p>
<p>流程如下：</p>
<ul>
<li>hotel-admin对mysql数据库数据完成增、删、改后，发送MQ消息</li>
<li>hotel-demo监听MQ，接收到消息后完成elasticsearch数据修改</li>
</ul>
<h3 id="3-1-3-监听binlog"><a href="#3-1-3-监听binlog" class="headerlink" title="3.1.3.监听binlog"></a>3.1.3.监听binlog</h3><p>方案三：监听binlog</p>
<p><img src="/assets/image-20210723215518541.png" alt="image-20210723215518541"></p>
<p>流程如下：</p>
<ul>
<li>给mysql开启binlog功能</li>
<li>mysql完成增、删、改操作都会记录在binlog中</li>
<li>hotel-demo基于canal监听binlog变化，实时更新elasticsearch中的内容</li>
</ul>
<h3 id="3-1-4-选择"><a href="#3-1-4-选择" class="headerlink" title="3.1.4.选择"></a>3.1.4.选择</h3><p>方式一：同步调用</p>
<ul>
<li>优点：实现简单，粗暴</li>
<li>缺点：业务耦合度高</li>
</ul>
<p>方式二：异步通知</p>
<ul>
<li>优点：低耦合，实现难度一般</li>
<li>缺点：依赖mq的可靠性</li>
</ul>
<p>方式三：监听binlog</p>
<ul>
<li>优点：完全解除服务间耦合</li>
<li>缺点：开启binlog增加数据库负担、实现复杂度高</li>
</ul>
<h2 id="3-2-实现数据同步"><a href="#3-2-实现数据同步" class="headerlink" title="3.2.实现数据同步"></a>3.2.实现数据同步</h2><h3 id="3-2-1-思路"><a href="#3-2-1-思路" class="headerlink" title="3.2.1.思路"></a>3.2.1.思路</h3><p>利用课前资料提供的hotel-admin项目作为酒店管理的微服务。当酒店数据发生增、删、改时，要求对elasticsearch中数据也要完成相同操作。</p>
<p>步骤：</p>
<ul>
<li><p>导入课前资料提供的hotel-admin项目，启动并测试酒店数据的CRUD</p>
</li>
<li><p>声明exchange、queue、RoutingKey</p>
</li>
<li><p>在hotel-admin中的增、删、改业务中完成消息发送</p>
</li>
<li><p>在hotel-demo中完成消息监听，并更新elasticsearch中数据</p>
</li>
<li><p>启动并测试数据同步功能</p>
</li>
</ul>
<h3 id="3-2-2-导入demo"><a href="#3-2-2-导入demo" class="headerlink" title="3.2.2.导入demo"></a>3.2.2.导入demo</h3><p>导入课前资料提供的hotel-admin项目：</p>
<p><img src="/assets/image-20210723220237930.png" alt="image-20210723220237930"></p>
<p>运行后，访问 <a href="http://localhost:8099/">http://localhost:8099</a></p>
<p><img src="/assets/image-20210723220354464.png" alt="image-20210723220354464"></p>
<p>其中包含了酒店的CRUD功能：</p>
<p><img src="/assets/image-20210723220511090.png" alt="image-20210723220511090"></p>
<h3 id="3-2-3-声明交换机、队列"><a href="#3-2-3-声明交换机、队列" class="headerlink" title="3.2.3.声明交换机、队列"></a>3.2.3.声明交换机、队列</h3><p>MQ结构如图：</p>
<p><img src="/assets/image-20210723215850307.png" alt="image-20210723215850307"></p>
<h4 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><p>在hotel-admin、hotel-demo中引入rabbitmq的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--amqp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2）声明队列交换机名称"><a href="#2）声明队列交换机名称" class="headerlink" title="2）声明队列交换机名称"></a>2）声明队列交换机名称</h4><p>在hotel-admin和hotel-demo中的<code>cn.itcast.hotel.constatnts</code>包下新建一个类<code>MqConstants</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.constatnts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConstants</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;hotel.topic&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听新增和修改的队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_INSERT_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;hotel.insert.queue&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听删除的队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_DELETE_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;hotel.delete.queue&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增或修改的RoutingKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_INSERT_KEY</span> <span class="operator">=</span> <span class="string">&quot;hotel.insert&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除的RoutingKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HOTEL_DELETE_KEY</span> <span class="operator">=</span> <span class="string">&quot;hotel.delete&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3）声明队列交换机"><a href="#3）声明队列交换机" class="headerlink" title="3）声明队列交换机"></a>3）声明队列交换机</h4><p>在hotel-demo中，定义配置类，声明队列、交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.constants.MqConstants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(MqConstants.HOTEL_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">insertQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConstants.HOTEL_INSERT_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">deleteQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConstants.HOTEL_DELETE_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">insertQueueBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(insertQueue()).to(topicExchange()).with(MqConstants.HOTEL_INSERT_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">deleteQueueBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deleteQueue()).to(topicExchange()).with(MqConstants.HOTEL_DELETE_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-4-发送MQ消息"><a href="#3-2-4-发送MQ消息" class="headerlink" title="3.2.4.发送MQ消息"></a>3.2.4.发送MQ消息</h3><p>在hotel-admin中的增、删、改业务中分别发送MQ消息：</p>
<p><img src="/assets/image-20210723221843816.png" alt="image-20210723221843816"></p>
<h3 id="3-2-5-接收MQ消息"><a href="#3-2-5-接收MQ消息" class="headerlink" title="3.2.5.接收MQ消息"></a>3.2.5.接收MQ消息</h3><p>hotel-demo接收到MQ消息要做的事情包括：</p>
<ul>
<li>新增消息：根据传递的hotel的id查询hotel信息，然后新增一条数据到索引库</li>
<li>删除消息：根据传递的hotel的id删除索引库中的一条数据</li>
</ul>
<p>1）首先在hotel-demo的<code>cn.itcast.hotel.service</code>包下的<code>IHotelService</code>中新增新增、删除业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure>



<p>2）给hotel-demo中的<code>cn.itcast.hotel.service.impl</code>包下的HotelService中实现业务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, id.toString());</span><br><span class="line">        <span class="comment">// 2.发送请求</span></span><br><span class="line">        client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 0.根据id查询酒店数据</span></span><br><span class="line">        <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">// 转换为文档类型</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.准备Request对象</span></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotel.getId().toString());</span><br><span class="line">        <span class="comment">// 2.准备Json文档</span></span><br><span class="line">        request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3）编写监听器</p>
<p>在hotel-demo中的<code>cn.itcast.hotel.mq</code>包新增一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.constants.MqConstants;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听酒店新增或修改的业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 酒店id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = MqConstants.HOTEL_INSERT_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenHotelInsertOrUpdate</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        hotelService.insertById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听酒店删除的业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 酒店id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = MqConstants.HOTEL_DELETE_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenHotelDelete</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        hotelService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="4-集群"><a href="#4-集群" class="headerlink" title="4.集群"></a>4.集群</h1><p>单机的elasticsearch做数据存储，必然面临两个问题：海量数据存储问题、单点故障问题。</p>
<ul>
<li>海量数据存储问题：将索引库从逻辑上拆分为N个分片（shard），存储到多个节点</li>
<li>单点故障问题：将分片数据在不同节点备份（replica ）</li>
</ul>
<p><strong>ES集群相关概念</strong>:</p>
<ul>
<li><p>集群（cluster）：一组拥有共同的 cluster name 的 节点。</p>
</li>
<li><p><font color="red">节点（node)</font>   ：集群中的一个 Elasticearch 实例</p>
</li>
<li><p><font color="red">分片（shard）</font>：索引可以被拆分为不同的部分进行存储，称为分片。在集群环境下，一个索引的不同分片可以拆分到不同的节点中</p>
<p>解决问题：数据量太大，单点存储量有限的问题。</p>
<p><img src="/assets/image-20200104124440086-5602723.png" alt="image-20200104124440086"></p>
<blockquote>
<p>此处，我们把数据分成3片：shard0、shard1、shard2</p>
</blockquote>
</li>
<li><p>主分片（Primary shard）：相对于副本分片的定义。</p>
</li>
<li><p>副本分片（Replica shard）每个主分片可以有一个或者多个副本，数据和主分片一样。</p>
<p>​</p>
</li>
</ul>
<p>	</p>
<p>数据备份可以保证高可用，但是每个分片备份一份，所需要的节点数量就会翻一倍，成本实在是太高了！</p>
<p>为了在高可用和成本间寻求平衡，我们可以这样做：</p>
<ul>
<li>首先对数据分片，存储到不同节点</li>
<li>然后对每个分片进行备份，放到对方节点，完成互相备份</li>
</ul>
<p>这样可以大大减少所需要的服务节点数量，如图，我们以3分片，每个分片备份一份为例：</p>
<p><img src="/assets/image-20200104124551912.png" alt="image-20200104124551912"></p>
<p>现在，每个分片都有1个备份，存储在3个节点：</p>
<ul>
<li>node0：保存了分片0和1</li>
<li>node1：保存了分片0和2</li>
<li>node2：保存了分片1和2</li>
</ul>
<h2 id="4-1-搭建ES集群"><a href="#4-1-搭建ES集群" class="headerlink" title="4.1.搭建ES集群"></a>4.1.搭建ES集群</h2><p>参考课前资料的文档：</p>
<p><img src="/assets/image-20210723222732427.png" alt="image-20210723222732427"> </p>
<p>其中的第四章节：</p>
<p><img src="/assets/image-20210723222812619.png" alt="image-20210723222812619"> </p>
<h2 id="4-2-集群脑裂问题"><a href="#4-2-集群脑裂问题" class="headerlink" title="4.2.集群脑裂问题"></a>4.2.集群脑裂问题</h2><h3 id="4-2-1-集群职责划分"><a href="#4-2-1-集群职责划分" class="headerlink" title="4.2.1.集群职责划分"></a>4.2.1.集群职责划分</h3><p>elasticsearch中集群节点有不同的职责划分：</p>
<p><img src="/assets/image-20210723223008967.png" alt="image-20210723223008967"></p>
<p>默认情况下，集群中的任何一个节点都同时具备上述四种角色。</p>
<p>但是真实的集群一定要将集群职责分离：</p>
<ul>
<li>master节点：对CPU要求高，但是内存要求第</li>
<li>data节点：对CPU和内存要求都高</li>
<li>coordinating节点：对网络带宽、CPU要求高</li>
</ul>
<p>职责分离可以让我们根据不同节点的需求分配不同的硬件去部署。而且避免业务之间的互相干扰。</p>
<p>一个典型的es集群职责划分如图：</p>
<p><img src="/assets/image-20210723223629142.png" alt="image-20210723223629142"></p>
<h3 id="4-2-2-脑裂问题"><a href="#4-2-2-脑裂问题" class="headerlink" title="4.2.2.脑裂问题"></a>4.2.2.脑裂问题</h3><p>脑裂是因为集群中的节点失联导致的。</p>
<p>例如一个集群中，主节点与其它节点失联：</p>
<p><img src="/assets/image-20210723223804995.png" alt="image-20210723223804995"></p>
<p>此时，node2和node3认为node1宕机，就会重新选主：</p>
<p><img src="/assets/image-20210723223845754.png" alt="image-20210723223845754"></p>
<p>当node3当选后，集群继续对外提供服务，node2和node3自成集群，node1自成集群，两个集群数据不同步，出现数据差异。</p>
<p>当网络恢复后，因为集群中有两个master节点，集群状态的不一致，出现脑裂的情况：</p>
<p><img src="/assets/image-20210723224000555.png" alt="image-20210723224000555"></p>
<p>解决脑裂的方案是，要求选票超过 ( eligible节点数量 + 1 ）&#x2F; 2 才能当选为主，因此eligible节点数量最好是奇数。对应配置项是discovery.zen.minimum_master_nodes，在es7.0以后，已经成为默认配置，因此一般不会发生脑裂问题</p>
<p>例如：3个节点形成的集群，选票必须超过 （3 + 1） &#x2F; 2 ，也就是2票。node3得到node2和node3的选票，当选为主。node1只有自己1票，没有当选。集群中依然只有1个主节点，没有出现脑裂。</p>
<h3 id="4-2-3-小结"><a href="#4-2-3-小结" class="headerlink" title="4.2.3.小结"></a>4.2.3.小结</h3><p>master eligible节点的作用是什么？</p>
<ul>
<li>参与集群选主</li>
<li>主节点可以管理集群状态、管理分片信息、处理创建和删除索引库的请求</li>
</ul>
<p>data节点的作用是什么？</p>
<ul>
<li>数据的CRUD</li>
</ul>
<p>coordinator节点的作用是什么？</p>
<ul>
<li><p>路由请求到其它节点</p>
</li>
<li><p>合并查询到的结果，返回给用户</p>
</li>
</ul>
<h2 id="4-3-集群分布式存储"><a href="#4-3-集群分布式存储" class="headerlink" title="4.3.集群分布式存储"></a>4.3.集群分布式存储</h2><p>当新增文档时，应该保存到不同分片，保证数据均衡，那么coordinating node如何确定数据该存储到哪个分片呢？</p>
<h3 id="4-3-1-分片存储测试"><a href="#4-3-1-分片存储测试" class="headerlink" title="4.3.1.分片存储测试"></a>4.3.1.分片存储测试</h3><p>插入三条数据：</p>
<p><img src="/assets/image-20210723225006058.png" alt="image-20210723225006058"></p>
<p><img src="/assets/image-20210723225034637.png" alt="image-20210723225034637"></p>
<p><img src="/assets/image-20210723225112029.png" alt="image-20210723225112029"></p>
<p>测试可以看到，三条数据分别在不同分片：</p>
<p><img src="/assets/image-20210723225227928.png" alt="image-20210723225227928"></p>
<p>结果：</p>
<p><img src="/assets/image-20210723225342120.png" alt="image-20210723225342120"></p>
<h3 id="4-3-2-分片存储原理"><a href="#4-3-2-分片存储原理" class="headerlink" title="4.3.2.分片存储原理"></a>4.3.2.分片存储原理</h3><p>elasticsearch会通过hash算法来计算文档应该存储到哪个分片：</p>
<p><img src="/assets/image-20210723224354904.png" alt="image-20210723224354904"></p>
<p>说明：</p>
<ul>
<li>_routing默认是文档的id</li>
<li>算法与分片数量有关，因此索引库一旦创建，分片数量不能修改！</li>
</ul>
<p>新增文档的流程如下：</p>
<p><img src="/assets/image-20210723225436084.png" alt="image-20210723225436084"></p>
<p>解读：</p>
<ul>
<li>1）新增一个id&#x3D;1的文档</li>
<li>2）对id做hash运算，假如得到的是2，则应该存储到shard-2</li>
<li>3）shard-2的主分片在node3节点，将数据路由到node3</li>
<li>4）保存文档</li>
<li>5）同步给shard-2的副本replica-2，在node2节点</li>
<li>6）返回结果给coordinating-node节点</li>
</ul>
<h2 id="4-4-集群分布式查询"><a href="#4-4-集群分布式查询" class="headerlink" title="4.4.集群分布式查询"></a>4.4.集群分布式查询</h2><p>elasticsearch的查询分成两个阶段：</p>
<ul>
<li><p>scatter phase：分散阶段，coordinating node会把请求分发到每一个分片</p>
</li>
<li><p>gather phase：聚集阶段，coordinating node汇总data node的搜索结果，并处理为最终结果集返回给用户</p>
</li>
</ul>
<p><img src="/assets/image-20210723225809848.png" alt="image-20210723225809848"></p>
<h2 id="4-5-集群故障转移"><a href="#4-5-集群故障转移" class="headerlink" title="4.5.集群故障转移"></a>4.5.集群故障转移</h2><p>集群的master节点会监控集群中的节点状态，如果发现有节点宕机，会立即将宕机节点的分片数据迁移到其它节点，确保数据安全，这个叫做故障转移。</p>
<p>1）例如一个集群结构如图：</p>
<p><img src="/assets/image-20210723225945963.png" alt="image-20210723225945963"></p>
<p>现在，node1是主节点，其它两个节点是从节点。</p>
<p>2）突然，node1发生了故障：</p>
<p><img src="/assets/image-20210723230020574.png" alt="image-20210723230020574"></p>
<p>宕机后的第一件事，需要重新选主，例如选中了node2：</p>
<p><img src="/assets/image-20210723230055974.png" alt="image-20210723230055974"></p>
<p>node2成为主节点后，会检测集群监控状态，发现：shard-1、shard-0没有副本节点。因此需要将node1上的数据迁移到node2、node3：</p>
<p><img src="/assets/image-20210723230216642.png" alt="image-20210723230216642"></p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch day2</title>
    <url>/2024/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E02/</url>
    <content><![CDATA[<h1 id="分布式搜索引擎02"><a href="#分布式搜索引擎02" class="headerlink" title="分布式搜索引擎02"></a>分布式搜索引擎02</h1><p>在昨天的学习中，我们已经导入了大量数据到elasticsearch中，实现了elasticsearch的数据存储功能。但elasticsearch最擅长的还是搜索和数据分析。</p>
<p>所以今天，我们研究下elasticsearch的数据搜索功能。我们会分别使用<strong>DSL</strong>和<strong>RestClient</strong>实现搜索。</p>
<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-DSL查询文档"><a href="#1-DSL查询文档" class="headerlink" title="1.DSL查询文档"></a>1.DSL查询文档</h1><p>elasticsearch的查询依然是基于JSON风格的DSL来实现的。</p>
<h2 id="1-1-DSL查询分类"><a href="#1-1-DSL查询分类" class="headerlink" title="1.1.DSL查询分类"></a>1.1.DSL查询分类</h2><p>Elasticsearch提供了基于JSON的DSL（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">Domain Specific Language</a>）来定义查询。常见的查询类型包括：</p>
<ul>
<li><p><strong>查询所有</strong>：查询出所有数据，一般测试用。例如：match_all</p>
</li>
<li><p><strong>全文检索（full text）查询</strong>：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：</p>
<ul>
<li>match_query</li>
<li>multi_match_query</li>
</ul>
</li>
<li><p><strong>精确查询</strong>：根据精确词条值查找数据，一般是查找keyword、数值、日期、boolean等类型字段。例如：</p>
<ul>
<li>ids</li>
<li>range</li>
<li>term</li>
</ul>
</li>
<li><p><strong>地理（geo）查询</strong>：根据经纬度查询。例如：</p>
<ul>
<li>geo_distance</li>
<li>geo_bounding_box</li>
</ul>
</li>
<li><p><strong>复合（compound）查询</strong>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：</p>
<ul>
<li>bool</li>
<li>function_score</li>
</ul>
</li>
</ul>
<p>查询的语法基本一致：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;查询类型&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;查询条件&quot;</span><span class="punctuation">:</span> <span class="string">&quot;条件值&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我们以查询所有为例，其中：</p>
<ul>
<li>查询类型为match_all</li>
<li>没有查询条件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>其它查询无非就是<strong>查询类型</strong>、<strong>查询条件</strong>的变化。</p>
<h2 id="1-2-全文检索查询"><a href="#1-2-全文检索查询" class="headerlink" title="1.2.全文检索查询"></a>1.2.全文检索查询</h2><h3 id="1-2-1-使用场景"><a href="#1-2-1-使用场景" class="headerlink" title="1.2.1.使用场景"></a>1.2.1.使用场景</h3><p>全文检索查询的基本流程如下：</p>
<ul>
<li>对用户搜索的内容做分词，得到词条</li>
<li>根据词条去倒排索引库中匹配，得到文档id</li>
<li>根据文档id找到文档，返回给用户</li>
</ul>
<p>比较常用的场景包括：</p>
<ul>
<li>商城的输入框搜索</li>
<li>百度输入框搜索</li>
</ul>
<p>例如京东：</p>
<p><img src="/assets/image-20210721165326938.png" alt="image-20210721165326938"></p>
<p>因为是拿着词条去匹配，因此参与搜索的字段也必须是可分词的text类型的字段。</p>
<h3 id="1-2-2-基本语法"><a href="#1-2-2-基本语法" class="headerlink" title="1.2.2.基本语法"></a>1.2.2.基本语法</h3><p>常见的全文检索查询包括：</p>
<ul>
<li>match查询：单字段查询</li>
<li>multi_match查询：多字段查询，任意一个字段符合条件就算符合查询条件</li>
</ul>
<p>match查询语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>mulit_match语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;FIELD1&quot;</span><span class="punctuation">,</span> <span class="string">&quot; FIELD12&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-3-示例"><a href="#1-2-3-示例" class="headerlink" title="1.2.3.示例"></a>1.2.3.示例</h3><p>match查询示例：</p>
<p><img src="/assets/image-20210721170455419.png" alt="image-20210721170455419"></p>
<p>multi_match查询示例：</p>
<p><img src="/assets/image-20210721170720691.png" alt="image-20210721170720691"></p>
<p>可以看到，两种查询结果是一样的，为什么？</p>
<p>因为我们将brand、name、business值都利用copy_to复制到了all字段中。因此你根据三个字段搜索，和根据all字段搜索效果当然一样了。</p>
<p>但是，搜索字段越多，对查询性能影响越大，因此建议采用copy_to，然后单字段查询的方式。</p>
<h3 id="1-2-4-总结"><a href="#1-2-4-总结" class="headerlink" title="1.2.4.总结"></a>1.2.4.总结</h3><p>match和multi_match的区别是什么？</p>
<ul>
<li>match：根据一个字段查询</li>
<li>multi_match：根据多个字段查询，参与查询字段越多，查询性能越差</li>
</ul>
<h2 id="1-3-精准查询"><a href="#1-3-精准查询" class="headerlink" title="1.3.精准查询"></a>1.3.精准查询</h2><p>精确查询一般是查找keyword、数值、日期、boolean等类型字段。所以<strong>不会</strong>对搜索条件分词。常见的有：</p>
<ul>
<li>term：根据词条精确值查询</li>
<li>range：根据值的范围查询</li>
</ul>
<h3 id="1-3-1-term查询"><a href="#1-3-1-term查询" class="headerlink" title="1.3.1.term查询"></a>1.3.1.term查询</h3><p>因为精确查询的字段搜是不分词的字段，因此查询的条件也必须是<strong>不分词</strong>的词条。查询时，用户输入的内容跟自动值完全匹配时才认为符合条件。如果用户输入的内容过多，反而搜索不到数据。</p>
<p>语法说明：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// term查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VALUE&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>示例：</p>
<p>当我搜索的是精确词条时，能正确查询出结果：</p>
<p><img src="/assets/image-20210721171655308.png" alt="image-20210721171655308"></p>
<p>但是，当我搜索的内容不是词条，而是多个词语形成的短语时，反而搜索不到：</p>
<p><img src="/assets/image-20210721171838378.png" alt="image-20210721171838378"></p>
<h3 id="1-3-2-range查询"><a href="#1-3-2-range查询" class="headerlink" title="1.3.2.range查询"></a>1.3.2.range查询</h3><p>范围查询，一般应用在对数值类型做范围过滤的时候。比如做价格范围过滤。</p>
<p>基本语法：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// range查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="comment">// 这里的gte代表大于等于，gt则代表大于</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">20</span> <span class="comment">// lte代表小于等于，lt则代表小于</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>示例：</p>
<p><img src="/assets/image-20210721172307172.png" alt="image-20210721172307172"></p>
<h3 id="1-3-3-总结"><a href="#1-3-3-总结" class="headerlink" title="1.3.3.总结"></a>1.3.3.总结</h3><p>精确查询常见的有哪些？</p>
<ul>
<li>term查询：根据词条精确匹配，一般搜索keyword类型、数值类型、布尔类型、日期类型字段</li>
<li>range查询：根据数值范围查询，可以是数值、日期的范围</li>
</ul>
<h2 id="1-4-地理坐标查询"><a href="#1-4-地理坐标查询" class="headerlink" title="1.4.地理坐标查询"></a>1.4.地理坐标查询</h2><p>所谓的地理坐标查询，其实就是根据经纬度查询，官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html</a></p>
<p>常见的使用场景包括：</p>
<ul>
<li>携程：搜索我附近的酒店</li>
<li>滴滴：搜索我附近的出租车</li>
<li>微信：搜索我附近的人</li>
</ul>
<p>附近的酒店：</p>
<p><img src="/assets/image-20210721172645103.png" alt="image-20210721172645103"> </p>
<p>附近的车：</p>
<p><img src="/assets/image-20210721172654880.png" alt="image-20210721172654880"> </p>
<h3 id="1-4-1-矩形范围查询"><a href="#1-4-1-矩形范围查询" class="headerlink" title="1.4.1.矩形范围查询"></a>1.4.1.矩形范围查询</h3><p>矩形范围查询，也就是geo_bounding_box查询，查询坐标落在某个矩形范围的所有文档：</p>
<p><img src="/assets/DKV9HZbVS6.gif" alt="DKV9HZbVS6"></p>
<p>查询时，需要指定矩形的<strong>左上</strong>、<strong>右下</strong>两个点的坐标，然后画出一个矩形，落在该矩形内的都是符合条件的点。</p>
<p>语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// geo_bounding_box查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;geo_bounding_box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;top_left&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 左上点</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">31.1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.5</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bottom_right&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 右下点</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">30.9</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.7</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<p>这种并不符合“附近的人”这样的需求，所以我们就不做了。</p>
<h3 id="1-4-2-附近查询"><a href="#1-4-2-附近查询" class="headerlink" title="1.4.2.附近查询"></a>1.4.2.附近查询</h3><p>附近查询，也叫做距离查询（geo_distance）：查询到指定中心点小于某个距离值的所有文档。</p>
<p>换句话来说，在地图上找一个点作为圆心，以指定距离为半径，画一个圆，落在圆内的坐标都算符合条件：</p>
<p><img src="/assets/vZrdKAh19C.gif" alt="vZrdKAh19C"></p>
<p>语法说明：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// geo_distance 查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15km&quot;</span><span class="punctuation">,</span> <span class="comment">// 半径</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.21,121.5&quot;</span> <span class="comment">// 圆心</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>示例：</p>
<p>我们先搜索陆家嘴附近15km的酒店：</p>
<p><img src="/assets/image-20210721175443234.png" alt="image-20210721175443234"></p>
<p>发现共有47家酒店。</p>
<p>然后把半径缩短到3公里：</p>
<p><img src="/assets/image-20210721182031475.png" alt="image-20210721182031475"></p>
<p>可以发现，搜索到的酒店数量减少到了5家。</p>
<h2 id="1-5-复合查询"><a href="#1-5-复合查询" class="headerlink" title="1.5.复合查询"></a>1.5.复合查询</h2><p>复合（compound）查询：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑。常见的有两种：</p>
<ul>
<li>fuction score：算分函数查询，可以控制文档相关性算分，控制文档排名</li>
<li>bool query：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索</li>
</ul>
<h3 id="1-5-1-相关性算分"><a href="#1-5-1-相关性算分" class="headerlink" title="1.5.1.相关性算分"></a>1.5.1.相关性算分</h3><p>当我们利用match查询时，文档结果会根据与搜索词条的关联度打分（_score），返回结果时按照分值降序排列。</p>
<p>例如，我们搜索 “虹桥如家”，结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">17.850193</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;虹桥如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">12.259849</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;外滩如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">11.91091</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;迪士尼如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>



<p>在elasticsearch中，早期使用的打分算法是TF-IDF算法，公式如下：</p>
<p><img src="/assets/image-20210721190152134.png" alt="image-20210721190152134"></p>
<p>在后来的5.1版本升级中，elasticsearch将算法改进为BM25算法，公式如下：</p>
<p><img src="/assets/image-20210721190416214.png" alt="image-20210721190416214"></p>
<p>TF-IDF算法有一各缺陷，就是词条频率越高，文档得分也会越高，单个词条对文档影响较大。而BM25则会让单个词条的算分有一个上限，曲线更加平滑：</p>
<p><img src="/assets/image-20210721190907320.png" alt="image-20210721190907320"></p>
<p>小结：elasticsearch会根据词条和文档的相关度做打分，算法由两种：</p>
<ul>
<li>TF-IDF算法</li>
<li>BM25算法，elasticsearch5.1版本后采用的算法</li>
</ul>
<h3 id="1-5-2-算分函数查询"><a href="#1-5-2-算分函数查询" class="headerlink" title="1.5.2.算分函数查询"></a>1.5.2.算分函数查询</h3><p>根据相关度打分是比较合理的需求，但<strong>合理的不一定是产品经理需要</strong>的。</p>
<p>以百度为例，你搜索的结果中，并不是相关度越高排名越靠前，而是谁掏的钱多排名就越靠前。如图：</p>
<p><img src="/assets/image-20210721191144560.png" alt="image-20210721191144560"></p>
<p>要想认为控制相关性算分，就需要利用elasticsearch中的function score 查询了。</p>
<h4 id="1）语法说明"><a href="#1）语法说明" class="headerlink" title="1）语法说明"></a>1）语法说明</h4><p><img src="/assets/image-20210721191544750.png" alt="image-20210721191544750"></p>
<p>function score 查询中包含四部分内容：</p>
<ul>
<li><strong>原始查询</strong>条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，<strong>原始算分</strong>（query score)</li>
<li><strong>过滤条件</strong>：filter部分，符合该条件的文档才会重新算分</li>
<li><strong>算分函数</strong>：符合filter条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数<ul>
<li>weight：函数结果是常量</li>
<li>field_value_factor：以文档中的某个字段值作为函数结果</li>
<li>random_score：以随机数作为函数结果</li>
<li>script_score：自定义算分函数算法</li>
</ul>
</li>
<li><strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括：<ul>
<li>multiply：相乘</li>
<li>replace：用function score替换query score</li>
<li>其它，例如：sum、avg、max、min</li>
</ul>
</li>
</ul>
<p>function score的运行流程如下：</p>
<ul>
<li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li>
<li>2）根据<strong>过滤条件</strong>，过滤文档</li>
<li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li>
<li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li>
</ul>
<p>因此，其中的关键点是：</p>
<ul>
<li>过滤条件：决定哪些文档的算分被修改</li>
<li>算分函数：决定函数算分的算法</li>
<li>运算模式：决定最终算分结果</li>
</ul>
<h4 id="2）示例"><a href="#2）示例" class="headerlink" title="2）示例"></a>2）示例</h4><p>需求：给“如家”这个品牌的酒店排名靠前一些</p>
<p>翻译一下这个需求，转换为之前说的四个要点：</p>
<ul>
<li>原始条件：不确定，可以任意变化</li>
<li>过滤条件：brand &#x3D; “如家”</li>
<li>算分函数：可以简单粗暴，直接给固定的算分结果，weight</li>
<li>运算模式：比如求和</li>
</ul>
<p>因此最终的DSL语句如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;function_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  .... <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 原始查询，可以是任意条件</span></span><br><span class="line">      <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 算分函数</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 满足的条件，品牌必须是如家</span></span><br><span class="line">            <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">2</span> <span class="comment">// 算分权重为2</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;boost_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sum&quot;</span> <span class="comment">// 加权模式，求和</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>测试，在未添加算分函数时，如家得分如下：</p>
<p><img src="/assets/image-20210721193152520.png" alt="image-20210721193152520"></p>
<p>添加了算分函数后，如家得分就提升了：</p>
<p><img src="/assets/image-20210721193458182.png" alt="image-20210721193458182"></p>
<h4 id="3）小结"><a href="#3）小结" class="headerlink" title="3）小结"></a>3）小结</h4><p>function score query定义的三要素是什么？</p>
<ul>
<li>过滤条件：哪些文档要加分</li>
<li>算分函数：如何计算function score</li>
<li>加权方式：function score 与 query score如何运算</li>
</ul>
<h3 id="1-5-3-布尔查询"><a href="#1-5-3-布尔查询" class="headerlink" title="1.5.3.布尔查询"></a>1.5.3.布尔查询</h3><p>布尔查询是一个或多个查询子句的组合，每一个子句就是一个<strong>子查询</strong>。子查询的组合方式有：</p>
<ul>
<li>must：必须匹配每个子查询，类似“与”</li>
<li>should：选择性匹配子查询，类似“或”</li>
<li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li>
<li>filter：必须匹配，<strong>不参与算分</strong></li>
</ul>
<p>比如在搜索酒店时，除了关键字搜索外，我们还可能根据品牌、价格、城市等字段做过滤：</p>
<p><img src="/assets/image-20210721193822848.png" alt="image-20210721193822848"></p>
<p>每一个不同的字段，其查询的条件、方式都不一样，必须是多个不同的查询，而要组合这些查询，就必须用bool查询了。</p>
<p>需要注意的是，搜索时，参与<strong>打分的字段越多，查询的性能也越差</strong>。因此这种多条件查询时，建议这样做：</p>
<ul>
<li>搜索框的关键字搜索，是全文检索查询，使用must查询，参与算分</li>
<li>其它过滤条件，采用filter查询。不参与算分</li>
</ul>
<h4 id="1）语法示例："><a href="#1）语法示例：" class="headerlink" title="1）语法示例："></a>1）语法示例：</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;皇冠假日&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华美达&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">500</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">45</span> <span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="2）示例-1"><a href="#2）示例-1" class="headerlink" title="2）示例"></a>2）示例</h4><p>需求：搜索名字包含“如家”，价格不高于400，在坐标31.21,121.5周围10km范围内的酒店。</p>
<p>分析：</p>
<ul>
<li>名称搜索，属于全文检索查询，应该参与算分。放到must中</li>
<li>价格不高于400，用range查询，属于过滤条件，不参与算分。放到must_not中</li>
<li>周围10km范围内，用geo_distance查询，属于过滤条件，不参与算分。放到filter中</li>
</ul>
<p><img src="/assets/image-20210721194744183.png" alt="image-20210721194744183"></p>
<h4 id="3）小结-1"><a href="#3）小结-1" class="headerlink" title="3）小结"></a>3）小结</h4><p>bool查询有几种逻辑关系？</p>
<ul>
<li>must：必须匹配的条件，可以理解为“与”</li>
<li>should：选择性匹配的条件，可以理解为“或”</li>
<li>must_not：必须不匹配的条件，不参与打分</li>
<li>filter：必须匹配的条件，不参与打分</li>
</ul>
<h1 id="2-搜索结果处理"><a href="#2-搜索结果处理" class="headerlink" title="2.搜索结果处理"></a>2.搜索结果处理</h1><p>搜索的结果可以按照用户指定的方式去处理或展示。</p>
<h2 id="2-1-排序"><a href="#2-1-排序" class="headerlink" title="2.1.排序"></a>2.1.排序</h2><p>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html">结果排序</a>。可以排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型等。</p>
<h3 id="2-1-1-普通字段排序"><a href="#2-1-1-普通字段排序" class="headerlink" title="2.1.1.普通字段排序"></a>2.1.1.普通字段排序</h3><p>keyword、数值、日期类型排序的语法基本一致。</p>
<p><strong>语法</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span>  <span class="comment">// 排序字段、排序方式ASC、DESC</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>排序条件是一个数组，也就是可以写多个排序条件。按照声明的顺序，当第一个条件相等时，再按照第二个条件排序，以此类推</p>
<p><strong>示例</strong>：</p>
<p>需求描述：酒店数据按照用户评价（score)降序排序，评价相同的按照价格(price)升序排序</p>
<p><img src="/assets/image-20210721195728306.png" alt="image-20210721195728306"></p>
<h3 id="2-1-2-地理坐标排序"><a href="#2-1-2-地理坐标排序" class="headerlink" title="2.1.2.地理坐标排序"></a>2.1.2.地理坐标排序</h3><p>地理坐标排序略有不同。</p>
<p><strong>语法说明</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;FIELD&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;纬度，经度&quot;</span><span class="punctuation">,</span> <span class="comment">// 文档中geo_point类型的字段名、目标坐标点</span></span><br><span class="line">          <span class="attr">&quot;order&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span> <span class="comment">// 排序方式</span></span><br><span class="line">          <span class="attr">&quot;unit&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;km&quot;</span> <span class="comment">// 排序的距离单位</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这个查询的含义是：</p>
<ul>
<li>指定一个坐标，作为目标点</li>
<li>计算每一个文档中，指定字段（必须是geo_point类型）的坐标 到目标点的距离是多少</li>
<li>根据距离排序</li>
</ul>
<p><strong>示例：</strong></p>
<p>需求描述：实现对酒店数据按照到你的位置坐标的距离升序排序</p>
<p>提示：获取你的位置的经纬度的方式：<a href="https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/">https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/</a></p>
<p>假设我的位置是：31.034661，121.612282，寻找我周围距离最近的酒店。</p>
<p><img src="/assets/image-20210721200214690.png" alt="image-20210721200214690"></p>
<h2 id="2-2-分页"><a href="#2-2-分页" class="headerlink" title="2.2.分页"></a>2.2.分页</h2><p>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。elasticsearch中通过修改from、size参数来控制要返回的分页结果：</p>
<ul>
<li>from：从第几个文档开始</li>
<li>size：总共查询几个文档</li>
</ul>
<p>类似于mysql中的<code>limit ?, ?</code></p>
<h3 id="2-2-1-基本的分页"><a href="#2-2-1-基本的分页" class="headerlink" title="2.2.1.基本的分页"></a>2.2.1.基本的分页</h3><p>分页的基本语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="comment">// 期望获取的文档总数</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<h3 id="2-2-2-深度分页问题"><a href="#2-2-2-深度分页问题" class="headerlink" title="2.2.2.深度分页问题"></a>2.2.2.深度分页问题</h3><p>现在，我要查询990~1000的数据，查询逻辑要这么写：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">990</span><span class="punctuation">,</span> <span class="comment">// 分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="comment">// 期望获取的文档总数</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里是查询990开始的数据，也就是 第990~第1000条 数据。</p>
<p>不过，elasticsearch内部分页时，必须先查询 0~1000条，然后截取其中的990 ~ 1000的这10条：</p>
<p><img src="/assets/image-20210721200643029.png" alt="image-20210721200643029"></p>
<p>查询TOP1000，如果es是单点模式，这并无太大影响。</p>
<p>但是elasticsearch将来一定是集群，例如我集群有5个节点，我要查询TOP1000的数据，并不是每个节点查询200条就可以了。</p>
<p>因为节点A的TOP200，在另一个节点可能排到10000名以外了。</p>
<p>因此要想获取整个集群的TOP1000，必须先查询出每个节点的TOP1000，汇总结果后，重新排名，重新截取TOP1000。</p>
<p><img src="/assets/image-20210721201003229.png" alt="image-20210721201003229"></p>
<p>那如果我要查询9900~10000的数据呢？是不是要先查询TOP10000呢？那每个节点都要查询10000条？汇总到内存中？</p>
<p>当查询分页深度较大时，汇总数据过多，对内存和CPU会产生非常大的压力，因此elasticsearch会禁止from+ size 超过10000的请求。</p>
<p>针对深度分页，ES提供了两种解决方案，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html">官方文档</a>：</p>
<ul>
<li>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li>
<li>scroll：原理将排序后的文档id形成快照，保存在内存。官方已经不推荐使用。</li>
</ul>
<h3 id="2-2-3-小结"><a href="#2-2-3-小结" class="headerlink" title="2.2.3.小结"></a>2.2.3.小结</h3><p>分页查询的常见实现方案以及优缺点：</p>
<ul>
<li><p><code>from + size</code>：</p>
<ul>
<li>优点：支持随机翻页</li>
<li>缺点：深度分页问题，默认查询上限（from + size）是10000</li>
<li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索</li>
</ul>
</li>
<li><p><code>after search</code>：</p>
<ul>
<li>优点：没有查询上限（单次查询的size不超过10000）</li>
<li>缺点：只能向后逐页查询，不支持随机翻页</li>
<li>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页</li>
</ul>
</li>
<li><p><code>scroll</code>：</p>
<ul>
<li>优点：没有查询上限（单次查询的size不超过10000）</li>
<li>缺点：会有额外内存消耗，并且搜索结果是非实时的</li>
<li>场景：海量数据的获取和迁移。从ES7.1开始不推荐，建议用 after search方案。</li>
</ul>
</li>
</ul>
<h2 id="2-3-高亮"><a href="#2-3-高亮" class="headerlink" title="2.3.高亮"></a>2.3.高亮</h2><h3 id="2-3-1-高亮原理"><a href="#2-3-1-高亮原理" class="headerlink" title="2.3.1.高亮原理"></a>2.3.1.高亮原理</h3><p>什么是高亮显示呢？</p>
<p>我们在百度，京东搜索时，关键字会变成红色，比较醒目，这叫高亮显示：</p>
<p><img src="/assets/image-20210721202705030.png" alt="image-20210721202705030"></p>
<p>高亮显示的实现分为两步：</p>
<ul>
<li>1）给文档中的所有关键字都添加一个标签，例如<code>&lt;em&gt;</code>标签</li>
<li>2）页面给<code>&lt;em&gt;</code>标签编写CSS样式</li>
</ul>
<h3 id="2-3-2-实现高亮"><a href="#2-3-2-实现高亮" class="headerlink" title="2.3.2.实现高亮"></a>2.3.2.实现高亮</h3><p><strong>高亮的语法</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span> <span class="comment">// 查询条件，高亮一定要使用全文检索查询</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 指定要高亮的字段</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;em&gt;&quot;</span><span class="punctuation">,</span>  <span class="comment">// 用来标记高亮字段的前置标签</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/em&gt;&quot;</span> <span class="comment">// 用来标记高亮字段的后置标签</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>注意：</strong></p>
<ul>
<li>高亮是对关键字高亮，因此<strong>搜索条件必须带有关键字</strong>，而不能是范围这样的查询。</li>
<li>默认情况下，<strong>高亮的字段，必须与搜索指定的字段一致</strong>，否则无法高亮</li>
<li>如果要对非搜索字段高亮，则需要添加一个属性：required_field_match&#x3D;false</li>
</ul>
<p><strong>示例</strong>：</p>
<p><img src="/assets/image-20210721203349633.png" alt="image-20210721203349633"></p>
<h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4.总结"></a>2.4.总结</h2><p>查询的DSL是一个大的JSON对象，包含下列属性：</p>
<ul>
<li>query：查询条件</li>
<li>from和size：分页条件</li>
<li>sort：排序条件</li>
<li>highlight：高亮条件</li>
</ul>
<p>示例：</p>
<p><img src="/assets/image-20210721203657850.png" alt="image-20210721203657850"></p>
<h1 id="3-RestClient查询文档"><a href="#3-RestClient查询文档" class="headerlink" title="3.RestClient查询文档"></a>3.RestClient查询文档</h1><p>文档的查询同样适用昨天学习的 RestHighLevelClient对象，基本步骤包括：</p>
<ul>
<li>1）准备Request对象</li>
<li>2）准备请求参数</li>
<li>3）发起请求</li>
<li>4）解析响应</li>
</ul>
<h2 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1.快速入门"></a>3.1.快速入门</h2><p>我们以match_all查询为例</p>
<h3 id="3-1-1-发起查询请求"><a href="#3-1-1-发起查询请求" class="headerlink" title="3.1.1.发起查询请求"></a>3.1.1.发起查询请求</h3><p><img src="/assets/image-20210721203950559.png" alt="image-20210721203950559"></p>
<p>代码解读：</p>
<ul>
<li><p>第一步，创建<code>SearchRequest</code>对象，指定索引库名</p>
</li>
<li><p>第二步，利用<code>request.source()</code>构建DSL，DSL中可以包含查询、分页、排序、高亮等</p>
<ul>
<li><code>query()</code>：代表查询条件，利用<code>QueryBuilders.matchAllQuery()</code>构建一个match_all查询的DSL</li>
</ul>
</li>
<li><p>第三步，利用client.search()发送请求，得到响应</p>
</li>
</ul>
<p>这里关键的API有两个，一个是<code>request.source()</code>，其中包含了查询、排序、分页、高亮等所有功能：</p>
<p><img src="/assets/image-20210721215640790.png" alt="image-20210721215640790"></p>
<p>另一个是<code>QueryBuilders</code>，其中包含match、term、function_score、bool等各种查询：</p>
<p><img src="/assets/image-20210721215729236.png" alt="image-20210721215729236"></p>
<h3 id="3-1-2-解析响应"><a href="#3-1-2-解析响应" class="headerlink" title="3.1.2.解析响应"></a>3.1.2.解析响应</h3><p>响应结果的解析：</p>
<p><img src="/assets/image-20210721214221057.png" alt="image-20210721214221057"></p>
<p>elasticsearch返回的结果是一个JSON字符串，结构包含：</p>
<ul>
<li><code>hits</code>：命中的结果<ul>
<li><code>total</code>：总条数，其中的value是具体的总条数值</li>
<li><code>max_score</code>：所有结果中得分最高的文档的相关性算分</li>
<li><code>hits</code>：搜索结果的文档数组，其中的每个文档都是一个json对象<ul>
<li><code>_source</code>：文档中的原始数据，也是json对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>因此，我们解析响应结果，就是逐层解析JSON字符串，流程如下：</p>
<ul>
<li><code>SearchHits</code>：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果<ul>
<li><code>SearchHits#getTotalHits().value</code>：获取总条数信息</li>
<li><code>SearchHits#getHits()</code>：获取SearchHit数组，也就是文档数组<ul>
<li><code>SearchHit#getSourceAsString()</code>：获取文档结果中的_source，也就是原始的json文档数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-1-3-完整代码"><a href="#3-1-3-完整代码" class="headerlink" title="3.1.3.完整代码"></a>3.1.3.完整代码</h3><p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    request.source()</span><br><span class="line">        .query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="comment">// 4.1.获取总条数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.2.文档数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="comment">// 4.3.遍历</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 获取文档source</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1-4-小结"><a href="#3-1-4-小结" class="headerlink" title="3.1.4.小结"></a>3.1.4.小结</h3><p>查询的基本步骤是：</p>
<ol>
<li><p>创建SearchRequest对象</p>
</li>
<li><p>准备Request.source()，也就是DSL。</p>
<p>① QueryBuilders来构建查询条件</p>
<p>② 传入Request.source() 的 query() 方法</p>
</li>
<li><p>发送请求，得到结果</p>
</li>
<li><p>解析结果（参考JSON结果，从外到内，逐层解析）</p>
</li>
</ol>
<h2 id="3-2-match查询"><a href="#3-2-match查询" class="headerlink" title="3.2.match查询"></a>3.2.match查询</h2><p>全文检索的match和multi_match查询与match_all的API基本一致。差别是查询条件，也就是query的部分。</p>
<p><img src="/assets/image-20210721215923060.png" alt="image-20210721215923060"> </p>
<p>因此，Java代码上的差异主要是request.source().query()中的参数了。同样是利用QueryBuilders提供的方法：</p>
<p><img src="/assets/image-20210721215843099.png" alt="image-20210721215843099"> </p>
<p>而结果解析代码则完全一致，可以抽取并共享。</p>
<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    request.source()</span><br><span class="line">        .query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="3-3-精确查询"><a href="#3-3-精确查询" class="headerlink" title="3.3.精确查询"></a>3.3.精确查询</h2><p>精确查询主要是两者：</p>
<ul>
<li>term：词条精确匹配</li>
<li>range：范围查询</li>
</ul>
<p>与之前的查询相比，差异同样在查询条件，其它都一样。</p>
<p>查询条件构造的API如下：</p>
<p><img src="/assets/image-20210721220305140.png" alt="image-20210721220305140"> </p>
<h2 id="3-4-布尔查询"><a href="#3-4-布尔查询" class="headerlink" title="3.4.布尔查询"></a>3.4.布尔查询</h2><p>布尔查询是用must、must_not、filter等方式组合其它查询，代码示例如下：</p>
<p><img src="/assets/image-20210721220927286.png" alt="image-20210721220927286"></p>
<p>可以看到，API与其它查询的差别同样是在查询条件的构建，QueryBuilders，结果解析等其他代码完全不变。</p>
<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBool</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    <span class="comment">// 2.1.准备BooleanQuery</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 2.2.添加term</span></span><br><span class="line">    boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;杭州&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.3.添加range</span></span><br><span class="line">    boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">250</span>));</span><br><span class="line"></span><br><span class="line">    request.source().query(boolQuery);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-5-排序、分页"><a href="#3-5-排序、分页" class="headerlink" title="3.5.排序、分页"></a>3.5.排序、分页</h2><p>搜索结果的排序和分页是与query同级的参数，因此同样是使用request.source()来设置。</p>
<p>对应的API如下：</p>
<p><img src="/assets/image-20210721221121266.png" alt="image-20210721221121266"></p>
<p>完整代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPageAndSort</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 页码，每页大小</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> <span class="number">1</span>, size = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    <span class="comment">// 2.1.query</span></span><br><span class="line">    request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">// 2.2.排序 sort</span></span><br><span class="line">    request.source().sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC);</span><br><span class="line">    <span class="comment">// 2.3.分页 from、size</span></span><br><span class="line">    request.source().from((page - <span class="number">1</span>) * size).size(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-6-高亮"><a href="#3-6-高亮" class="headerlink" title="3.6.高亮"></a>3.6.高亮</h2><p>高亮的代码与之前代码差异较大，有两点：</p>
<ul>
<li>查询的DSL：其中除了查询条件，还需要添加高亮条件，同样是与query同级。</li>
<li>结果解析：结果除了要解析_source文档数据，还要解析高亮结果</li>
</ul>
<h3 id="3-6-1-高亮请求构建"><a href="#3-6-1-高亮请求构建" class="headerlink" title="3.6.1.高亮请求构建"></a>3.6.1.高亮请求构建</h3><p>高亮请求的构建API如下：</p>
<p><img src="/assets/image-20210721221744883.png" alt="image-20210721221744883"></p>
<p>上述代码省略了查询条件部分，但是大家不要忘了：高亮查询必须使用全文检索查询，并且要有搜索关键字，将来才可以对关键字高亮。</p>
<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    <span class="comment">// 2.1.query</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.2.高亮</span></span><br><span class="line">    request.source().highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>().field(<span class="string">&quot;name&quot;</span>).requireFieldMatch(<span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-6-2-高亮结果解析"><a href="#3-6-2-高亮结果解析" class="headerlink" title="3.6.2.高亮结果解析"></a>3.6.2.高亮结果解析</h3><p>高亮的结果与查询的文档结果默认是分离的，并不在一起。</p>
<p>因此解析高亮的代码需要额外处理：</p>
<p><img src="/assets/image-20210721222057212.png" alt="image-20210721222057212"></p>
<p>代码解读：</p>
<ul>
<li>第一步：从结果中获取source。hit.getSourceAsString()，这部分是非高亮结果，json字符串。还需要反序列为HotelDoc对象</li>
<li>第二步：获取高亮结果。hit.getHighlightFields()，返回值是一个Map，key是高亮字段名称，值是HighlightField对象，代表高亮值</li>
<li>第三步：从map中根据高亮字段名称，获取高亮字段值对象HighlightField</li>
<li>第四步：从HighlightField中获取Fragments，并且转为字符串。这部分就是真正的高亮字符串了</li>
<li>第五步：用高亮的结果替换HotelDoc中的非高亮结果</li>
</ul>
<p>完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="comment">// 4.1.获取总条数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.2.文档数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="comment">// 4.3.遍历</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 获取文档source</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        <span class="comment">// 获取高亮结果</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(highlightFields)) &#123;</span><br><span class="line">            <span class="comment">// 根据字段名获取高亮结果</span></span><br><span class="line">            <span class="type">HighlightField</span> <span class="variable">highlightField</span> <span class="operator">=</span> highlightFields.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (highlightField != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取高亮值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> highlightField.getFragments()[<span class="number">0</span>].string();</span><br><span class="line">                <span class="comment">// 覆盖非高亮结果</span></span><br><span class="line">                hotelDoc.setName(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="4-黑马旅游案例"><a href="#4-黑马旅游案例" class="headerlink" title="4.黑马旅游案例"></a>4.黑马旅游案例</h1><p>下面，我们通过黑马旅游的案例来实战演练下之前学习的知识。</p>
<p>我们实现四部分功能：</p>
<ul>
<li>酒店搜索和分页</li>
<li>酒店结果过滤</li>
<li>我周边的酒店</li>
<li>酒店竞价排名</li>
</ul>
<p>启动我们提供的hotel-demo项目，其默认端口是8089，访问<a href="http://localhost:8090，就能看到项目页面了：">http://localhost:8090，就能看到项目页面了：</a></p>
<p><img src="/assets/image-20210721223159598.png" alt="image-20210721223159598"></p>
<h2 id="4-1-酒店搜索和分页"><a href="#4-1-酒店搜索和分页" class="headerlink" title="4.1.酒店搜索和分页"></a>4.1.酒店搜索和分页</h2><p>案例需求：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页</p>
<h3 id="4-1-1-需求分析"><a href="#4-1-1-需求分析" class="headerlink" title="4.1.1.需求分析"></a>4.1.1.需求分析</h3><p>在项目的首页，有一个大大的搜索框，还有分页按钮：</p>
<p><img src="/assets/image-20210721223859419.png" alt="image-20210721223859419"></p>
<p>点击搜索按钮，可以看到浏览器控制台发出了请求：</p>
<p><img src="/assets/image-20210721224033789.png" alt="image-20210721224033789"></p>
<p>请求参数如下：</p>
<p><img src="/assets/image-20210721224112708.png" alt="image-20210721224112708"></p>
<p>由此可以知道，我们这个请求的信息如下：</p>
<ul>
<li>请求方式：POST</li>
<li>请求路径：&#x2F;hotel&#x2F;list</li>
<li>请求参数：JSON对象，包含4个字段：<ul>
<li>key：搜索关键字</li>
<li>page：页码</li>
<li>size：每页大小</li>
<li>sortBy：排序，目前暂不实现</li>
</ul>
</li>
<li>返回值：分页查询，需要返回分页结果PageResult，包含两个属性：<ul>
<li><code>total</code>：总条数</li>
<li><code>List&lt;HotelDoc&gt;</code>：当前页的数据</li>
</ul>
</li>
</ul>
<p>因此，我们实现业务的流程如下：</p>
<ul>
<li>步骤一：定义实体类，接收请求参数的JSON对象</li>
<li>步骤二：编写controller，接收页面的请求</li>
<li>步骤三：编写业务实现，利用RestHighLevelClient实现搜索、分页</li>
</ul>
<h3 id="4-1-2-定义实体类"><a href="#4-1-2-定义实体类" class="headerlink" title="4.1.2.定义实体类"></a>4.1.2.定义实体类</h3><p>实体类有两个，一个是前端的请求参数实体，一个是服务端应该返回的响应结果实体。</p>
<p>1）请求参数</p>
<p>前端请求的json结构如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;搜索关键字&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sortBy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>因此，我们在<code>cn.itcast.hotel.pojo</code>包下定义一个实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2）返回值</p>
<p>分页查询，需要返回分页结果PageResult，包含两个属性：</p>
<ul>
<li><code>total</code>：总条数</li>
<li><code>List&lt;HotelDoc&gt;</code>：当前页的数据</li>
</ul>
<p>因此，我们在<code>cn.itcast.hotel.pojo</code>中定义返回结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;HotelDoc&gt; hotels;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Long total, List&lt;HotelDoc&gt; hotels)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">        <span class="built_in">this</span>.hotels = hotels;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-1-3-定义controller"><a href="#4-1-3-定义controller" class="headerlink" title="4.1.3.定义controller"></a>4.1.3.定义controller</h3><p>定义一个HotelController，声明查询接口，满足下列要求：</p>
<ul>
<li>请求方式：Post</li>
<li>请求路径：&#x2F;hotel&#x2F;list</li>
<li>请求参数：对象，类型为RequestParam</li>
<li>返回值：PageResult，包含两个属性<ul>
<li><code>Long total</code>：总条数</li>
<li><code>List&lt;HotelDoc&gt; hotels</code>：酒店数据</li>
</ul>
</li>
</ul>
<p>因此，我们在<code>cn.itcast.hotel.web</code>中定义HotelController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line">	<span class="comment">// 搜索酒店数据</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.search(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-1-4-实现搜索业务"><a href="#4-1-4-实现搜索业务" class="headerlink" title="4.1.4.实现搜索业务"></a>4.1.4.实现搜索业务</h3><p>我们在controller调用了IHotelService，并没有实现该方法，因此下面我们就在IHotelService中定义方法，并且去实现业务逻辑。</p>
<p>1）在<code>cn.itcast.hotel.service</code>中的<code>IHotelService</code>接口中定义一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据关键字搜索酒店信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 请求参数对象，包含用户输入的关键字 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 酒店文档列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span>;</span><br></pre></td></tr></table></figure>



<p>2）实现搜索业务，肯定离不开RestHighLevelClient，我们需要把它注册到Spring中作为一个Bean。在<code>cn.itcast.hotel</code>中的<code>HotelDemoApplication</code>中声明这个Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestHighLevelClient <span class="title function_">client</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">        HttpHost.create(<span class="string">&quot;http://192.168.150.101:9200&quot;</span>)</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>3）在<code>cn.itcast.hotel.service.impl</code>中的<code>HotelService</code>中实现search方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1.query</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key)) &#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.2.分页</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">        request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果解析</span></span><br><span class="line"><span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="comment">// 4.1.获取总条数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    <span class="comment">// 4.2.文档数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="comment">// 4.3.遍历</span></span><br><span class="line">    List&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 获取文档source</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">		<span class="comment">// 放入集合</span></span><br><span class="line">        hotels.add(hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.4.封装返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="4-2-酒店结果过滤"><a href="#4-2-酒店结果过滤" class="headerlink" title="4.2.酒店结果过滤"></a>4.2.酒店结果过滤</h2><p>需求：添加品牌、城市、星级、价格等过滤功能</p>
<h3 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1.需求分析"></a>4.2.1.需求分析</h3><p>在页面搜索框下面，会有一些过滤项：</p>
<p><img src="/assets/image-20210722091940726.png" alt="image-20210722091940726"></p>
<p>传递的参数如图：</p>
<p><img src="/assets/image-20210722092051994.png" alt="image-20210722092051994"> </p>
<p>包含的过滤条件有：</p>
<ul>
<li>brand：品牌值</li>
<li>city：城市</li>
<li>minPrice~maxPrice：价格范围</li>
<li>starName：星级</li>
</ul>
<p>我们需要做两件事情：</p>
<ul>
<li>修改请求参数的对象RequestParams，接收上述参数</li>
<li>修改业务逻辑，在搜索条件之外，添加一些过滤条件</li>
</ul>
<h3 id="4-2-2-修改实体类"><a href="#4-2-2-修改实体类" class="headerlink" title="4.2.2.修改实体类"></a>4.2.2.修改实体类</h3><p>修改在<code>cn.itcast.hotel.pojo</code>包下的实体类RequestParams：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="comment">// 下面是新增的过滤条件参数</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> Integer minPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-2-3-修改搜索业务"><a href="#4-2-3-修改搜索业务" class="headerlink" title="4.2.3.修改搜索业务"></a>4.2.3.修改搜索业务</h3><p>在HotelService的search方法中，只有一个地方需要修改：requet.source().query( … )其中的查询条件。</p>
<p>在之前的业务中，只有match查询，根据关键字搜索，现在要添加条件过滤，包括：</p>
<ul>
<li>品牌过滤：是keyword类型，用term查询</li>
<li>星级过滤：是keyword类型，用term查询</li>
<li>价格过滤：是数值类型，用range查询</li>
<li>城市过滤：是keyword类型，用term查询</li>
</ul>
<p>多个查询条件组合，肯定是boolean查询来组合：</p>
<ul>
<li>关键字搜索放到must中，参与算分</li>
<li>其它过滤条件放到filter中，不参与算分</li>
</ul>
<p>因为条件构建的逻辑比较复杂，这里先封装为一个函数：</p>
<p><img src="/assets/image-20210722092935453.png" alt="image-20210722092935453"></p>
<p>buildBasicQuery的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建BooleanQuery</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 2.关键字搜索</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key)) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.城市条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.品牌条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.星级条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 6.价格</span></span><br><span class="line">    <span class="keyword">if</span> (params.getMinPrice() != <span class="literal">null</span> &amp;&amp; params.getMaxPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders</span><br><span class="line">                         .rangeQuery(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">                         .gte(params.getMinPrice())</span><br><span class="line">                         .lte(params.getMaxPrice())</span><br><span class="line">                        );</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 7.放入source</span></span><br><span class="line">    request.source().query(boolQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="4-3-我周边的酒店"><a href="#4-3-我周边的酒店" class="headerlink" title="4.3.我周边的酒店"></a>4.3.我周边的酒店</h2><p>需求：我附近的酒店</p>
<h3 id="4-3-1-需求分析"><a href="#4-3-1-需求分析" class="headerlink" title="4.3.1.需求分析"></a>4.3.1.需求分析</h3><p>在酒店列表页的右侧，有一个小地图，点击地图的定位按钮，地图会找到你所在的位置：</p>
<p><img src="/assets/image-20210722093414542.png" alt="image-20210722093414542"> </p>
<p>并且，在前端会发起查询请求，将你的坐标发送到服务端：</p>
<p><img src="/assets/image-20210722093642382.png" alt="image-20210722093642382"> </p>
<p>我们要做的事情就是基于这个location坐标，然后按照距离对周围酒店排序。实现思路如下：</p>
<ul>
<li>修改RequestParams参数，接收location字段</li>
<li>修改search方法业务逻辑，如果location有值，添加根据geo_distance排序的功能</li>
</ul>
<h3 id="4-3-2-修改实体类"><a href="#4-3-2-修改实体类" class="headerlink" title="4.3.2.修改实体类"></a>4.3.2.修改实体类</h3><p>修改在<code>cn.itcast.hotel.pojo</code>包下的实体类RequestParams：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> Integer minPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">    <span class="comment">// 我当前的地理坐标</span></span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="4-3-3-距离排序API"><a href="#4-3-3-距离排序API" class="headerlink" title="4.3.3.距离排序API"></a>4.3.3.距离排序API</h3><p>我们以前学习过排序功能，包括两种：</p>
<ul>
<li>普通字段排序</li>
<li>地理坐标排序</li>
</ul>
<p>我们只讲了普通字段排序对应的java写法。地理坐标排序只学过DSL语法，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;FIELD&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;纬度，经度&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;order&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;unit&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;km&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>对应的java代码示例：</p>
<p><img src="/assets/image-20210722095227059.png" alt="image-20210722095227059"></p>
<h3 id="4-3-4-添加距离排序"><a href="#4-3-4-添加距离排序" class="headerlink" title="4.3.4.添加距离排序"></a>4.3.4.添加距离排序</h3><p>在<code>cn.itcast.hotel.service.impl</code>的<code>HotelService</code>的<code>search</code>方法中，添加一个排序功能：</p>
<p><img src="/assets/image-20210722095902314.png" alt="image-20210722095902314"></p>
<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1.query</span></span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.2.分页</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">        request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.3.排序</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> params.getLocation();</span><br><span class="line">        <span class="keyword">if</span> (location != <span class="literal">null</span> &amp;&amp; !location.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            request.source().sort(SortBuilders</span><br><span class="line">                                  .geoDistanceSort(<span class="string">&quot;location&quot;</span>, <span class="keyword">new</span> <span class="title class_">GeoPoint</span>(location))</span><br><span class="line">                                  .order(SortOrder.ASC)</span><br><span class="line">                                  .unit(DistanceUnit.KILOMETERS)</span><br><span class="line">                                 );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-3-5-排序距离显示"><a href="#4-3-5-排序距离显示" class="headerlink" title="4.3.5.排序距离显示"></a>4.3.5.排序距离显示</h3><p>重启服务后，测试我的酒店功能：</p>
<p><img src="/assets/image-20210722100040674.png" alt="image-20210722100040674"></p>
<p>发现确实可以实现对我附近酒店的排序，不过并没有看到酒店到底距离我多远，这该怎么办？</p>
<p>排序完成后，页面还要获取我附近每个酒店的具体<strong>距离</strong>值，这个值在响应结果中是独立的：</p>
<p><img src="/assets/image-20210722095648542.png" alt="image-20210722095648542"></p>
<p>因此，我们在结果解析阶段，除了解析source部分以外，还要得到sort部分，也就是排序的距离，然后放到响应结果中。</p>
<p>我们要做两件事：</p>
<ul>
<li>修改HotelDoc，添加排序距离字段，用于页面显示</li>
<li>修改HotelService类中的handleResponse方法，添加对sort值的获取</li>
</ul>
<p>1）修改HotelDoc类，添加距离字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="comment">// 排序时的 距离值</span></span><br><span class="line">    <span class="keyword">private</span> Object distance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2）修改HotelService中的handleResponse方法</p>
<p><img src="/assets/image-20210722100613966.png" alt="image-20210722100613966"></p>
<p>重启后测试，发现页面能成功显示距离了：</p>
<p><img src="/assets/image-20210722100838604.png" alt="image-20210722100838604"></p>
<h2 id="4-4-酒店竞价排名"><a href="#4-4-酒店竞价排名" class="headerlink" title="4.4.酒店竞价排名"></a>4.4.酒店竞价排名</h2><p>需求：让指定的酒店在搜索结果中排名置顶</p>
<h3 id="4-4-1-需求分析"><a href="#4-4-1-需求分析" class="headerlink" title="4.4.1.需求分析"></a>4.4.1.需求分析</h3><p>要让指定酒店在搜索结果中排名置顶，效果如图：</p>
<p><img src="/assets/image-20210722100947292.png" alt="image-20210722100947292"></p>
<p>页面会给指定的酒店添加<strong>广告</strong>标记。</p>
<p>那怎样才能让指定的酒店排名置顶呢？</p>
<p>我们之前学习过的function_score查询可以影响算分，算分高了，自然排名也就高了。而function_score包含3个要素：</p>
<ul>
<li>过滤条件：哪些文档要加分</li>
<li>算分函数：如何计算function score</li>
<li>加权方式：function score 与 query score如何运算</li>
</ul>
<p>这里的需求是：让<strong>指定酒店</strong>排名靠前。因此我们需要给这些酒店添加一个标记，这样在过滤条件中就可以<strong>根据这个标记来判断，是否要提高算分</strong>。</p>
<p>比如，我们给酒店添加一个字段：isAD，Boolean类型：</p>
<ul>
<li>true：是广告</li>
<li>false：不是广告</li>
</ul>
<p>这样function_score包含3个要素就很好确定了：</p>
<ul>
<li>过滤条件：判断isAD 是否为true</li>
<li>算分函数：我们可以用最简单暴力的weight，固定加权值</li>
<li>加权方式：可以用默认的相乘，大大提高算分</li>
</ul>
<p>因此，业务的实现步骤包括：</p>
<ol>
<li><p>给HotelDoc类添加isAD字段，Boolean类型</p>
</li>
<li><p>挑选几个你喜欢的酒店，给它的文档数据添加isAD字段，值为true</p>
</li>
<li><p>修改search方法，添加function score功能，给isAD值为true的酒店增加权重</p>
</li>
</ol>
<h3 id="4-4-2-修改HotelDoc实体"><a href="#4-4-2-修改HotelDoc实体" class="headerlink" title="4.4.2.修改HotelDoc实体"></a>4.4.2.修改HotelDoc实体</h3><p>给<code>cn.itcast.hotel.pojo</code>包下的HotelDoc类添加isAD字段：</p>
<p><img src="/assets/image-20210722101908062.png" alt="image-20210722101908062"></p>
<h3 id="4-4-3-添加广告标记"><a href="#4-4-3-添加广告标记" class="headerlink" title="4.4.3.添加广告标记"></a>4.4.3.添加广告标记</h3><p>接下来，我们挑几个酒店，添加isAD字段，设置为true：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /hotel/_update/<span class="number">1902197537</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">2056126831</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">1989806195</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">2056105938</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-4-添加算分函数查询"><a href="#4-4-4-添加算分函数查询" class="headerlink" title="4.4.4.添加算分函数查询"></a>4.4.4.添加算分函数查询</h3><p>接下来我们就要修改查询条件了。之前是用的boolean 查询，现在要改成function_socre查询。</p>
<p>function_score查询结构如下：</p>
<p><img src="/assets/image-20210721191544750.png" alt="image-20210721191544750"></p>
<p>对应的JavaAPI如下：</p>
<p><img src="/assets/image-20210722102850818.png" alt="image-20210722102850818"></p>
<p>我们可以将之前写的boolean查询作为<strong>原始查询</strong>条件放到query中，接下来就是添加<strong>过滤条件</strong>、<strong>算分函数</strong>、<strong>加权模式</strong>了。所以原来的代码依然可以沿用。</p>
<p>修改<code>cn.itcast.hotel.service.impl</code>包下的<code>HotelService</code>类中的<code>buildBasicQuery</code>方法，添加算分函数查询：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建BooleanQuery</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 关键字搜索</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key)) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 城市条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 品牌条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 星级条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 价格</span></span><br><span class="line">    <span class="keyword">if</span> (params.getMinPrice() != <span class="literal">null</span> &amp;&amp; params.getMaxPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders</span><br><span class="line">                         .rangeQuery(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">                         .gte(params.getMinPrice())</span><br><span class="line">                         .lte(params.getMaxPrice())</span><br><span class="line">                        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.算分控制</span></span><br><span class="line">    <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQuery</span> <span class="operator">=</span></span><br><span class="line">        QueryBuilders.functionScoreQuery(</span><br><span class="line">        <span class="comment">// 原始查询，相关性算分的查询</span></span><br><span class="line">        boolQuery,</span><br><span class="line">        <span class="comment">// function score的数组</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line">            <span class="comment">// 其中的一个function score 元素</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                <span class="comment">// 过滤条件</span></span><br><span class="line">                QueryBuilders.termQuery(<span class="string">&quot;isAD&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">                <span class="comment">// 算分函数</span></span><br><span class="line">                ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">    request.source().query(functionScoreQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch day1</title>
    <url>/2024/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E01/</url>
    <content><![CDATA[<h1 id="分布式搜索引擎01"><a href="#分布式搜索引擎01" class="headerlink" title="分布式搜索引擎01"></a>分布式搜索引擎01</h1><p>– elasticsearch基础</p>
<h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-初识elasticsearch"><a href="#1-初识elasticsearch" class="headerlink" title="1.初识elasticsearch"></a>1.初识elasticsearch</h1><h2 id="1-1-了解ES"><a href="#1-1-了解ES" class="headerlink" title="1.1.了解ES"></a>1.1.了解ES</h2><h3 id="1-1-1-elasticsearch的作用"><a href="#1-1-1-elasticsearch的作用" class="headerlink" title="1.1.1.elasticsearch的作用"></a>1.1.1.elasticsearch的作用</h3><p>elasticsearch是一款非常强大的开源搜索引擎，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容</p>
<p>例如：</p>
<ul>
<li><p>在GitHub搜索代码</p>
<p><img src="/assets/image-20210720193623245.png" alt="image-20210720193623245"></p>
</li>
<li><p>在电商网站搜索商品</p>
<p><img src="/assets/image-20210720193633483.png" alt="image-20210720193633483"></p>
</li>
<li><p>在百度搜索答案</p>
<p><img src="/assets/image-20210720193641907.png" alt="image-20210720193641907"></p>
</li>
<li><p>在打车软件搜索附近的车</p>
<p><img src="/assets/image-20210720193648044.png" alt="image-20210720193648044"></p>
</li>
</ul>
<h3 id="1-1-2-ELK技术栈"><a href="#1-1-2-ELK技术栈" class="headerlink" title="1.1.2.ELK技术栈"></a>1.1.2.ELK技术栈</h3><p>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域：</p>
<p><img src="/assets/image-20210720194008781.png" alt="image-20210720194008781"></p>
<p>而elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。</p>
<p><img src="/assets/image-20210720194230265.png" alt="image-20210720194230265"></p>
<h3 id="1-1-3-elasticsearch和lucene"><a href="#1-1-3-elasticsearch和lucene" class="headerlink" title="1.1.3.elasticsearch和lucene"></a>1.1.3.elasticsearch和lucene</h3><p>elasticsearch底层是基于<strong>lucene</strong>来实现的。</p>
<p><strong>Lucene</strong>是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发。官网地址：<a href="https://lucene.apache.org/">https://lucene.apache.org/</a> 。</p>
<p><img src="/assets/image-20210720194547780.png" alt="image-20210720194547780"></p>
<p><strong>elasticsearch</strong>的发展历史：</p>
<ul>
<li>2004年Shay Banon基于Lucene开发了Compass</li>
<li>2010年Shay Banon 重写了Compass，取名为Elasticsearch。</li>
</ul>
<p><img src="/assets/image-20210720195001221.png" alt="image-20210720195001221"></p>
<h3 id="1-1-4-为什么不是其他搜索技术？"><a href="#1-1-4-为什么不是其他搜索技术？" class="headerlink" title="1.1.4.为什么不是其他搜索技术？"></a>1.1.4.为什么不是其他搜索技术？</h3><p>目前比较知名的搜索引擎技术排名：</p>
<p><img src="/assets/image-20210720195142535.png" alt="image-20210720195142535"></p>
<p>虽然在早期，Apache Solr是最主要的搜索引擎技术，但随着发展elasticsearch已经渐渐超越了Solr，独占鳌头：</p>
<p><img src="/assets/image-20210720195306484.png" alt="image-20210720195306484"></p>
<h3 id="1-1-5-总结"><a href="#1-1-5-总结" class="headerlink" title="1.1.5.总结"></a>1.1.5.总结</h3><p>什么是elasticsearch？</p>
<ul>
<li>一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能</li>
</ul>
<p>什么是elastic stack（ELK）？</p>
<ul>
<li>是以elasticsearch为核心的技术栈，包括beats、Logstash、kibana、elasticsearch</li>
</ul>
<p>什么是Lucene？</p>
<ul>
<li>是Apache的开源搜索引擎类库，提供了搜索引擎的核心API</li>
</ul>
<h2 id="1-2-倒排索引"><a href="#1-2-倒排索引" class="headerlink" title="1.2.倒排索引"></a>1.2.倒排索引</h2><p>倒排索引的概念是基于MySQL这样的正向索引而言的。</p>
<h3 id="1-2-1-正向索引"><a href="#1-2-1-正向索引" class="headerlink" title="1.2.1.正向索引"></a>1.2.1.正向索引</h3><p>那么什么是正向索引呢？例如给下表（tb_goods）中的id创建索引：</p>
<p><img src="/assets/image-20210720195531539.png" alt="image-20210720195531539"></p>
<p>如果是根据id查询，那么直接走索引，查询速度非常快。</p>
<p>但如果是基于title做模糊查询，只能是逐行扫描数据，流程如下：</p>
<p>1）用户搜索数据，条件是title符合<code>&quot;%手机%&quot;</code></p>
<p>2）逐行获取数据，比如id为1的数据</p>
<p>3）判断数据中的title是否符合用户搜索条件</p>
<p>4）如果符合则放入结果集，不符合则丢弃。回到步骤1</p>
<p>逐行扫描，也就是全表扫描，随着数据量增加，其查询效率也会越来越低。当数据量达到数百万时，就是一场灾难。</p>
<h3 id="1-2-2-倒排索引"><a href="#1-2-2-倒排索引" class="headerlink" title="1.2.2.倒排索引"></a>1.2.2.倒排索引</h3><p>倒排索引中有两个非常重要的概念：</p>
<ul>
<li>文档（<code>Document</code>）：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li>
<li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li>
</ul>
<p><strong>创建倒排索引</strong>是对正向索引的一种特殊处理，流程如下：</p>
<ul>
<li>将每一个文档的数据利用算法分词，得到一个个词条</li>
<li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li>
<li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li>
</ul>
<p>如图：</p>
<p><img src="/assets/image-20210720200457207.png" alt="image-20210720200457207"></p>
<p>倒排索引的<strong>搜索流程</strong>如下（以搜索”华为手机”为例）：</p>
<p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。</p>
<p>2）对用户输入内容<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。</p>
<p>3）拿着词条在倒排索引中查找，可以得到包含词条的文档id：1、2、3。</p>
<p>4）拿着文档id到正向索引中查找具体文档。</p>
<p>如图：</p>
<p><img src="/assets/image-20210720201115192.png" alt="image-20210720201115192"></p>
<p>虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档id都建立了索引，查询速度非常快！无需全表扫描。</p>
<h3 id="1-2-3-正向和倒排"><a href="#1-2-3-正向和倒排" class="headerlink" title="1.2.3.正向和倒排"></a>1.2.3.正向和倒排</h3><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p>
<ul>
<li><p><strong>正向索引</strong>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。</p>
</li>
<li><p>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是<strong>根据词条找文档的过程</strong>。</p>
</li>
</ul>
<p>是不是恰好反过来了？</p>
<p>那么两者方式的优缺点是什么呢？</p>
<p><strong>正向索引</strong>：</p>
<ul>
<li>优点：<ul>
<li>可以给多个字段创建索引</li>
<li>根据索引字段搜索、排序速度非常快</li>
</ul>
</li>
<li>缺点：<ul>
<li>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</li>
</ul>
</li>
</ul>
<p><strong>倒排索引</strong>：</p>
<ul>
<li>优点：<ul>
<li>根据词条搜索、模糊搜索时，速度非常快</li>
</ul>
</li>
<li>缺点：<ul>
<li>只能给词条创建索引，而不是字段</li>
<li>无法根据字段做排序</li>
</ul>
</li>
</ul>
<h2 id="1-3-es的一些概念"><a href="#1-3-es的一些概念" class="headerlink" title="1.3.es的一些概念"></a>1.3.es的一些概念</h2><p>elasticsearch中有很多独有的概念，与mysql中略有差别，但也有相似之处。</p>
<h3 id="1-3-1-文档和字段"><a href="#1-3-1-文档和字段" class="headerlink" title="1.3.1.文档和字段"></a>1.3.1.文档和字段</h3><p>elasticsearch是面向<strong>文档（Document）</strong>存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中：</p>
<p><img src="/assets/image-20210720202707797.png" alt="image-20210720202707797"></p>
<p>而Json文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列。</p>
<h3 id="1-3-2-索引和映射"><a href="#1-3-2-索引和映射" class="headerlink" title="1.3.2.索引和映射"></a>1.3.2.索引和映射</h3><p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p>
<p>例如：</p>
<ul>
<li>所有用户文档，就可以组织在一起，称为用户的索引；</li>
<li>所有商品的文档，可以组织在一起，称为商品的索引；</li>
<li>所有订单的文档，可以组织在一起，称为订单的索引；</li>
</ul>
<p><img src="/assets/image-20210720203022172.png" alt="image-20210720203022172"></p>
<p>因此，我们可以把索引当做是数据库中的表。</p>
<p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束。</p>
<h3 id="1-3-3-mysql与elasticsearch"><a href="#1-3-3-mysql与elasticsearch" class="headerlink" title="1.3.3.mysql与elasticsearch"></a>1.3.3.mysql与elasticsearch</h3><p>我们统一的把mysql与elasticsearch的概念做一下对比：</p>
<table>
<thead>
<tr>
<th><strong>MySQL</strong></th>
<th><strong>Elasticsearch</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Table</td>
<td>Index</td>
<td>索引(index)，就是文档的集合，类似数据库的表(table)</td>
</tr>
<tr>
<td>Row</td>
<td>Document</td>
<td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td>
</tr>
<tr>
<td>Column</td>
<td>Field</td>
<td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td>
</tr>
<tr>
<td>Schema</td>
<td>Mapping</td>
<td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td>
</tr>
<tr>
<td>SQL</td>
<td>DSL</td>
<td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td>
</tr>
</tbody></table>
<p>是不是说，我们学习了elasticsearch就不再需要mysql了呢？</p>
<p>并不是如此，两者各自有自己的擅长支出：</p>
<ul>
<li><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</p>
</li>
<li><p>Elasticsearch：擅长海量数据的搜索、分析、计算</p>
</li>
</ul>
<p>因此在企业中，往往是两者结合使用：</p>
<ul>
<li>对安全性要求较高的写操作，使用mysql实现</li>
<li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li>
<li>两者再基于某种方式，实现数据的同步，保证一致性</li>
</ul>
<p><img src="/assets/image-20210720203534945.png" alt="image-20210720203534945"></p>
<h2 id="1-4-安装es、kibana"><a href="#1-4-安装es、kibana" class="headerlink" title="1.4.安装es、kibana"></a>1.4.安装es、kibana</h2><h3 id="1-4-1-安装"><a href="#1-4-1-安装" class="headerlink" title="1.4.1.安装"></a>1.4.1.安装</h3><p>参考课前资料：</p>
<p><img src="/assets/image-20210720203805350.png" alt="image-20210720203805350"> </p>
<h3 id="1-4-2-分词器"><a href="#1-4-2-分词器" class="headerlink" title="1.4.2.分词器"></a>1.4.2.分词器</h3><p>参考课前资料：</p>
<p><img src="/assets/image-20210720203805350.png" alt="image-20210720203805350"> </p>
<h3 id="1-4-3-总结"><a href="#1-4-3-总结" class="headerlink" title="1.4.3.总结"></a>1.4.3.总结</h3><p>分词器的作用是什么？</p>
<ul>
<li>创建倒排索引时对文档分词</li>
<li>用户搜索时，对输入的内容分词</li>
</ul>
<p>IK分词器有几种模式？</p>
<ul>
<li>ik_smart：智能切分，粗粒度</li>
<li>ik_max_word：最细切分，细粒度</li>
</ul>
<p>IK分词器如何拓展词条？如何停用词条？</p>
<ul>
<li>利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典</li>
<li>在词典中添加拓展词条或者停用词条</li>
</ul>
<h1 id="2-索引库操作"><a href="#2-索引库操作" class="headerlink" title="2.索引库操作"></a>2.索引库操作</h1><p>索引库就类似数据库表，mapping映射就类似表的结构。</p>
<p>我们要向es中存储数据，必须先创建“库”和“表”。</p>
<h2 id="2-1-mapping映射属性"><a href="#2-1-mapping映射属性" class="headerlink" title="2.1.mapping映射属性"></a>2.1.mapping映射属性</h2><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p>
<ul>
<li>type：字段数据类型，常见的简单类型有：<ul>
<li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li>
<li>数值：long、integer、short、byte、double、float、</li>
<li>布尔：boolean</li>
<li>日期：date</li>
<li>对象：object</li>
</ul>
</li>
<li>index：是否创建索引，默认为true</li>
<li>analyzer：使用哪种分词器</li>
<li>properties：该字段的子字段</li>
</ul>
<p>例如下面的json文档：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">52.1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">99.1</span><span class="punctuation">,</span> <span class="number">99.5</span><span class="punctuation">,</span> <span class="number">98.9</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>对应的每个字段映射（mapping）：</p>
<ul>
<li>age：类型为 integer；参与搜索，因此需要index为true；无需分词器</li>
<li>weight：类型为float；参与搜索，因此需要index为true；无需分词器</li>
<li>isMarried：类型为boolean；参与搜索，因此需要index为true；无需分词器</li>
<li>info：类型为字符串，需要分词，因此是text；参与搜索，因此需要index为true；分词器可以用ik_smart</li>
<li>email：类型为字符串，但是不需要分词，因此是keyword；不参与搜索，因此需要index为false；无需分词器</li>
<li>score：虽然是数组，但是我们只看元素的类型，类型为float；参与搜索，因此需要index为true；无需分词器</li>
<li>name：类型为object，需要定义多个子属性<ul>
<li>name.firstName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</li>
<li>name.lastName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</li>
</ul>
</li>
</ul>
<h2 id="2-2-索引库的CRUD"><a href="#2-2-索引库的CRUD" class="headerlink" title="2.2.索引库的CRUD"></a>2.2.索引库的CRUD</h2><p>这里我们统一使用Kibana编写DSL的方式来演示。</p>
<h3 id="2-2-1-创建索引库和映射"><a href="#2-2-1-创建索引库和映射" class="headerlink" title="2.2.1.创建索引库和映射"></a>2.2.1.创建索引库和映射</h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><ul>
<li>请求方式：PUT</li>
<li>请求路径：&#x2F;索引库名，可以自定义</li>
<li>请求参数：mapping映射</li>
</ul>
<p>格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /索引库名称</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;子字段&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ...略</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">PUT /heima</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;info&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;email&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">        <span class="string">&quot;index&quot;</span>: <span class="string">&quot;falsae&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;firstName&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // ... 略</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-2-查询索引库"><a href="#2-2-2-查询索引库" class="headerlink" title="2.2.2.查询索引库"></a>2.2.2.查询索引库</h3><p><strong>基本语法</strong>：</p>
<ul>
<li><p>请求方式：GET</p>
</li>
<li><p>请求路径：&#x2F;索引库名</p>
</li>
<li><p>请求参数：无</p>
</li>
</ul>
<p><strong>格式</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /索引库名</span><br></pre></td></tr></table></figure>



<p><strong>示例</strong>：</p>
<p><img src="/assets/image-20210720211019329.png" alt="image-20210720211019329"></p>
<h3 id="2-2-3-修改索引库"><a href="#2-2-3-修改索引库" class="headerlink" title="2.2.3.修改索引库"></a>2.2.3.修改索引库</h3><p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改mapping</strong>。</p>
<p>虽然无法修改mapping中已有的字段，但是却允许添加新的字段到mapping中，因为不会对倒排索引产生影响。</p>
<p><strong>语法说明</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /索引库名/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;新字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>示例</strong>：</p>
<p><img src="/assets/image-20210720212357390.png" alt="image-20210720212357390"></p>
<h3 id="2-2-4-删除索引库"><a href="#2-2-4-删除索引库" class="headerlink" title="2.2.4.删除索引库"></a>2.2.4.删除索引库</h3><p><strong>语法：</strong></p>
<ul>
<li><p>请求方式：DELETE</p>
</li>
<li><p>请求路径：&#x2F;索引库名</p>
</li>
<li><p>请求参数：无</p>
</li>
</ul>
<p><strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /索引库名</span><br></pre></td></tr></table></figure>

<p>在kibana中测试：</p>
<p><img src="/assets/image-20210720212123420.png" alt="image-20210720212123420"></p>
<h3 id="2-2-5-总结"><a href="#2-2-5-总结" class="headerlink" title="2.2.5.总结"></a>2.2.5.总结</h3><p>索引库操作有哪些？</p>
<ul>
<li>创建索引库：PUT &#x2F;索引库名</li>
<li>查询索引库：GET &#x2F;索引库名</li>
<li>删除索引库：DELETE &#x2F;索引库名</li>
<li>添加字段：PUT &#x2F;索引库名&#x2F;_mapping</li>
</ul>
<h1 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3.文档操作"></a>3.文档操作</h1><h2 id="3-1-新增文档"><a href="#3-1-新增文档" class="headerlink" title="3.1.新增文档"></a>3.1.新增文档</h2><p><strong>语法：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;子属性1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;子属性2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>响应：</strong></p>
<p><img src="/assets/image-20210720212933362.png" alt="image-20210720212933362"></p>
<h2 id="3-2-查询文档"><a href="#3-2-查询文档" class="headerlink" title="3.2.查询文档"></a>3.2.查询文档</h2><p>根据rest风格，新增是post，查询应该是get，不过查询一般都需要条件，这里我们把文档id带上。</p>
<p><strong>语法：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名称<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>通过kibana查看数据：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>查看结果：</strong></p>
<p><img src="/assets/image-20210720213345003.png" alt="image-20210720213345003"></p>
<h2 id="3-3-删除文档"><a href="#3-3-删除文档" class="headerlink" title="3.3.删除文档"></a>3.3.删除文档</h2><p>删除使用DELETE请求，同样，需要根据id进行删除：</p>
<p><strong>语法：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DELETE</span> /&#123;索引库名&#125;/_doc/id值</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 根据id删除数据</span><br><span class="line">DELETE /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p><img src="/assets/image-20210720213634918.png" alt="image-20210720213634918"></p>
<h2 id="3-4-修改文档"><a href="#3-4-修改文档" class="headerlink" title="3.4.修改文档"></a>3.4.修改文档</h2><p>修改有两种方式：</p>
<ul>
<li>全量修改：直接覆盖原来的文档</li>
<li>增量修改：修改文档中的部分字段</li>
</ul>
<h3 id="3-4-1-全量修改"><a href="#3-4-1-全量修改" class="headerlink" title="3.4.1.全量修改"></a>3.4.1.全量修改</h3><p>全量修改是覆盖原来的文档，其本质是：</p>
<ul>
<li>根据指定的id删除文档</li>
<li>新增一个相同id的文档</li>
</ul>
<p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p>
<p><strong>语法：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /heima/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员高级Java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zy@itcast.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-2-增量修改"><a href="#3-4-2-增量修改" class="headerlink" title="3.4.2.增量修改"></a>3.4.2.增量修改</h3><p>增量修改是只修改指定id匹配的文档中的部分字段。</p>
<p><strong>语法：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_update/文档id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新的值&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /heima/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhaoYun@itcast.cn&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5.总结"></a>3.5.总结</h2><p>文档操作有哪些？</p>
<ul>
<li>创建文档：POST &#x2F;{索引库名}&#x2F;_doc&#x2F;文档id   { json文档 }</li>
<li>查询文档：GET &#x2F;{索引库名}&#x2F;_doc&#x2F;文档id</li>
<li>删除文档：DELETE &#x2F;{索引库名}&#x2F;_doc&#x2F;文档id</li>
<li>修改文档：<ul>
<li>全量修改：PUT &#x2F;{索引库名}&#x2F;_doc&#x2F;文档id { json文档 }</li>
<li>增量修改：POST &#x2F;{索引库名}&#x2F;_update&#x2F;文档id { “doc”: {字段}}</li>
</ul>
</li>
</ul>
<h1 id="4-RestAPI"><a href="#4-RestAPI" class="headerlink" title="4.RestAPI"></a>4.RestAPI</h1><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p>
<p>其中的Java Rest Client又包括两种：</p>
<ul>
<li>Java Low Level Rest Client</li>
<li>Java High Level Rest Client</li>
</ul>
<p><img src="/assets/image-20210720214555863.png" alt="image-20210720214555863"></p>
<p>我们学习的是Java HighLevel Rest Client客户端API</p>
<h2 id="4-0-导入Demo工程"><a href="#4-0-导入Demo工程" class="headerlink" title="4.0.导入Demo工程"></a>4.0.导入Demo工程</h2><h3 id="4-0-1-导入数据"><a href="#4-0-1-导入数据" class="headerlink" title="4.0.1.导入数据"></a>4.0.1.导入数据</h3><p>首先导入课前资料提供的数据库数据：</p>
<p><img src="/assets/image-20210720220400297.png" alt="image-20210720220400297"> </p>
<p>数据结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_hotel` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;酒店id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;酒店名称；例：7天酒店&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;酒店地址；例：航头路&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;酒店价格；例：329&#x27;</span>,</span><br><span class="line">  `score` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;酒店评分；例：45，就是4.5分&#x27;</span>,</span><br><span class="line">  `brand` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;酒店品牌；例：如家&#x27;</span>,</span><br><span class="line">  `city` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;所在城市；例：上海&#x27;</span>,</span><br><span class="line">  `star_name` <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;酒店星级，从低到高分别是：1星到5星，1钻到5钻&#x27;</span>,</span><br><span class="line">  `business` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商圈；例：虹桥&#x27;</span>,</span><br><span class="line">  `latitude` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;纬度；例：31.2497&#x27;</span>,</span><br><span class="line">  `longitude` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;经度；例：120.3925&#x27;</span>,</span><br><span class="line">  `pic` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;酒店图片；例:/img/1.jpg&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>



<h3 id="4-0-2-导入项目"><a href="#4-0-2-导入项目" class="headerlink" title="4.0.2.导入项目"></a>4.0.2.导入项目</h3><p>然后导入课前资料提供的项目:</p>
<p><img src="/assets/image-20210720220503411.png" alt="image-20210720220503411"> </p>
<p>项目结构如图：</p>
<p><img src="/assets/image-20210720220647541.png" alt="image-20210720220647541"></p>
<h3 id="4-0-3-mapping映射分析"><a href="#4-0-3-mapping映射分析" class="headerlink" title="4.0.3.mapping映射分析"></a>4.0.3.mapping映射分析</h3><p>创建索引库，最关键的是mapping映射，而mapping映射要考虑的信息包括：</p>
<ul>
<li>字段名</li>
<li>字段数据类型</li>
<li>是否参与搜索</li>
<li>是否需要分词</li>
<li>如果分词，分词器是什么？</li>
</ul>
<p>其中：</p>
<ul>
<li>字段名、字段数据类型，可以参考数据表结构的名称和类型</li>
<li>是否参与搜索要分析业务来判断，例如图片地址，就无需参与搜索</li>
<li>是否分词呢要看内容，内容如果是一个整体就无需分词，反之则要分词</li>
<li>分词器，我们可以统一使用ik_max_word</li>
</ul>
<p>来看下酒店数据的索引库结构:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;business&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>几个特殊字段说明：</p>
<ul>
<li>location：地理坐标，里面包含精度、纬度</li>
<li>all：一个组合字段，其目的是将多字段的值 利用copy_to合并，提供给用户搜索</li>
</ul>
<p>地理坐标说明：</p>
<p><img src="/assets/image-20210720222110126.png" alt="image-20210720222110126"></p>
<p>copy_to说明：</p>
<p><img src="/assets/image-20210720222221516.png" alt="image-20210720222221516"></p>
<h3 id="4-0-4-初始化RestClient"><a href="#4-0-4-初始化RestClient" class="headerlink" title="4.0.4.初始化RestClient"></a>4.0.4.初始化RestClient</h3><p>在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为RestHighLevelClient的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。</p>
<p>分为三步：</p>
<p>1）引入es的RestHighLevelClient依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2）因为SpringBoot默认的ES版本是7.6.2，所以我们需要覆盖默认的ES版本：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3）初始化RestHighLevelClient：</p>
<p>初始化的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">        HttpHost.create(<span class="string">&quot;http://192.168.150.101:9200&quot;</span>)</span><br><span class="line">));</span><br></pre></td></tr></table></figure>



<p>这里为了单元测试方便，我们创建一个测试类HotelIndexTest，然后将初始化的代码编写在@BeforeEach方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.150.101:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="4-1-创建索引库"><a href="#4-1-创建索引库" class="headerlink" title="4.1.创建索引库"></a>4.1.创建索引库</h2><h3 id="4-1-1-代码解读"><a href="#4-1-1-代码解读" class="headerlink" title="4.1.1.代码解读"></a>4.1.1.代码解读</h3><p>创建索引库的API如下：</p>
<p><img src="/assets/image-20210720223049408.png" alt="image-20210720223049408"></p>
<p>代码分为三步：</p>
<ul>
<li>1）创建Request对象。因为是创建索引库的操作，因此Request是CreateIndexRequest。</li>
<li>2）添加请求参数，其实就是DSL的JSON参数部分。因为json字符串很长，这里是定义了静态字符串常量MAPPING_TEMPLATE，让代码看起来更加优雅。</li>
<li>3）发送请求，client.indices()方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。</li>
</ul>
<h3 id="4-1-2-完整示例"><a href="#4-1-2-完整示例" class="headerlink" title="4.1.2.完整示例"></a>4.1.2.完整示例</h3><p>在hotel-demo的cn.itcast.hotel.constants包下，创建一个类，定义mapping映射的JSON字符串常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelConstants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAPPING_TEMPLATE</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;address\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;score\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;city\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;starName\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;business\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;location\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;pic\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      \&quot;all\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在hotel-demo中的HotelIndexTest测试类中，编写单元测试，实现创建索引：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request对象</span></span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备请求的参数：DSL语句</span></span><br><span class="line">    request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-2-删除索引库"><a href="#4-2-删除索引库" class="headerlink" title="4.2.删除索引库"></a>4.2.删除索引库</h2><p>删除索引库的DSL语句非常简单：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /hotel</span><br></pre></td></tr></table></figure>

<p>与创建索引库相比：</p>
<ul>
<li>请求方式从PUT变为DELTE</li>
<li>请求路径不变</li>
<li>无请求参数</li>
</ul>
<p>所以代码的差异，注意体现在Request对象上。依然是三步走：</p>
<ul>
<li>1）创建Request对象。这次是DeleteIndexRequest对象</li>
<li>2）准备参数。这里是无参</li>
<li>3）发送请求。改用delete方法</li>
</ul>
<p>在hotel-demo中的HotelIndexTest测试类中，编写单元测试，实现删除索引：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request对象</span></span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-3-判断索引库是否存在"><a href="#4-3-判断索引库是否存在" class="headerlink" title="4.3.判断索引库是否存在"></a>4.3.判断索引库是否存在</h2><p>判断索引库是否存在，本质就是查询，对应的DSL是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel</span><br></pre></td></tr></table></figure>



<p>因此与删除的Java代码流程是类似的。依然是三步走：</p>
<ul>
<li>1）创建Request对象。这次是GetIndexRequest对象</li>
<li>2）准备参数。这里是无参</li>
<li>3）发送请求。改用exists方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testExistsHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.创建Request对象</span></span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 3.输出</span></span><br><span class="line">    System.err.println(exists ? <span class="string">&quot;索引库已经存在！&quot;</span> : <span class="string">&quot;索引库不存在！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4.总结"></a>4.4.总结</h2><p>JavaRestClient操作elasticsearch的流程基本类似。核心是client.indices()方法来获取索引库的操作对象。</p>
<p>索引库操作的基本步骤：</p>
<ul>
<li>初始化RestHighLevelClient</li>
<li>创建XxxIndexRequest。XXX是Create、Get、Delete</li>
<li>准备DSL（ Create时需要，其它是无参）</li>
<li>发送请求。调用RestHighLevelClient#indices().xxx()方法，xxx是create、exists、delete</li>
</ul>
<h1 id="5-RestClient操作文档"><a href="#5-RestClient操作文档" class="headerlink" title="5.RestClient操作文档"></a>5.RestClient操作文档</h1><p>为了与索引库操作分离，我们再次参加一个测试类，做两件事情：</p>
<ul>
<li>初始化RestHighLevelClient</li>
<li>我们的酒店数据在数据库，需要利用IHotelService去查询，所以注入这个接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.pojo.Hotel;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.150.101:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="5-1-新增文档"><a href="#5-1-新增文档" class="headerlink" title="5.1.新增文档"></a>5.1.新增文档</h2><p>我们要将数据库的酒店数据查询出来，写入elasticsearch中。</p>
<h3 id="5-1-1-索引库实体类"><a href="#5-1-1-索引库实体类" class="headerlink" title="5.1.1.索引库实体类"></a>5.1.1.索引库实体类</h3><p>数据库查询后的结果是一个Hotel类型的对象。结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hotel</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String longitude;</span><br><span class="line">    <span class="keyword">private</span> String latitude;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与我们的索引库结构存在差异：</p>
<ul>
<li>longitude和latitude需要合并为location</li>
</ul>
<p>因此，我们需要定义一个新的类型，与索引库结构吻合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="5-1-2-语法说明"><a href="#5-1-2-语法说明" class="headerlink" title="5.1.2.语法说明"></a>5.1.2.语法说明</h3><p>新增文档的DSL语句如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>对应的java代码如图：</p>
<p><img src="/assets/image-20210720230027240.png" alt="image-20210720230027240"></p>
<p>可以看到与创建索引库类似，同样是三步走：</p>
<ul>
<li>1）创建Request对象</li>
<li>2）准备请求参数，也就是DSL中的JSON文档</li>
<li>3）发送请求</li>
</ul>
<p>变化的地方在于，这里直接使用client.xxx()的API，不再需要client.indices()了。</p>
<h3 id="5-1-3-完整代码"><a href="#5-1-3-完整代码" class="headerlink" title="5.1.3.完整代码"></a>5.1.3.完整代码</h3><p>我们导入酒店数据，基本流程一致，但是需要考虑几点变化：</p>
<ul>
<li>酒店数据来自于数据库，我们需要先查询出来，得到hotel对象</li>
<li>hotel对象需要转为HotelDoc对象</li>
<li>HotelDoc需要序列化为json格式</li>
</ul>
<p>因此，代码整体步骤如下：</p>
<ul>
<li>1）根据id查询酒店数据Hotel</li>
<li>2）将Hotel封装为HotelDoc</li>
<li>3）将HotelDoc序列化为JSON</li>
<li>4）创建IndexRequest，指定索引库名和id</li>
<li>5）准备请求参数，也就是JSON文档</li>
<li>6）发送请求</li>
</ul>
<p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.根据id查询酒店数据</span></span><br><span class="line">    <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">61083L</span>);</span><br><span class="line">    <span class="comment">// 2.转换为文档类型</span></span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">    <span class="comment">// 3.将HotelDoc转json</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(hotelDoc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.准备Request对象</span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());</span><br><span class="line">    <span class="comment">// 2.准备Json文档</span></span><br><span class="line">    request.source(json, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="5-2-查询文档"><a href="#5-2-查询文档" class="headerlink" title="5.2.查询文档"></a>5.2.查询文档</h2><h3 id="5-2-1-语法说明"><a href="#5-2-1-语法说明" class="headerlink" title="5.2.1.语法说明"></a>5.2.1.语法说明</h3><p>查询的DSL语句如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /hotel/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>非常简单，因此代码大概分两步：</p>
<ul>
<li>准备Request对象</li>
<li>发送请求</li>
</ul>
<p>不过查询的目的是得到结果，解析为HotelDoc，因此难点是结果的解析。完整代码如下：</p>
<p><img src="/assets/image-20210720230811674.png" alt="image-20210720230811674"></p>
<p>可以看到，结果是一个JSON，其中文档放在一个<code>_source</code>属性中，因此解析就是拿到<code>_source</code>，反序列化为Java对象即可。</p>
<p>与之前类似，也是三步走：</p>
<ul>
<li>1）准备Request对象。这次是查询，所以是GetRequest</li>
<li>2）发送请求，得到结果。因为是查询，这里调用client.get()方法</li>
<li>3）解析结果，就是对JSON做反序列化</li>
</ul>
<h3 id="5-2-2-完整代码"><a href="#5-2-2-完整代码" class="headerlink" title="5.2.2.完整代码"></a>5.2.2.完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61082&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求，得到响应</span></span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 3.解析响应结果</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line"></span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">    System.out.println(hotelDoc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="5-3-删除文档"><a href="#5-3-删除文档" class="headerlink" title="5.3.删除文档"></a>5.3.删除文档</h2><p>删除的DSL为是这样的：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /hotel/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>与查询相比，仅仅是请求方式从DELETE变成GET，可以想象Java代码应该依然是三步走：</p>
<ul>
<li>1）准备Request对象，因为是删除，这次是DeleteRequest对象。要指定索引库名和id</li>
<li>2）准备参数，无参</li>
<li>3）发送请求。因为是删除，所以是client.delete()方法</li>
</ul>
<p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61083&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.发送请求</span></span><br><span class="line">    client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="5-4-修改文档"><a href="#5-4-修改文档" class="headerlink" title="5.4.修改文档"></a>5.4.修改文档</h2><h3 id="5-4-1-语法说明"><a href="#5-4-1-语法说明" class="headerlink" title="5.4.1.语法说明"></a>5.4.1.语法说明</h3><p>修改我们讲过两种方式：</p>
<ul>
<li>全量修改：本质是先根据id删除，再新增</li>
<li>增量修改：修改文档中的指定字段值</li>
</ul>
<p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：</p>
<ul>
<li>如果新增时，ID已经存在，则修改</li>
<li>如果新增时，ID不存在，则新增</li>
</ul>
<p>这里不再赘述，我们主要关注增量修改。</p>
<p>代码示例如图：</p>
<p><img src="/assets/image-20210720231040875.png" alt="image-20210720231040875"></p>
<p>与之前类似，也是三步走：</p>
<ul>
<li>1）准备Request对象。这次是修改，所以是UpdateRequest</li>
<li>2）准备参数。也就是JSON文档，里面包含要修改的字段</li>
<li>3）更新文档。这里调用client.update()方法</li>
</ul>
<h3 id="5-4-2-完整代码"><a href="#5-4-2-完整代码" class="headerlink" title="5.4.2.完整代码"></a>5.4.2.完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61083&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备请求参数</span></span><br><span class="line">    request.doc(</span><br><span class="line">        <span class="string">&quot;price&quot;</span>, <span class="string">&quot;952&quot;</span>,</span><br><span class="line">        <span class="string">&quot;starName&quot;</span>, <span class="string">&quot;四钻&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="5-5-批量导入文档"><a href="#5-5-批量导入文档" class="headerlink" title="5.5.批量导入文档"></a>5.5.批量导入文档</h2><p>案例需求：利用BulkRequest批量将数据库数据导入到索引库中。</p>
<p>步骤如下：</p>
<ul>
<li><p>利用mybatis-plus查询酒店数据</p>
</li>
<li><p>将查询到的酒店数据（Hotel）转换为文档类型数据（HotelDoc）</p>
</li>
<li><p>利用JavaRestClient中的BulkRequest批处理，实现批量新增文档</p>
</li>
</ul>
<h3 id="5-5-1-语法说明"><a href="#5-5-1-语法说明" class="headerlink" title="5.5.1.语法说明"></a>5.5.1.语法说明</h3><p>批量处理BulkRequest，其本质就是将多个普通的CRUD请求组合在一起发送。</p>
<p>其中提供了一个add方法，用来添加其他请求：</p>
<p><img src="/assets/image-20210720232105943.png" alt="image-20210720232105943"></p>
<p>可以看到，能添加的请求包括：</p>
<ul>
<li>IndexRequest，也就是新增</li>
<li>UpdateRequest，也就是修改</li>
<li>DeleteRequest，也就是删除</li>
</ul>
<p>因此Bulk中添加了多个IndexRequest，就是批量新增功能了。示例：</p>
<p><img src="/assets/image-20210720232431383.png" alt="image-20210720232431383"></p>
<p>其实还是三步走：</p>
<ul>
<li>1）创建Request对象。这里是BulkRequest</li>
<li>2）准备参数。批处理的参数，就是其它Request对象，这里就是多个IndexRequest</li>
<li>3）发起请求。这里是批处理，调用的方法为client.bulk()方法</li>
</ul>
<p>我们在导入酒店数据时，将上述代码改造成for循环处理即可。</p>
<h3 id="5-5-2-完整代码"><a href="#5-5-2-完整代码" class="headerlink" title="5.5.2.完整代码"></a>5.5.2.完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 批量查询酒店数据</span></span><br><span class="line">    List&lt;Hotel&gt; hotels = hotelService.list();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建Request</span></span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    <span class="comment">// 2.准备参数，添加多个新增的Request</span></span><br><span class="line">    <span class="keyword">for</span> (Hotel hotel : hotels) &#123;</span><br><span class="line">        <span class="comment">// 2.1.转换为文档类型HotelDoc</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">        <span class="comment">// 2.2.创建新增文档的Request对象</span></span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>)</span><br><span class="line">                    .id(hotelDoc.getId().toString())</span><br><span class="line">                    .source(JSON.toJSONString(hotelDoc), XContentType.JSON));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="5-6-小结"><a href="#5-6-小结" class="headerlink" title="5.6.小结"></a>5.6.小结</h2><p>文档操作的基本步骤：</p>
<ul>
<li>初始化RestHighLevelClient</li>
<li>创建XxxRequest。XXX是Index、Get、Update、Delete、Bulk</li>
<li>准备参数（Index、Update、Bulk时需要）</li>
<li>发送请求。调用RestHighLevelClient#.xxx()方法，xxx是index、get、update、delete、bulk</li>
<li>解析结果（Get时需要）</li>
</ul>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>安装elasticsearch</title>
    <url>/2024/01/20/%E5%AE%89%E8%A3%85elasticsearch/</url>
    <content><![CDATA[<h1 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h1><h1 id="1-部署单点es"><a href="#1-部署单点es" class="headerlink" title="1.部署单点es"></a>1.部署单点es</h1><h2 id="1-1-创建网络"><a href="#1-1-创建网络" class="headerlink" title="1.1.创建网络"></a>1.1.创建网络</h2><p>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure>



<h2 id="1-2-加载镜像"><a href="#1-2-加载镜像" class="headerlink" title="1.2.加载镜像"></a>1.2.加载镜像</h2><p>这里我们采用elasticsearch的7.12.1版本的镜像，这个镜像体积非常大，接近1G。不建议大家自己pull。</p>
<p>课前资料提供了镜像的tar包：</p>
<p><img src="/assets/image-20210510165308064.png" alt="image-20210510165308064"></p>
<p>大家将其上传到虚拟机中，然后运行命令加载即可：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">docker load -i es.tar</span><br></pre></td></tr></table></figure>

<p>同理还有<code>kibana</code>的tar包也需要这样做。</p>
<h2 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h2><p>运行docker命令，部署单点es：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">	--name es \</span><br><span class="line">    -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">    -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">    --privileged \</span><br><span class="line">    --network es-net \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    -p 9300:9300 \</span><br><span class="line">elasticsearch:7.12.1</span><br></pre></td></tr></table></figure>

<p>命令解释：</p>
<ul>
<li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li>
<li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li>
<li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li>
<li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li>
<li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li>
<li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li>
<li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li>
<li><code>--privileged</code>：授予逻辑卷访问权</li>
<li><code>--network es-net</code> ：加入一个名为es-net的网络中</li>
<li><code>-p 9200:9200</code>：端口映射配置</li>
</ul>
<p>在浏览器中输入：<a href="http://192.168.150.101:9200/">http://192.168.150.101:9200</a> 即可看到elasticsearch的响应结果：</p>
<p><img src="/assets/image-20210506101053676.png" alt="image-20210506101053676"></p>
<h1 id="2-部署kibana"><a href="#2-部署kibana" class="headerlink" title="2.部署kibana"></a>2.部署kibana</h1><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。</p>
<h2 id="2-1-部署"><a href="#2-1-部署" class="headerlink" title="2.1.部署"></a>2.1.部署</h2><p>运行docker命令，部署kibana</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">--network=es-net \</span><br><span class="line">-p 5601:5601  \</span><br><span class="line">kibana:7.12.1</span><br></pre></td></tr></table></figure>

<ul>
<li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li>
<li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li>
<li><code>-p 5601:5601</code>：端口映射配置</li>
</ul>
<p>kibana启动一般比较慢，需要多等待一会，可以通过命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs -f kibana</span><br></pre></td></tr></table></figure>

<p>查看运行日志，当查看到下面的日志，说明成功：</p>
<p><img src="/assets/image-20210109105135812.png" alt="image-20210109105135812"></p>
<p>此时，在浏览器输入地址访问：<a href="http://192.168.150.101:5601，即可看到结果">http://192.168.150.101:5601，即可看到结果</a></p>
<h2 id="2-2-DevTools"><a href="#2-2-DevTools" class="headerlink" title="2.2.DevTools"></a>2.2.DevTools</h2><p>kibana中提供了一个DevTools界面：</p>
<p><img src="/assets/image-20210506102630393.png" alt="image-20210506102630393"></p>
<p>这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。</p>
<h1 id="3-安装IK分词器"><a href="#3-安装IK分词器" class="headerlink" title="3.安装IK分词器"></a>3.安装IK分词器</h1><h2 id="3-1-在线安装ik插件（较慢）"><a href="#3-1-在线安装ik插件（较慢）" class="headerlink" title="3.1.在线安装ik插件（较慢）"></a>3.1.在线安装ik插件（较慢）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器内部</span></span><br><span class="line">docker exec -it elasticsearch /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在线下载并安装</span></span><br><span class="line">./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure>

<h2 id="3-2-离线安装ik插件（推荐）"><a href="#3-2-离线安装ik插件（推荐）" class="headerlink" title="3.2.离线安装ik插件（推荐）"></a>3.2.离线安装ik插件（推荐）</h2><h3 id="1）查看数据卷目录"><a href="#1）查看数据卷目录" class="headerlink" title="1）查看数据卷目录"></a>1）查看数据卷目录</h3><p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure>

<p>显示结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-06T10:06:34+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mountpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/es-plugins/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es-plugins&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中。</p>
<h3 id="2）解压缩分词器安装包"><a href="#2）解压缩分词器安装包" class="headerlink" title="2）解压缩分词器安装包"></a>2）解压缩分词器安装包</h3><p>下面我们需要把课前资料中的ik分词器解压缩，重命名为ik</p>
<p><img src="/assets/image-20210506110249144.png" alt="image-20210506110249144"></p>
<h3 id="3）上传到es容器的插件数据卷中"><a href="#3）上传到es容器的插件数据卷中" class="headerlink" title="3）上传到es容器的插件数据卷中"></a>3）上传到es容器的插件数据卷中</h3><p>也就是<code>/var/lib/docker/volumes/es-plugins/_data </code>：</p>
<p><img src="/assets/image-20210506110704293.png" alt="image-20210506110704293"></p>
<h3 id="4）重启容器"><a href="#4）重启容器" class="headerlink" title="4）重启容器"></a>4）重启容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、重启容器</span></span><br><span class="line">docker restart es</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看es日志</span></span><br><span class="line">docker logs -f es</span><br></pre></td></tr></table></figure>

<h3 id="5）测试："><a href="#5）测试：" class="headerlink" title="5）测试："></a>5）测试：</h3><p>IK分词器包含两种模式：</p>
<ul>
<li><p><code>ik_smart</code>：最少切分</p>
</li>
<li><p><code>ik_max_word</code>：最细切分</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;黑马&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;程序员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;程序&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;学习&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;太棒了&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;太棒&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;了&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<h2 id="3-3-扩展词词典"><a href="#3-3-扩展词词典" class="headerlink" title="3.3 扩展词词典"></a>3.3 扩展词词典</h2><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“奥力给”，“传智播客” 等。</p>
<p>所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能。</p>
<p>1）打开IK分词器config目录：</p>
<p><img src="/assets/image-20210506112225508.png" alt="image-20210506112225508"></p>
<p>2）在IKAnalyzer.cfg.xml配置文件内容添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">传智播客</span></span><br><span class="line"><span class="attr">奥力给</span></span><br></pre></td></tr></table></figure>

<p>4）重启elasticsearch </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker restart es</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 日志</span></span><br><span class="line">docker logs -f elasticsearch</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20201115230900504.png" alt="image-20201115230900504"></p>
<p>日志中已经成功加载ext.dic配置文件</p>
<p>5）测试效果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;传智播客Java就业超过90%,奥力给！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p>
</blockquote>
<h2 id="3-4-停用词词典"><a href="#3-4-停用词词典" class="headerlink" title="3.4 停用词词典"></a>3.4 停用词词典</h2><p>在互联网项目中，在网络间传输的速度很快，所以很多语言是不允许在网络上传递的，如：关于宗教、政治等敏感词语，那么我们在搜索时也应该忽略当前词汇。</p>
<p>IK分词器也提供了强大的停用词功能，让我们在索引时就直接忽略当前的停用词汇表中的内容。</p>
<p>1）IKAnalyzer.cfg.xml配置文件内容添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）在 stopword.dic 添加停用词</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">习大大</span></span><br></pre></td></tr></table></figure>

<p>4）重启elasticsearch </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">docker restart elasticsearch</span><br><span class="line">docker restart kibana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 日志</span></span><br><span class="line">docker logs -f elasticsearch</span><br></pre></td></tr></table></figure>

<p>日志中已经成功加载stopword.dic配置文件</p>
<p>5）测试效果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;传智播客Java就业率超过95%,习大大都点赞,奥力给！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p>
</blockquote>
<h1 id="4-部署es集群"><a href="#4-部署es集群" class="headerlink" title="4.部署es集群"></a>4.部署es集群</h1><p>部署es集群可以直接使用docker-compose来完成，不过要求你的Linux虚拟机至少有<strong>4G</strong>的内存空间</p>
<p>首先编写一个docker-compose文件，内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data01:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data02:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data03:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  data01:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  data02:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  data03:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure>



<p>Run <code>docker-compose</code> to bring up the cluster:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>博客项目</title>
    <url>/2024/04/02/%E5%9F%BA%E4%BA%8ESpringboot%E5%92%8CVue%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="基于Springboot和Vue的个人博客搭建项目"><a href="#基于Springboot和Vue的个人博客搭建项目" class="headerlink" title="基于Springboot和Vue的个人博客搭建项目"></a>基于Springboot和Vue的个人博客搭建项目</h1><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p>Springboot  Mybatis mysql redis swagger2 EasyExcel SpringSecurity Vue ElementUI</p>
<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><ul>
<li><p>博客项目，分为前后端，前端有两个系统界面：前台系统负责博客页面，后台系统负责用户和页面管理。后端也有两个系统，分别是前端两个界面的具体实现。</p>
</li>
<li><p>本项目创建了三个模块：博客模块(hth-blog）、管理模块(hth-admin)、公共模块(hth&#x3D;framework)。</p>
</li>
<li><p>将三个模块放到父模块下(hthBlog)。</p>
</li>
</ul>
<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="父模块搭建"><a href="#父模块搭建" class="headerlink" title="父模块搭建"></a>父模块搭建</h2><ol>
<li><p>在idea里创建Spring boot空模块，配置JDK、导入maven配置</p>
</li>
<li><p>在父模块下的pom文件中添加maven坐标：</p>
<ul>
<li>spring-boot-dependencies：SpringBoot的依赖配置</li>
<li>Fastjson ：JSON 处理器&#x2F;解析器</li>
<li>JJWT：实现安全的身份认证和授权功能</li>
<li>mybatis-plus-boot-starter：mp依赖</li>
<li>aliyun-sdk-oss：阿里云对象存储服务（Object Storage Service，简称 OSS）的 Java 开发工具包</li>
<li>easyexcel：阿里巴巴开源的一款基于 Java 的简单、高效的 Excel 操作工具，实现 Excel 文件的读取、写入、导出等操作。</li>
<li>springfox-swagger2：Spring Boot 应用程序中集成 Swagger 的一种方式，Swagger 是一种 API 文档生成工具，可以根据代码中的注解自动生成 API 文档，提供给开发人员和用户查阅和测试 API。</li>
<li>springfox-swagger-ui：Swagger UI 是 Swagger 自动生成的 API 文档的可视化界面，它可以让用户更直观地查看和测试 API。</li>
<li>maven-compiler-plugin：Maven 构建工具的一个插件，用于编译项目中的 Java 源代码。它是 Maven 构建过程中的一个核心插件，负责编译项目中的 Java 源代码，并将编译后的类文件打包到输出目录中，供后续的打包、测试等步骤使用。</li>
</ul>
</li>
</ol>
<h2 id="子模块搭建"><a href="#子模块搭建" class="headerlink" title="子模块搭建"></a>子模块搭建</h2><h3 id="创建hth-framework公共子模块，在pom文件中写入maven坐标："><a href="#创建hth-framework公共子模块，在pom文件中写入maven坐标：" class="headerlink" title="创建hth-framework公共子模块，在pom文件中写入maven坐标："></a>创建hth-framework公共子模块，在pom文件中写入maven坐标：</h3><ul>
<li>spring-boot-starter-web：Spring Boot 提供的一个“Starter”依赖，用于快速启动和构建基于 Spring MVC 的 Web 应用程序。</li>
<li>lombok：一个 Java 库，它通过注解的方式来简化 Java 代码的编写。Lombok 可以自动生成 Java 类中的常见方法，如 Getter、Setter、toString、equals、hashCode 等，从而减少了重复、冗长的代码，并提高了代码的可读性和可维护性。</li>
<li>spring-boot-starter-test: 测试</li>
<li>spring-boot-starter-security：用于实现认证（Authentication）和授权（Authorization）的框架。</li>
<li>spring-boot-starter-data-redis：redis依赖</li>
<li>fastjson、jjwt、mybatis-plus-boot-starter、mysql-connector-java、aliyun-sdk-oss、easyexcel、swagger2</li>
<li>spring-boot-starter-aop：用于集成面向切面编程（AOP）相关的功能。如日志记录、事务管理、安全控制等横切关注点的功能。</li>
<li>qiniu-java-sdk：用于访问和操作七牛云存储服务的 API。七牛云存储是一种云存储服务，提供了对象存储、CDN 加速、数据处理等功能，适用于存储、管理和传输各种类型的数据，如图片、视频、音频等。</li>
</ul>
<h3 id="创建博客后台模块-hth-admin-和博客前台模块-hth-blog"><a href="#创建博客后台模块-hth-admin-和博客前台模块-hth-blog" class="headerlink" title="创建博客后台模块(hth-admin)和博客前台模块(hth-blog)"></a>创建博客后台模块(hth-admin)和博客前台模块(hth-blog)</h3><ul>
<li>在两个模块的pom文件中引入hth-framework模块的依赖</li>
</ul>
<h1 id="EasyCode插件"><a href="#EasyCode插件" class="headerlink" title="EasyCode插件"></a>EasyCode插件</h1><p>EasyCode 提供了丰富的模板和代码生成功能，可以根据用户的需求生成各种常用的代码片段，如实体类、DAO 层、Service 层、Controller 层等。</p>
<p>EasyCode生成实体类，但是它生成的实体类有些代码我们不需要，可以在idea的settings里面修改如下，路径：Setting-&gt;OtherSettings-&gt;EasyCode-&gt;Template-&gt;entity.java.vm修改为如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">##导入宏定义</span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line"></span><br><span class="line">##保存文件（宏定义）</span><br><span class="line">#save(<span class="string">&quot;/entity&quot;</span>, <span class="string">&quot;.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">##包路径（宏定义）</span><br><span class="line">#setPackageSuffix(<span class="string">&quot;entity&quot;</span>)</span><br><span class="line"></span><br><span class="line">##自动导入包（全局变量）</span><br><span class="line">$!&#123;autoImport.vm&#125;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">##表注释（宏定义）</span><br><span class="line">#tableComment(<span class="string">&quot;表实体类&quot;</span>)</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableInfo.name&#125; &#123;</span><br><span class="line">#foreach($column in $tableInfo.fullColumn)</span><br><span class="line">    #<span class="keyword">if</span>($&#123;column.comment&#125;)<span class="comment">//$&#123;column.comment&#125;#end</span></span><br><span class="line">	<span class="keyword">private</span> $!&#123;tool.getClsNameByFullName($column.type)&#125; $!&#123;column.name&#125;;</span><br><span class="line">#end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>把dao.java.vm的模板替换为如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$!&#123;define.vm&#125;</span><br><span class="line"></span><br><span class="line">##设置表后缀（宏定义）</span><br><span class="line">#setTableSuffix(&quot;Dao&quot;)</span><br><span class="line"></span><br><span class="line">##保存文件（宏定义）</span><br><span class="line">#save(&quot;/dao&quot;, &quot;Dao.java&quot;)</span><br><span class="line"></span><br><span class="line">##包路径（宏定义）</span><br><span class="line">#setPackageSuffix(&quot;dao&quot;)</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##表注释（宏定义）</span><br><span class="line">#tableComment(&quot;表数据库访问层&quot;)</span><br><span class="line">public interface $!&#123;tableName&#125; extends BaseMapper&lt;$!tableInfo.name&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">##导入宏定义</span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line"></span><br><span class="line">##设置表后缀（宏定义）</span><br><span class="line">#setTableSuffix(&quot;Dao&quot;)</span><br><span class="line"></span><br><span class="line">##保存文件（宏定义）</span><br><span class="line">#save(&quot;/dao&quot;, &quot;Dao.java&quot;)</span><br><span class="line"></span><br><span class="line">##包路径（宏定义）</span><br><span class="line">#setPackageSuffix(&quot;dao&quot;)</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##表注释（宏定义）</span><br><span class="line">#tableComment(&quot;表数据库访问层&quot;)</span><br><span class="line">public interface $!&#123;tableName&#125; extends BaseMapper&lt;$!tableInfo.name&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把service.java.vm的模板替换为如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">##导入宏定义</span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line"></span><br><span class="line">##设置表后缀（宏定义）</span><br><span class="line">#setTableSuffix(<span class="string">&quot;Service&quot;</span>)</span><br><span class="line"></span><br><span class="line">##保存文件（宏定义）</span><br><span class="line">#save(<span class="string">&quot;/service&quot;</span>, <span class="string">&quot;Service.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">##包路径（宏定义）</span><br><span class="line">#setPackageSuffix(<span class="string">&quot;service&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##表注释（宏定义）</span><br><span class="line">#tableComment(<span class="string">&quot;表服务接口&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">$</span>!&#123;tableName&#125; <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;$!tableInfo.name&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把serviceImpl.java.vm的模板替换为如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">##导入宏定义</span><br><span class="line">$!&#123;define.vm&#125;</span><br><span class="line"></span><br><span class="line">##设置表后缀（宏定义）</span><br><span class="line">#setTableSuffix(<span class="string">&quot;ServiceImpl&quot;</span>)</span><br><span class="line"></span><br><span class="line">##保存文件（宏定义）</span><br><span class="line">#save(<span class="string">&quot;/service/impl&quot;</span>, <span class="string">&quot;ServiceImpl.java&quot;</span>)</span><br><span class="line"></span><br><span class="line">##包路径（宏定义）</span><br><span class="line">#setPackageSuffix(<span class="string">&quot;service.impl&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">##表注释（宏定义）</span><br><span class="line">#tableComment(<span class="string">&quot;表服务实现类&quot;</span>)</span><br><span class="line"><span class="meta">@Service(&quot;$!tool.firstLowerCase($tableInfo.name)Service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>!&#123;tableName&#125; <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;$!&#123;tableInfo.name&#125;Mapper, $!&#123;tableInfo.name&#125;&gt; <span class="keyword">implements</span> <span class="title class_">$</span>!&#123;tableInfo.name&#125;Service &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="公共模块-准备工作"><a href="#公共模块-准备工作" class="headerlink" title="公共模块-准备工作"></a>公共模块-准备工作</h1><ol>
<li><p>导入数据库信息</p>
</li>
<li><p>整合mybatisplus,在hth-blog工程的resources目录新建File，文件名为application.yml文件，写入如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7777</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.100.210.238:3306/sg_blog?characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment"># 文件上传</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="comment"># 单个上传文件的最大允许大小</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">20MB</span></span><br><span class="line">      <span class="comment"># HTTP请求中包含的所有文件的总大小的最大允许值</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">20MB</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.100</span><span class="number">.210</span><span class="number">.238</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># springboot 2.6版本之后需要配置ant_path_matcher才能生使swagger生成接口文档</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">   	  <span class="comment"># 逻辑删除的字段</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">delFlag</span></span><br><span class="line">      <span class="comment"># 代表已删除的值</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 代表未删除的值</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 主键自增策略，以mysql数据库为准</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">oss:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">&quot;sTNq8rKyhIK8yu-wwRBoF7BnKqlyIjvsYpKEWytD&quot;</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">&quot;ts-vlHWJ5aZxqy4QSZNgLaUGxdksg5K8SJxh-O1Y&quot;</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">&quot;hth-blog&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建实体类，Mapper，Service</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章表(Article)表实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> makejava</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-02-01 11:36:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sg_article&quot;)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Article</span>  &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line">    <span class="comment">//是否置顶（0否，1是）</span></span><br><span class="line">    <span class="keyword">private</span> String isTop;</span><br><span class="line">    <span class="comment">//状态（0已发布，1草稿）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">//是否允许评论 1是，0否</span></span><br><span class="line">    <span class="keyword">private</span> String isComment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Article</span><span class="params">(Long id, <span class="type">long</span> viewCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.viewCount = viewCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Article&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Article&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ArticleMapper, Article&gt; <span class="keyword">implements</span> <span class="title class_">ArticleService</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Spring BootApplication启动类上加@MapperScan(“com.hth.mapper”)注解，用来扫描包</li>
<li>在hth-blog模块下创建Controller测试接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Article&gt; <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> articleService.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>暂时先注释掉sangeng-framework中的SpringSecurity依赖方便测试</p>
<ol start="6">
<li>运行hth-blog的SpringApplicatio引导类，在浏览器输入：<a href="http://localhost:7777/article/list">http://localhost:7777/article/list</a></li>
</ol>
<h1 id="博客前台"><a href="#博客前台" class="headerlink" title="博客前台"></a>博客前台</h1><h2 id="热门文章列表"><a href="#热门文章列表" class="headerlink" title="热门文章列表"></a>热门文章列表</h2><h3 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h3><p>需要查询浏览量最高的前10篇文章的信息。要求展示文章标题和浏览量。把能让用户自己点击跳转到具体的文章详情进行浏览。注意：不能把草稿展示出来，不能把删除了的文章查询出来。要按照浏览量进行降序排序。</p>
<h3 id="统一响应格式"><a href="#统一响应格式" class="headerlink" title="统一响应格式"></a>统一响应格式</h3><ul>
<li><h3 id="一、代码实现"><a href="#一、代码实现" class="headerlink" title="一、代码实现"></a>一、代码实现</h3><p>第一步: 在hth-framework公共模块的src&#x2F;main&#x2F;java目录新建com.hth.enums.AppHttpCodeEnum类，写入如下，作用是封装code和msg</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hth.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AppHttpCodeEnum</span> &#123;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    NEED_LOGIN(<span class="number">401</span>,<span class="string">&quot;需要登录后操作&quot;</span>),</span><br><span class="line">    NO_OPERATOR_AUTH(<span class="number">403</span>,<span class="string">&quot;无权限操作&quot;</span>),</span><br><span class="line">    SYSTEM_ERROR(<span class="number">500</span>,<span class="string">&quot;出现错误&quot;</span>),</span><br><span class="line">    USERNAME_EXIST(<span class="number">501</span>,<span class="string">&quot;用户名已存在&quot;</span>),</span><br><span class="line">     PHONENUMBER_EXIST(<span class="number">502</span>,<span class="string">&quot;手机号已存在&quot;</span>), EMAIL_EXIST(<span class="number">503</span>, <span class="string">&quot;邮箱已存在&quot;</span>),</span><br><span class="line">    REQUIRE_USERNAME(<span class="number">504</span>, <span class="string">&quot;必需填写用户名&quot;</span>),</span><br><span class="line">    CONTENT_NOT_NULL(<span class="number">506</span>, <span class="string">&quot;评论内容不能为空&quot;</span>),</span><br><span class="line">    FILE_TYPE_ERROR(<span class="number">507</span>, <span class="string">&quot;文件类型错误，请上传png文件&quot;</span>),</span><br><span class="line">    USERNAME_NOT_NULL(<span class="number">508</span>, <span class="string">&quot;用户名不能为空&quot;</span>),</span><br><span class="line">    NICKNAME_NOT_NULL(<span class="number">509</span>, <span class="string">&quot;昵称不能为空&quot;</span>),</span><br><span class="line">    PASSWORD_NOT_NULL(<span class="number">510</span>, <span class="string">&quot;密码不能为空&quot;</span>),</span><br><span class="line">    EMAIL_NOT_NULL(<span class="number">511</span>, <span class="string">&quot;邮箱不能为空&quot;</span>),</span><br><span class="line">    NICKNAME_EXIST(<span class="number">512</span>, <span class="string">&quot;昵称已存在&quot;</span>),</span><br><span class="line">    LOGIN_ERROR(<span class="number">505</span>,<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    <span class="type">int</span> code;</span><br><span class="line">    String msg;</span><br><span class="line"></span><br><span class="line">    AppHttpCodeEnum(<span class="type">int</span> code, String errorMessage)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>​	第二步: 在hth-framework公共模块的domain目录新建ResponseResult类，写入如下，作为统一响应格式的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hth.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.hth.enums.AppHttpCodeEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = AppHttpCodeEnum.SUCCESS.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = AppHttpCodeEnum.SUCCESS.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResponseResult</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">        <span class="keyword">return</span> result.error(code, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">okResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">okResult</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">        <span class="keyword">return</span> result.ok(code, <span class="literal">null</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">okResult</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> setAppHttpCodeEnum(AppHttpCodeEnum.SUCCESS, AppHttpCodeEnum.SUCCESS.getMsg());</span><br><span class="line">        <span class="keyword">if</span>(data!=<span class="literal">null</span>) &#123;</span><br><span class="line">            result.setData(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(AppHttpCodeEnum enums)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setAppHttpCodeEnum(enums,enums.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">errorResult</span><span class="params">(AppHttpCodeEnum enums, String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setAppHttpCodeEnum(enums,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title function_">setAppHttpCodeEnum</span><span class="params">(AppHttpCodeEnum enums)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> okResult(enums.getCode(),enums.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResponseResult <span class="title function_">setAppHttpCodeEnum</span><span class="params">(AppHttpCodeEnum enums, String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> okResult(enums.getCode(),msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; error(Integer code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(Integer code, T data, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;?&gt; ok(T data) &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步: 把hth-framework公共模块的ArticleService修改为如下，定义了hotArticleList方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>第四步: 把hth-framework公共模块的ArticleServiceImpl修改为如下，实现了hotArticleList方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询热门文章 封装成ResponseResult返回</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//必须是正式文章</span></span><br><span class="line">        queryWrapper.eq(Article::getStatus, SystemConstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">        <span class="comment">//按照浏览量进行排序</span></span><br><span class="line">        queryWrapper.orderByDesc(Article::getViewCount);</span><br><span class="line">        <span class="comment">//最多只查询10条</span></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articles);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第五步: 把hth-blog工程的ArticleController类，修改为如下，增加了文章列表的统一响应格式的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//注入公共模块的ArticleService接口</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/hotArticleList&quot;)</span></span><br><span class="line">    <span class="comment">//ResponseResult是huanf-framework工程的domain目录的类</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询热门文章，封装成ResponseResult返回</span></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> articleService.hotArticleList();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><h4 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h4><p>跨域问题（Cross-Origin Resource Sharing，CORS）指的是当一个网页的 JavaScript 代码向另一个域名的服务器发起 HTTP 请求时，如果目标服务器与源服务器不在同一个域下，那么请求就会面临跨域限制。</p>
<p>跨域问题的原因是出于浏览器的安全策略考虑，为了防止恶意网站通过 JavaScript 代码获取用户的敏感信息，浏览器会在默认情况下禁止跨域的 HTTP 请求。</p>
<h4 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h4><p>在hth-framework工程的src&#x2F;main&#x2F;java目录新建com.hth.config.WebConfig类，写入如下，然后重新运行huanf-blog工程的HuanfBlogApplication类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这段代码片段是 Spring MVC 中用于配置 CORS（跨域资源共享）的方式。通过覆盖 addCorsMappings 方法来配置 CORS。</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="统一响应格式-1"><a href="#统一响应格式-1" class="headerlink" title="统一响应格式"></a>统一响应格式</h3><p>在刚刚的响应格式中，是不符合接口文档标准的，因为我们返回了很多字段，如下图，有些字段不需要返回，或者比较敏感不能返回给前端。所以用VO (是Value Object的缩写,表示值对象) 来接收查询的结果，一个接口对应一个VO，这样即使接口响应字段要修改也只要修改VO即可</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotArticleVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后修改ArticleServiceImpl代码，使用Vo封装字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ArticleMapper, Article&gt; <span class="keyword">implements</span> <span class="title class_">ArticleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询热门文章 封装成ResponseResult返回</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//必须是正式文章</span></span><br><span class="line">        queryWrapper.eq(Article::getStatus,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//按照浏览量进行排序</span></span><br><span class="line">        queryWrapper.orderByDesc(Article::getViewCount);</span><br><span class="line">        <span class="comment">//最多只查询10条</span></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">        <span class="comment">//bean拷贝</span></span><br><span class="line">        List&lt;HotArticleVo&gt; articleVos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Article article : articles) &#123;</span><br><span class="line">            <span class="type">HotArticleVo</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotArticleVo</span>();</span><br><span class="line">            <span class="comment">//BeanUtils.copyProperties 方法用于将一个对象的属性值拷贝到另一个对象中。</span></span><br><span class="line">            <span class="comment">//将 article 对象的属性值拷贝到一个新创建的 HotArticleVo 对象 vo 中</span></span><br><span class="line">            BeanUtils.copyProperties(article,vo);</span><br><span class="line">            articleVos.add(vo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articleVos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字面值处理"><a href="#字面值处理" class="headerlink" title="字面值处理"></a>字面值处理</h3><p>​	实际项目中都不允许直接在代码中使用字面值。都需要定义成常量来使用。这种方式有利于提高代码的可维护性。</p>
<ol>
<li>在hth-framework工程的src&#x2F;main&#x2F;java目录新建com.hth.constants.SystemCanstants类，写入如下，作用是定义常量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hth.constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemConstants</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  文章是草稿</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARTICLE_STATUS_DRAFT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  文章是正常分布状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARTICLE_STATUS_NORMAL</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span>  <span class="variable">STATUS_NORMAL</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 友链状态为审核通过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span>  <span class="variable">LINK_STATUS_NORMAL</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论类型为：文章评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ARTICLE_COMMENT</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论类型为：友联评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LINK_COMMENT</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MENU</span> <span class="operator">=</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUTTON</span> <span class="operator">=</span> <span class="string">&quot;F&quot;</span>;</span><br><span class="line">    <span class="comment">/** 正常状态 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NORMAL</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADMAIN</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章列表当前查询页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARTICLE_STATUS_CURRENT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章列表每页显示的数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARTICLE_STATUS_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将ArticleServiceImpl类修改如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(SystemConstants.ARTICLE_STATUS_CURRENT,SystemConstants.ARTICLE_STATUS_SIZE);</span><br></pre></td></tr></table></figure>

<h3 id="Bean拷贝工具类封装"><a href="#Bean拷贝工具类封装" class="headerlink" title="Bean拷贝工具类封装"></a>Bean拷贝工具类封装</h3><p>为了提高代码复用性，我们把从Article类里面拿到的查询结果，拷贝给HotArticleVO的代码抽取出来进行封装</p>
<ol>
<li>在hth-framework工程的src&#x2F;main&#x2F;java目录新建com.hth.utils.BeanCopyUtils类，写入如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanCopyUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个私有的构造方法，通过私有化构造方法，确保该工具类不会被实例化，因为它的方法都是静态方法，无需创建实例。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BeanCopyUtils</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个静态方法，用于将一个源对象的属性拷贝到目标对象中。</span></span><br><span class="line">    <span class="comment">//&lt;V&gt; 是一个泛型声明，它表示该方法是一个泛型方法，并且声明了一个泛型类型参数 V。</span></span><br><span class="line">    <span class="comment">//这个泛型类型参数 V 可以在方法中作为类型使用。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V&gt; V <span class="title function_">copyBean</span><span class="params">(Object source,Class&lt;V&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="comment">//创建目标对象</span></span><br><span class="line">        <span class="type">V</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//首先通过反射创建了一个目标对象 result</span></span><br><span class="line">            result = clazz.newInstance();</span><br><span class="line">            <span class="comment">//实现属性copy</span></span><br><span class="line">            BeanUtils.copyProperties(source, result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将一个源对象列表的属性拷贝到目标对象列表中</span></span><br><span class="line">    <span class="comment">//O：表示源对象的类型。</span></span><br><span class="line">	<span class="comment">//V：表示目标对象的类型。</span></span><br><span class="line">	<span class="comment">//List&lt;V&gt; 表示该方法的返回类型是一个 V 类型的列表。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;O,V&gt; List&lt;V&gt; <span class="title function_">copyBeanList</span><span class="params">(List&lt;O&gt; list,Class&lt;V&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="comment">//使用stream流进行转换</span></span><br><span class="line">        <span class="comment">//对源对象列表进行遍历，对每个源对象调用 copyBean 方法进行拷贝操作，</span></span><br><span class="line">        <span class="comment">//然后将拷贝后的目标对象收集到一个新的列表中，并返回该列表。</span></span><br><span class="line">        <span class="keyword">return</span> list.stream()</span><br><span class="line">                .map(o -&gt; copyBean(o, clazz))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>把hth-framework工程的ArticleServiceImpl类修改为如下，作用是把之前的bean拷贝代码换成调用BeanCopyUtils类的copyBeanList方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询热门文章 封装成ResponseResult返回</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//必须是正式文章</span></span><br><span class="line">        queryWrapper.eq(Article::getStatus, SystemConstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">        <span class="comment">//按照浏览量进行排序</span></span><br><span class="line">        queryWrapper.orderByDesc(Article::getViewCount);</span><br><span class="line">        <span class="comment">//最多只查询10条</span></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(SystemConstants.ARTICLE_STATUS_CURRENT,SystemConstants.ARTICLE_STATUS_SIZE);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;HotArticleVo&gt; vs = BeanCopyUtils.copyBeanList(articles, HotArticleVo.class);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(vs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询分类列表"><a href="#查询分类列表" class="headerlink" title="查询分类列表"></a>查询分类列表</h2><h3 id="接口分析"><a href="#接口分析" class="headerlink" title="接口分析"></a>接口分析</h3><p>通过需求去分析需要有哪些字段。页面上需要展示分类列表，用户可以点击具体的分类查看该分类下的文章列表。要求只展示有发布正式文章的分类 。要求必须是正常(非禁用)状态的分类</p>
<p><img src="/img/image-20220202111056036-16437714601701.png" alt="image-20220202111056036"></p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sg_category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span>  &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//分类名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//父分类id，如果没有父分类为-1</span></span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//状态0:正常,1禁用</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">    ResponseResult <span class="title function_">getCategoryList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//返回给前端的特定字段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getCategoryList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询文章表  状态为已发布的文章</span></span><br><span class="line">    LambdaQueryWrapper&lt;Article&gt; articleWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    articleWrapper.eq(Article::getStatus,SystemConstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">    List&lt;Article&gt; articleList = articleService.list(articleWrapper);</span><br><span class="line">    <span class="comment">//获取文章的分类id，并且去重</span></span><br><span class="line">    Set&lt;Long&gt; categoryIds = articleList.stream()</span><br><span class="line">            .map(article -&gt; article.getCategoryId())</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询分类表</span></span><br><span class="line">    List&lt;Category&gt; categories = listByIds(categoryIds);</span><br><span class="line">    categories = categories.stream().</span><br><span class="line">            filter(category -&gt; SystemConstants.STATUS_NORMAL.equals(category.getStatus()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//封装vo</span></span><br><span class="line">    List&lt;CategoryVo&gt; categoryVos = BeanCopyUtils.copyBeanList(categories, CategoryVo.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(categoryVos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getCategoryList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getCategoryList</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> categoryService.getCategoryList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>​	在首页和分类页面都需要查询文章列表。</p>
<p>​	首页：查询所有的文章</p>
<p>​	分类页面：查询对应分类下的文章</p>
<p>​	要求：①只能查询正式发布的文章 ②置顶的文章要显示在最前面 </p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>在hth-framework工程的config目录新建MybatisPlusConfig类，作用是配置MyBatisPlus的分页插件，不然分页没有效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MbatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建ArticleListVo实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleListVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类名</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Article&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文章列表</span></span><br><span class="line">    ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类查询文章列表</span></span><br><span class="line">    ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum, Integer pageSize, Long categoryId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum, Integer pageSize, Long categoryId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 如果 有categoryId 就要 查询时要和传入的相同</span></span><br><span class="line">        lambdaQueryWrapper.eq(Objects.nonNull(categoryId)&amp;&amp;categoryId&gt;<span class="number">0</span> ,Article::getCategoryId,categoryId);</span><br><span class="line">        <span class="comment">// 状态是正式发布的</span></span><br><span class="line">        lambdaQueryWrapper.eq(Article::getStatus,SystemConstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">        <span class="comment">// 对isTop进行降序</span></span><br><span class="line">        lambdaQueryWrapper.orderByDesc(Article::getIsTop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        page(page,lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">        <span class="comment">//查询categoryName</span></span><br><span class="line">        articles.stream()</span><br><span class="line">                .map(article -&gt; article.setCategoryName(categoryService.getById(article.getCategoryId()).getName()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//封装查询结果</span></span><br><span class="line">        List&lt;ArticleListVo&gt; articleListVos = BeanCopyUtils.copyBeanList(page.getRecords(), ArticleListVo.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(articleListVos,page.getTotal());</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/articleList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum,Integer pageSize,Long categoryId)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> articleService.articleList(pageNum,pageSize,categoryId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FastJson配置"><a href="#FastJson配置" class="headerlink" title="FastJson配置"></a>FastJson配置</h3><p>由于ArticleListVO类的createTime成员变量是Date类型，默认是由java的Jackson来处理，使用 ISO-8601 规范来处理日期时间格式。ISO-8601 是一种国际标准的日期时间表示法，例如：”2023-07-21T06:53:24”。我们不希望时间被处理成这种格式，可以使用FastJson将 Java 对象转换为 JSON 字符串并返回给客户端。，如下图。</p>
<p>在hth-framework的config目录的WebConfig类里添加FastJson配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span><span class="comment">//使用@Bean注入fastJsonHttpMessageConvert</span></span><br><span class="line">    <span class="keyword">public</span> HttpMessageConverter <span class="title function_">fastJsonHttpMessageConverters</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.需要定义一个Convert转换消息的对象</span></span><br><span class="line">        <span class="type">FastJsonHttpMessageConverter</span> <span class="variable">fastConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonHttpMessageConverter</span>();</span><br><span class="line">        <span class="type">FastJsonConfig</span> <span class="variable">fastJsonConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonConfig</span>();</span><br><span class="line">        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">        fastJsonConfig.setDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);</span><br><span class="line"></span><br><span class="line">        fastJsonConfig.setSerializeConfig(SerializeConfig.globalInstance);</span><br><span class="line">        fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        HttpMessageConverter&lt;?&gt; converter = fastConverter;</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="comment">//配置消息转换器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">//增加我们的消息转换器</span></span><br><span class="line">        converters.add(fastJsonHttpMessageConverters());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="文章详情"><a href="#文章详情" class="headerlink" title="文章详情"></a>文章详情</h2><h3 id="接口分析-1"><a href="#接口分析-1" class="headerlink" title="接口分析"></a>接口分析</h3><table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
</tr>
</thead>
<tbody><tr>
<td>Get</td>
<td>&#x2F;article&#x2F;{id}</td>
</tr>
</tbody></table>
<p>要求在文章列表点击阅读全文时能够跳转到文章详情页面，可以让用户阅读文章正文。并且要在文章详情中展示其分类名。响应格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categoryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文章详情的具体文章内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-01-23 23:20:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isComment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpringSecurity从入门到精通&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;viewCount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;114&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用的HTTP请求形式"><a href="#常用的HTTP请求形式" class="headerlink" title="常用的HTTP请求形式"></a>常用的HTTP请求形式</h3><table>
<thead>
<tr>
<th>请求形式</th>
<th>示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>路径参数形式</td>
<td>&#x2F;articles&#x2F;{id}</td>
<td>参数作为路径的一部分，表示明确的资源标识符或必需的参数。</td>
</tr>
<tr>
<td>查询参数形式</td>
<td>&#x2F;articles?id&#x3D;1&amp;num&#x3D;1</td>
<td>参数通过 “?” 或 “&amp;” 的方式附加在URL的末尾，适合传递可选参数或过滤条件。</td>
</tr>
</tbody></table>
<p>新建ArticleDetailVo实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleDetailVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line">    <span class="comment">//所属分类名</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文章内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Article&gt; &#123;</span><br><span class="line">    <span class="comment">//文章列表</span></span><br><span class="line">    ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类查询文章列表</span></span><br><span class="line">    ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum, Integer pageSize, Long categoryId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询文章详情</span></span><br><span class="line">    ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//根据id查询文章</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        <span class="type">ArticleDetailVo</span> <span class="variable">articleDetailVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(article, ArticleDetailVo.class);</span><br><span class="line">        <span class="comment">//根据分类id查询分类名</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> articleDetailVo.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span>(category!=<span class="literal">null</span>)&#123;</span><br><span class="line">            articleDetailVo.setCategoryName(category.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//封装响应返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articleDetailVo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//只有加@PathVariable注解才能接收路径参数形式的HTTP请求</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> articleService.getArticleDetail(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="友链功能"><a href="#友链功能" class="headerlink" title="友链功能"></a>友链功能</h2><h3 id="接口分析-2"><a href="#接口分析-2" class="headerlink" title="接口分析"></a>接口分析</h3><table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
</tr>
</thead>
<tbody><tr>
<td>Get</td>
<td>&#x2F;link&#x2F;getAllLink</td>
</tr>
</tbody></table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.baidu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sda&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;logo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;图片url1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sda&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dada&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;logo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;图片url2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sda&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>新建LinkVo实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String logo;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//网站地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建link实体类，service，mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sg_link&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Link</span>  &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String logo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//网站地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//审核状态 (0代表审核通过，1代表审核未通过，2代表未审核)</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service中添加getAllLink方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LinkService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Link&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ResponseResult <span class="title function_">getAllLink</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    PageVo <span class="title function_">selectLinkPage</span><span class="params">(Link link, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getAllLink</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询所有审核通过的</span></span><br><span class="line">        LambdaQueryWrapper&lt;Link&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Link::getStatus, SystemConstants.LINK_STATUS_NORMAL);</span><br><span class="line">        List&lt;Link&gt; links = list(queryWrapper);</span><br><span class="line">        <span class="comment">//转换成vo</span></span><br><span class="line">        List&lt;LinkVo&gt; linkVos = BeanCopyUtils.copyBeanList(links, LinkVo.class);</span><br><span class="line">        <span class="comment">//封装返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(linkVos);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>新建LinkController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/link&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LinkService linkService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAllLink&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getAllLink</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkService.getAllLink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h3 id="接口分析-3"><a href="#接口分析-3" class="headerlink" title="接口分析"></a>接口分析</h3><p>需要实现登录功能，有些功能必须登录后才能使用，未登录状态是不能使用的。请求形式如下</p>
<p>请求体：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span><span class="string">&quot;sg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;1234&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>响应格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI0ODBmOThmYmJkNmI0NjM0OWUyZjY2NTM0NGNjZWY2NSIsInN1YiI6IjEiLCJpc3MiOiJzZyIsImlhdCI6MTY0Mzg3NDMxNiwiZXhwIjoxNjQzOTYwNzE2fQ.ldLBUvNIxQCGemkCoMgT_0YsjsWndTg5tqfJb77pabk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;userInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F3bf9c263bc0f2ac5c3a7feb9e218d07475573ec8.gi&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23412332@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sg333&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ul>
<li>登录</li>
</ul>
<ol>
<li>自定义登录接口：调用ProviderManager的方法进行认证 如果认证通过生成jwt,  把用户信息存入redis中</li>
</ol>
<ul>
<li><code>ProviderManager</code> 是 Spring Security 中用于管理身份验证提供者的类。它实现了 <code>AuthenticationManager</code> 接口，是 Spring Security 中默认的身份验证管理器。<code>ProviderManager</code> 通过调用身份验证提供者来进行身份验证，并将身份验证请求传递给它所管理的一组身份验证提供者</li>
</ul>
<ol start="2">
<li>自定义UserDetailsService：在这个实现类中去查询数据库，注意配置passwordEncoder为BCryptPasswordEncoder</li>
</ol>
<ul>
<li>校验：</li>
</ul>
<p>​	1. 定义Jwt认证过滤器</p>
<p>​	2. 获取token</p>
<p>​	3. 解析token获取其中的userid</p>
<pre><code> 4. 从redis中获取用户信息
</code></pre>
<ol start="5">
<li>存入SecurityContextHolder</li>
</ol>
<h3 id="准备工作-工具类"><a href="#准备工作-工具类" class="headerlink" title="准备工作-工具类"></a>准备工作-工具类</h3><ol>
<li>在hth-framework工程的config目录新建FastJsonRedisSerializer类，写入如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_CHARSET</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastJsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="literal">null</span> || bytes.length &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> JavaType <span class="title function_">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在hth-framework工程的config目录新建RedisConfig类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在hth-framework工程的utils目录新建JwtUtil类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">//有效期为</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span><span class="number">72</span>*<span class="number">60</span> * <span class="number">60</span> *<span class="number">1000L</span>;<span class="comment">// 60 * 60 *1000  一个小时</span></span><br><span class="line">    <span class="comment">//设置秘钥明文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">&quot;hth&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, <span class="literal">null</span>, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jtw</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject token中要存放的数据（json格式）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis token超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject, Long ttlMillis)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, getUUID());<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title function_">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> &#123;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span>(ttlMillis==<span class="literal">null</span>)&#123;</span><br><span class="line">            ttlMillis=JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid)              <span class="comment">//唯一的ID</span></span><br><span class="line">                .setSubject(subject)   <span class="comment">// 主题  可以是JSON数据</span></span><br><span class="line">                .setIssuer(<span class="string">&quot;hth&quot;</span>)     <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now)      <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey) <span class="comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttlMillis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, id);<span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg&quot;</span>;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> parseJWT(token);</span><br><span class="line">        System.out.println(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密后的秘钥 secretKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 在hth-framework工程的utils目录新建RedisCache类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存List数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的List数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的list对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="title function_">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;T&gt; dataSet)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            setOperation.add(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往Hash中存入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> T value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span></span><br><span class="line">    &#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> opsForHash.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrementCacheMapValue</span><span class="params">(String key,String hKey,<span class="type">int</span> v)</span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().increment(key,hKey,v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的数据</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hkey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hkey)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        hashOperations.delete(key, hkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys Hash键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的utils目录新建WebUtils类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setDownLoadHeader</span><span class="params">(String filename, HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String fname= URLEncoder.encode(filename,<span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>,<span class="string">&quot;attachment; filename=&quot;</span>+fname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码实现-自定义登录接口"><a href="#代码实现-自定义登录接口" class="headerlink" title="代码实现-自定义登录接口"></a>代码实现-自定义登录接口</h3><p>新建user表，userMapper，BlogLoginService，BlogLoginServiceImpl实现类</p>
<p>在BlogLoginService接口，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    ResponseResult <span class="title function_">login</span><span class="params">(User user)</span>;</span><br><span class="line">    ResponseResult <span class="title function_">logout</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hth-blog工程的src&#x2F;main&#x2F;java&#x2F;com.hth目录新建config.SecurityConfig类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//WebSecurityConfigurerAdapter是Security官方提供的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//把官方的PasswordEncoder密码加密方式替换成BCryptPasswordEncoder</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//该方法用于配置 HTTP 安全策略。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部不需要认证即可访问</span></span><br><span class="line">                .anyRequest().permitAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        http.logout().disable();</span><br><span class="line">        <span class="comment">//允许跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的service目录新建impl.UserDetailsServiceImpl类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="comment">//判断是否查到用户  如果没查到抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 在hth-framework工程的domain目录新建LoginUser类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用于返回权限信息。现在我们正在实现&#x27;认证&#x27;，&#x27;权限&#x27;后面才用得到。所以返回null即可</span></span><br><span class="line">    <span class="comment">//当要查询用户信息的时候，我们不能单纯返回null，要重写这个方法，作用是返回权限信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用于获取用户密码。由于使用的实体类是User，所以获取的是数据库的用户密码</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用于获取用户名。由于使用的实体类是User，所以获取的是数据库的用户名</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">      <span class="comment">//判断登录状态是否过期。把这个改成true，表示永不过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="comment">//判断账号是否被锁定。把这个改成true，表示未锁定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="comment">//判断登录凭证是否过期。把这个改成true，表示永不过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="comment">//判断用户是否可用。把这个改成true，表示可用状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的service目录新建impl.BlogLoginServiceImpl类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//Spring Security 中用于处理身份验证的核心接口之一</span></span><br><span class="line">  <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="comment">//hth-framework工程的config目录写的类</span></span><br><span class="line">  <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">      <span class="comment">//封装登录的用户名和密码</span></span><br><span class="line">      <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span>    <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class="line">      <span class="comment">//在下一行之前，封装的数据会先走UserDetailsServiceImpl实现类</span></span><br><span class="line">      <span class="comment">//UsernamePasswordAuthenticationToken 对象会被传递给 AuthenticationManager 进行身份验证</span></span><br><span class="line">      <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">      <span class="comment">//上面那一行会得到所有的认证用户信息authenticate。然后下一行需要判断用户认证是否通过，如果authenticate的值是null，就说明认证没有通过</span></span><br><span class="line">      <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//获取userid 生成token</span></span><br><span class="line">      <span class="comment">//getPrincipal() 方法：用于获取身份验证的主体。</span></span><br><span class="line">      <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">      <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">      <span class="comment">//把这个userid通过我们写的JwtUtil工具类转成密文，这个密文就是token值</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">      <span class="comment">//把用户信息存入redis</span></span><br><span class="line">      <span class="comment">//下面那行的第一个参数: 把上面那行的jwt，也就是token值保存到Redis。</span></span><br><span class="line">      <span class="comment">//存的时候是键值对的形式，值就是jwt，key要加上 &quot;bloglogin:&quot; 前缀</span></span><br><span class="line">      <span class="comment">//下面那行的第二个参数: 要把哪个对象存入Redis。我们写的是loginUser，里面有权限信息，后面会用到</span></span><br><span class="line">      redisCache.setCacheObject(<span class="string">&quot;bloglogin:&quot;</span>+userId,loginUser);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//把token和userinfo封装 返回</span></span><br><span class="line">      <span class="comment">//把User转换成UserInfoVo</span></span><br><span class="line">      <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(loginUser.getUser(), UserInfoVo.class);</span><br><span class="line">      <span class="type">BlogUserLoginVo</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlogUserLoginVo</span>(jwt,userInfoVo);</span><br><span class="line">      <span class="keyword">return</span> ResponseResult.okResult(vo);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>BlogUserLoginVo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogUserLoginVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">    <span class="keyword">private</span> UserInfoVo userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserInfoVo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Data</span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BlogLoginController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogLoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BlogLoginService blogLoginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogLoginService.login(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码实现-认证过滤器"><a href="#代码实现-认证过滤器" class="headerlink" title="代码实现-认证过滤器"></a>代码实现-认证过滤器</h3><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>​	①定义Jwt认证过滤器</p>
<p>​				获取token</p>
<p>​				解析token获取其中的userid</p>
<p>​				从redis中获取用户信息</p>
<p>​				存入SecurityContextHolder</p>
<ol>
<li>在hth-blog工程的src&#x2F;main&#x2F;java&#x2F;com.hth目录新建filter.JwtAuthenticationTokenFilter类，写入如下，作用是自定义Jwt认证过滤器</li>
</ol>
<ul>
<li>通常，这个过滤器会被添加到 Spring Security 过滤器链中，位于其他身份验证过滤器之前。当请求到达时，<code>JwtAuthenticationTokenFilter</code> 将会拦截请求，并尝试从请求中提取 JWT，然后对 JWT 进行验证。</li>
<li>如果 JWT 验证成功，通常会解析 JWT 中的信息，并将用户的身份信息（如用户名、角色等）设置到 Spring Security 的上下文中，以便后续的请求可以访问到用户的身份信息。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在每次请求到达时对 JWT（JSON Web Token）进行验证和处理，用于实现基于 JWT 的身份验证机制。</span></span><br><span class="line"><span class="comment">//OncePerRequestFilter 是 Spring Security 提供的一个过滤器基类，它可以确保在每个请求只被调用一次，避免重复执行过滤逻辑。</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(token))&#123;</span><br><span class="line">            <span class="comment">//说明该接口不需要登录  直接放行</span></span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解析获取userid</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = JwtUtil.parseJWT(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//token超时  token非法</span></span><br><span class="line">            <span class="comment">//响应告诉前端需要重新登录</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">            WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">        <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> redisCache.getCacheObject(<span class="string">&quot;bloglogin:&quot;</span> + userId);</span><br><span class="line">        <span class="comment">//如果获取不到</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(loginUser))&#123;</span><br><span class="line">            <span class="comment">//说明登录过期  提示重新登录</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">            WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存入SecurityContextHolder</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(loginUser,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>把hth-blog工程的SecurityConfig类修改为如下，作用是把上一步的认证过滤器添加到springsecurity的过滤器链中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部不需要认证即可访问</span></span><br><span class="line">                .anyRequest().permitAll();</span><br><span class="line">        <span class="comment">//关闭默认的注销功能</span></span><br><span class="line">        http.logout().disable();</span><br><span class="line">        <span class="comment">//把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中</span></span><br><span class="line">        <span class="comment">//第一个参数是你要添加的过滤器，第二个参数是你想把你的过滤器添加到哪个security官方过滤器之前</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//允许跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="1-认证授权的异常处理"><a href="#1-认证授权的异常处理" class="headerlink" title="1. 认证授权的异常处理"></a>1. 认证授权的异常处理</h3><p>目前我们的项目在认证出错或者权限不足的时候响应回来的Json是Security的异常处理结果。但是这个响应的格式肯定是不符合我们项目的接口规范的。所以需要自定义异常处理。</p>
<p>我们需要去实现AuthenticationEntryPoint(官方提供的认证失败处理器)类、AccessDeniedHandler(官方提供的授权失败处理器)类，然后配置给Security</p>
<p>在hth-framework工程的src&#x2F;main&#x2F;java&#x2F;com.hth目录新建handler.security.AuthenticationEntryPointImpl类，写入如下</p>
<ul>
<li>实现了 Spring Security 的 <code>AuthenticationEntryPoint</code> 接口，用于处理未经身份验证的用户尝试访问受保护资源的情况。</li>
<li><strong>commence 方法：</strong> 这个方法是 <code>AuthenticationEntryPoint</code> 接口中定义的方法，用于处理未经身份验证的用户访问受保护资源的情况。当用户尝试访问需要身份验证的资源但未进行身份验证时，Spring Security 会调用这个方法来处理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">////输出异常信息</span></span><br><span class="line">        authException.printStackTrace();</span><br><span class="line">        <span class="comment">//InsufficientAuthenticationException</span></span><br><span class="line">        <span class="comment">//BadCredentialsException</span></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(authException <span class="keyword">instanceof</span> BadCredentialsException)&#123;</span><br><span class="line">            <span class="comment">//第一个参数返回的是响应码，AppHttpCodeEnum是我们写的实体类。第二个参数是返回具体的信息</span></span><br><span class="line">            result = ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_ERROR.getCode(),authException.getMessage());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(authException <span class="keyword">instanceof</span> InsufficientAuthenticationException)&#123;</span><br><span class="line">            result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="comment">//第一个参数返回的是响应码，AppHttpCodeEnum是我们写的实体类。第二个参数是返回具体的信息</span></span><br><span class="line">            result = ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),<span class="string">&quot;认证或授权失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用spring提供的JSON工具类，把上一行的result转换成JSON，然后响应给前端。WebUtils是我们写的类</span></span><br><span class="line">        WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的src&#x2F;main&#x2F;java&#x2F;com.hth目录新建handler.security.AccessDeniedHandlerImpl类，写入如下</p>
<ul>
<li>实现了 Spring Security 的 <code>AccessDeniedHandler</code> 接口，用于处理访问被拒绝的情况。当用户尝试访问受保护的资源但是没有足够的权限时，Spring Security 会调用<code>handle</code>方法来处理访问被拒绝的情况。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        accessDeniedException.printStackTrace();</span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.NO_OPERATOR_AUTH);</span><br><span class="line">        <span class="comment">//响应给前端</span></span><br><span class="line">        WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 把hth-blog工程的SecurityConfig类修改为如下，作用是把上面两步自定义的处理器配置给Security</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部不需要认证即可访问</span></span><br><span class="line">                .anyRequest().permitAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置异常处理器</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line">        <span class="comment">//关闭默认的注销功能</span></span><br><span class="line">        http.logout().disable();</span><br><span class="line">        <span class="comment">//把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//允许跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-统一异常处理"><a href="#2-统一异常处理" class="headerlink" title="2. 统一异常处理"></a>2. 统一异常处理</h3><p>实际我们在开发过程中可能需要做很多的判断校验，如果出现了非法情况我们是期望响应对应的提示的。但是如果我们每次都自己手动去处理就会非常麻烦。我们可以选择直接抛出异常的方式，然后对异常进行统一处理。把异常中的信息封装成ResponseResult响应给前端</p>
<ol>
<li>在hth-framework工程的src&#x2F;main&#x2F;java&#x2F;com.hth目录新建exception.SystemException类，写入如下:</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个构造方法，接收的参数是枚举类型，</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(AppHttpCodeEnum httpCodeEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(httpCodeEnum.getMsg());</span><br><span class="line">         <span class="comment">//把某个枚举类里面的code和msg赋值给异常对象</span></span><br><span class="line">        <span class="built_in">this</span>.code = httpCodeEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = httpCodeEnum.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在hth-framework工程的src&#x2F;main&#x2F;java&#x2F;com.hth目录新建handler.exception.GlobalExceptionHandler类，写入如下</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RestControllerAdvice注解是 Spring MVC 提供的一个注解，用于定义一个全局异常处理器。使用了这个注解的类可以统一处理应用程序中抛出的异常，并将异常信息转换成相应的 JSON 格式返回给客户端。</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//全局异常处理。最终都会在这个类进行处理异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SystemException是我们写的类。用户登录的异常交给这里处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">systemExceptionHandler</span><span class="params">(SystemException e)</span>&#123;</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        log.error(<span class="string">&quot;出现了异常！ &#123;&#125;&quot;</span>,e);</span><br><span class="line">        <span class="comment">//从异常对象中获取提示信息封装返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(e.getCode(),e.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其它异常交给这里处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">exceptionHandler</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        log.error(<span class="string">&quot;出现了异常！ &#123;&#125;&quot;</span>,e);</span><br><span class="line">        <span class="comment">//从异常对象中获取提示信息封装返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改BlogLoginController类，增加一个if判断，如果用户在登录时没有传用户名，就抛一个异常，交给上面两步的两个异常类处理</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogLoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//BlogLoginService是我们在service目录写的接口</span></span><br><span class="line">    <span class="keyword">private</span> BlogLoginService blogLoginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="comment">//ResponseResult是我们在huanf-framework工程里面写的实体类</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="comment">//如果用户在进行登录时，没有传入&#x27;用户名&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getUserName()))&#123;</span><br><span class="line">            <span class="comment">// 提示&#x27;必须要传用户名&#x27;。AppHttpCodeEnum是我们写的枚举类。SystemException是我们写的统一异常处理的类</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.REQUIRE_USERNAME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> blogLoginService.login(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><h3 id="接口分析-4"><a href="#接口分析-4" class="headerlink" title="接口分析"></a>接口分析</h3><table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>POST</td>
<td>&#x2F;logout</td>
<td>需要token请求头</td>
</tr>
</tbody></table>
<h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>BlogLoginController类加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blogLoginService.logout();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>BlogLoginService类增加代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取token，然后解析token值获取其中的userid。SecurityContextHolder是security官方提供的类</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="comment">//LoginUser是我们写的类</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取userid</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userid</span> <span class="operator">=</span> loginUser.getUser().getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在redis根据key来删除用户的value值，注意之前我们在存key的时候，key是加了&#x27;bloglogin:&#x27;前缀</span></span><br><span class="line">        redisCache.deleteObject(<span class="string">&quot;bloglogin:&quot;</span>+userid);</span><br><span class="line">        <span class="comment">//封装响应返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>对hth-blog工程的SecurityConfig类增加代码，需要有登录状态才能执行退出登录，否则就报’401 需要登录后操作’</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//退出登录的配置。如果&#x27;没登录&#x27;就调用&#x27;退出登录&#x27;，就会报错，报的错设置为&#x27;401 需要登录后操作&#x27;，也就是authenticated</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/logout&quot;</span>).authenticated()</span><br></pre></td></tr></table></figure>

<h2 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h2><h3 id="接口分析-5"><a href="#接口分析-5" class="headerlink" title="接口分析"></a>接口分析</h3><table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;comment&#x2F;commentList</td>
<td>不需要token请求头(未登录也能看到评论信息)</td>
</tr>
</tbody></table>
<p>创建实体类，mapper，service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sg_comment&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;添加评论实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comment</span>  &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//评论类型（0代表文章评论，1代表友链评论）</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//文章id</span></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">    <span class="comment">//根评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long rootId;</span><br><span class="line">    <span class="comment">//评论内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//所回复的目标评论的userid</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentUserId;</span><br><span class="line">    <span class="comment">//回复目标评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentId;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//评论表的表数据访问层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommentMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Comment&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommentService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Comment&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;commentService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CommentMapper, Comment&gt; <span class="keyword">implements</span> <span class="title class_">CommentService</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>新建User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>  &#123;</span><br><span class="line">    <span class="comment">//主键@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">//昵称</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//用户类型：0代表普通用户，1代表管理员</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//账号状态（0正常 1停用）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//邮箱</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phonenumber;</span><br><span class="line">    <span class="comment">//用户性别（0男，1女，2未知）</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="comment">//创建人的用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//更新人</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">    <span class="comment">//关联角色id数组，非user表字段</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long[] roleIds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建CommentVo类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//文章id</span></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">    <span class="comment">//根评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long rootId;</span><br><span class="line">    <span class="comment">//评论内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//所回复的目标评论的userid</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentUserId;</span><br><span class="line">    <span class="keyword">private</span> String toCommentUserName;</span><br><span class="line">    <span class="comment">//回复目标评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommentService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Comment&gt; &#123;</span><br><span class="line">    ResponseResult <span class="title function_">commentList</span><span class="params">(Long articleId, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;commentService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CommentMapper, Comment&gt; <span class="keyword">implements</span> <span class="title class_">CommentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(String commentType, Long articleId, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//查询对应文章的根评论</span></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//对articleId进行判断</span></span><br><span class="line">        queryWrapper.eq(SystemConstants.ARTICLE_COMMENT.equals(commentType),Comment::getArticleId,articleId);</span><br><span class="line">        <span class="comment">//根评论 rootId为-1</span></span><br><span class="line">        queryWrapper.eq(Comment::getRootId,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//评论类型</span></span><br><span class="line">        queryWrapper.eq(Comment::getType,commentType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页查询。查的是整个评论区的每一条评论</span></span><br><span class="line">        Page&lt;Comment&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(pageNum,pageSize);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;CommentVo&gt; commentVoList = toCommentVoList(page.getRecords());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询所有根评论对应的子评论集合，并且赋值给对应的属性</span></span><br><span class="line">        <span class="keyword">for</span> (CommentVo commentVo : commentVoList) &#123;</span><br><span class="line">            <span class="comment">//查询对应的子评论</span></span><br><span class="line">            List&lt;CommentVo&gt; children = getChildren(commentVo.getId());</span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            commentVo.setChildren(children);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">PageVo</span>(commentVoList,page.getTotal()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">addComment</span><span class="params">(Comment comment)</span> &#123;</span><br><span class="line">        <span class="comment">//评论内容不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(comment.getContent()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.CONTENT_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        save(comment);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据根评论的id查询所对应的子评论的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 根评论的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">getChildren</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Comment::getRootId,id);</span><br><span class="line">        queryWrapper.orderByAsc(Comment::getCreateTime);</span><br><span class="line">        List&lt;Comment&gt; comments = list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;CommentVo&gt; commentVos = toCommentVoList(comments);</span><br><span class="line">        <span class="keyword">return</span> commentVos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommentVo&gt; <span class="title function_">toCommentVoList</span><span class="params">(List&lt;Comment&gt; list)</span>&#123;</span><br><span class="line">        List&lt;CommentVo&gt; commentVos = BeanCopyUtils.copyBeanList(list, CommentVo.class);</span><br><span class="line">        <span class="comment">//遍历vo集合</span></span><br><span class="line">        <span class="keyword">for</span> (CommentVo commentVo : commentVos) &#123;</span><br><span class="line">            <span class="comment">//通过creatyBy查询用户的昵称并赋值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">nickName</span> <span class="operator">=</span> userService.getById(commentVo.getCreateBy()).getNickName();</span><br><span class="line">            commentVo.setUsername(nickName);</span><br><span class="line">            <span class="comment">//通过toCommentUserId查询用户的昵称并赋值</span></span><br><span class="line">            <span class="comment">//如果toCommentUserId不为-1才进行查询</span></span><br><span class="line">            <span class="keyword">if</span>(commentVo.getToCommentUserId()!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">toCommentUserName</span> <span class="operator">=</span> userService.getById(commentVo.getToCommentUserId()).getNickName();</span><br><span class="line">                commentVo.setToCommentUserName(toCommentUserName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> commentVos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="发送评论"><a href="#发送评论" class="headerlink" title="发送评论"></a>发送评论</h2><h3 id="发送文章评论"><a href="#发送文章评论" class="headerlink" title="发送文章评论"></a>发送文章评论</h3><h4 id="接口分析-6"><a href="#接口分析-6" class="headerlink" title="接口分析"></a>接口分析</h4><p>用户登录后可以对文章发表评论，也可以对已有的评论进行回复</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>POST</td>
<td>&#x2F;comment</td>
<td>需要token头</td>
</tr>
</tbody></table>
<p>【请求体】</p>
<p>回复了文章。0表示文章评论，如果是友链评论，type应该为1</p>
<h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><p>在hth-framework工程的utils目录新建SecurityUtils类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoginUser <span class="title function_">getLoginUser</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (LoginUser) getAuthentication().getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Authentication</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Authentication <span class="title function_">getAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isAdmin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> getLoginUser().getUser().getId();</span><br><span class="line">        <span class="keyword">return</span> id != <span class="literal">null</span> &amp;&amp; id.equals(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getLoginUser().getUser().getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的handler目录新建mybatisplus.MyMetaObjectHandler类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个类是用来配置mybatis的字段自动填充。用于&#x27;发送评论&#x27;功能，由于我们在评论表无法对下面这四个字段进行插入数据(原因是前端在发送评论时，没有在请求体提供下面四个参数，所以后端在往数据库插入数据时，下面四个字段是空值)，所有就需要这个类来帮助我们往下面这四个字段自动的插入值，</span></span><br><span class="line"><span class="comment">//只要我们更新了评论表的字段，那么无法插入值的字段就自动有值了</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line">            userId = SecurityUtils.getUserId();</span><br><span class="line"><span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            userId = -1L;//表示是自己创建</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createBy&quot;</span>,userId , metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateBy&quot;</span>, userId, metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot; &quot;</span>, SecurityUtils.getUserId(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Comment类修改为如下，增加了具体的自动填充规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">  <span class="keyword">private</span> Long createBy;</span><br><span class="line">  <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">  <span class="keyword">private</span> Date createTime;</span><br><span class="line">  <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">  <span class="keyword">private</span> Long updateBy;</span><br><span class="line">  <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommentService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Comment&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询评论区的评论</span></span><br><span class="line">    ResponseResult <span class="title function_">commentList</span><span class="params">(Long articleId, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在文章的评论区发送评论</span></span><br><span class="line">    ResponseResult <span class="title function_">addComment</span><span class="params">(Comment comment)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CommentServiceImpl类，增加了发送评论的代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addComment</span><span class="params">(Comment comment)</span> &#123;</span><br><span class="line">    <span class="comment">//评论内容不能为空</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.hasText(comment.getContent()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.CONTENT_NOT_NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    save(comment);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CommentController修改为如下，增加了发送评论的请求路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"> <span class="keyword">public</span> ResponseResult <span class="title function_">addComment</span><span class="params">(<span class="meta">@RequestBody</span> AddCommentDto addCommentDto)</span>&#123;</span><br><span class="line">     <span class="type">Comment</span> <span class="variable">comment</span> <span class="operator">=</span> BeanCopyUtils.copyBean(addCommentDto, Comment.class);</span><br><span class="line">     <span class="keyword">return</span> commentService.addComment(comment);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送友链评论"><a href="#发送友链评论" class="headerlink" title="发送友链评论"></a>发送友链评论</h3><h4 id="接口分析-7"><a href="#接口分析-7" class="headerlink" title="接口分析"></a>接口分析</h4><table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;comment&#x2F;linkCommentList</td>
<td>不需要token请求头</td>
</tr>
</tbody></table>
<h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><p>CommentService接口修改为如下，为CommentList方法增加了commentType参数类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询评论区的评论。增加了commentType参数，用于区分文章的评论区、友链的评论区</span></span><br><span class="line">ResponseResult <span class="title function_">commentList</span><span class="params">(String commentType, Long articleId, Integer pageNum, Integer pageSize)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">commentList</span><span class="params">(String commentType, Long articleId, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//查询对应文章的根评论</span></span><br><span class="line">        LambdaQueryWrapper&lt;Comment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//对articleId进行判断</span></span><br><span class="line">        queryWrapper.eq(SystemConstants.ARTICLE_COMMENT.equals(commentType),Comment::getArticleId,articleId);</span><br><span class="line">        <span class="comment">//根评论 rootId为-1</span></span><br><span class="line">        queryWrapper.eq(Comment::getRootId,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//评论类型</span></span><br><span class="line">        queryWrapper.eq(Comment::getType,commentType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Comment&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(pageNum,pageSize);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;CommentVo&gt; commentVoList = toCommentVoList(page.getRecords());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询所有根评论对应的子评论集合，并且赋值给对应的属性</span></span><br><span class="line">        <span class="keyword">for</span> (CommentVo commentVo : commentVoList) &#123;</span><br><span class="line">            <span class="comment">//查询对应的子评论</span></span><br><span class="line">            List&lt;CommentVo&gt; children = getChildren(commentVo.getId());</span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            commentVo.setChildren(children);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">PageVo</span>(commentVoList,page.getTotal()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/linkCommentList&quot;)</span>	</span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">linkCommentList</span><span class="params">(Integer pageNum,Integer pageSize)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commentService.commentList(SystemConstants.LINK_COMMENT,<span class="literal">null</span>,pageNum,pageSize);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><p>UserServiceImpl类修改为如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId();</span><br><span class="line">    <span class="comment">//根据用户id查询用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">    <span class="comment">//封装成UserInfoVo</span></span><br><span class="line">    <span class="type">UserInfoVo</span> <span class="variable">vo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(user,UserInfoVo.class);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把hth-blog工程的SecurityConfig类修改为如下，增加了&#x2F;user&#x2F;userInfo接口的访问限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为方便测试查询个人信息，我们把查询个人信息的接口设置为需要登录才能访问</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/user/userInfo&quot;</span>).authenticated()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.userInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="接口分析-8"><a href="#接口分析-8" class="headerlink" title="接口分析"></a>接口分析</h3><p>要求用户能够在注册界面完成用户的注册。要求用户名，昵称，邮箱不能和数据库中原有的数据重复。如果某项重复了注册失败并且要有对应的提示。并且要求用户名，密码，昵称，邮箱都不能为空。注意:密码必须密文存储到数据库中</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>POST</td>
<td>&#x2F;user&#x2F;register</td>
<td>不需要token请求头</td>
</tr>
</tbody></table>
<h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><p>UserService接口修改为如下，增加了用户注册接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户注册功能</span></span><br><span class="line">ResponseResult <span class="title function_">register</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">register</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//对数据进行非空判断</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getUserName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.USERNAME_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.PASSWORD_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getEmail()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.EMAIL_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getNickName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.NICKNAME_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对数据进行是否存在的判断</span></span><br><span class="line">        <span class="keyword">if</span>(userNameExist(user.getUserName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.USERNAME_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nickNameExist(user.getNickName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.NICKNAME_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对密码进行加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodePassword</span> <span class="operator">=</span> passwordEncoder.encode(user.getPassword());</span><br><span class="line">        user.setPassword(encodePassword);</span><br><span class="line">        <span class="comment">//存入数据库</span></span><br><span class="line">        save(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkUserNameUnique</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUserName,userName))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPhoneUnique</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getPhonenumber,user.getPhonenumber()))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkEmailUnique</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getEmail,user.getEmail()))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">nickNameExist</span><span class="params">(String nickName)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getNickName,nickName);</span><br><span class="line">        <span class="keyword">return</span> count(queryWrapper)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">userNameExist</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,userName);</span><br><span class="line">        <span class="keyword">return</span> count(queryWrapper)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    <span class="comment">//注册功能</span></span><br><span class="line">    <span class="keyword">return</span> userService.register(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>需要通过日志记录接口调用信息。便于后期调试排查。并且可能有很多接口都需要进行日志的记录。接口被调用时日志打印格式如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log.info(<span class="string">&quot;======================Start======================&quot;</span>);</span><br><span class="line"><span class="comment">// 打印请求 URL</span></span><br><span class="line">log.info(<span class="string">&quot;请求URL   : &#123;&#125;&quot;</span>,);</span><br><span class="line"><span class="comment">// 打印描述信息</span></span><br><span class="line">log.info(<span class="string">&quot;接口描述   : &#123;&#125;&quot;</span>, );</span><br><span class="line"><span class="comment">// 打印 Http method</span></span><br><span class="line">log.info(<span class="string">&quot;请求方式   : &#123;&#125;&quot;</span>, );</span><br><span class="line"><span class="comment">// 打印调用 controller 的全路径以及执行方法</span></span><br><span class="line">log.info(<span class="string">&quot;请求类名   : &#123;&#125;.&#123;&#125;&quot;</span>, );</span><br><span class="line"><span class="comment">// 打印请求的 IP</span></span><br><span class="line">log.info(<span class="string">&quot;访问IP    : &#123;&#125;&quot;</span>,);</span><br><span class="line"><span class="comment">// 打印请求入参</span></span><br><span class="line">log.info(<span class="string">&quot;传入参数   : &#123;&#125;&quot;</span>,);</span><br><span class="line"><span class="comment">// 打印出参</span></span><br><span class="line">log.info(<span class="string">&quot;返回参数   : &#123;&#125;&quot;</span>, );</span><br><span class="line"><span class="comment">// 结束后换行</span></span><br><span class="line">log.info(<span class="string">&quot;=======================end=======================&quot;</span> + System.lineSeparator());</span><br></pre></td></tr></table></figure>

<p>相当于是对原有的功能进行增强。并且是批量的增强，这个时候就非常适合用AOP来进行实现，不对业务代码进行侵入，完全解耦</p>
<h3 id="AOP实现日志记录的分析"><a href="#AOP实现日志记录的分析" class="headerlink" title="AOP实现日志记录的分析"></a>AOP实现日志记录的分析</h3><p>定义切面类，在切面类通过 ‘切点表达式’ 或 ‘自定义注解’，来指定切点</p>
<p>切面类: 指定要增强哪个切点，里面写通知的方法，通知的方法里面写具体的增强代码</p>
<p>AOP中的通知方法有五种，如下</p>
<table>
<thead>
<tr>
<th>通知方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>前置通知</td>
<td>在一个方法执行之前的阶段，执行通知。可以在目标方法执行前做一些预处理操作</td>
</tr>
<tr>
<td>后置通知</td>
<td>在一个方法执行之后的阶段，执行通知。通常用于执行一些清理操作或日志记录</td>
</tr>
<tr>
<td>异常通知</td>
<td>在方法抛出异常退出时执行的通知。用于处理目标方法抛出的异常情况</td>
</tr>
<tr>
<td>最终通知</td>
<td>无论目标方法是否成功执行，最终通知总会被执行，常用于释放资源</td>
</tr>
<tr>
<td>环绕通知</td>
<td>环绕通知是AOP中最灵活的通知类型。能在目标方法前后完全控制连接点，决定是否执行目标方法并进行额外处理</td>
</tr>
</tbody></table>
<h3 id="AOP实现日志记录的代码"><a href="#AOP实现日志记录的代码" class="headerlink" title="AOP实现日志记录的代码"></a>AOP实现日志记录的代码</h3><p>在hth-framework工程的pom.xml添加如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--AOP--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的src&#x2F;main&#x2F;java&#x2F;com&#x2F;hth目录新建annotation.mySystemlog接口，写入如下，作为自定义注解的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//表示Systemlog注解类会保持到runtime阶段</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//表示Systemlog注解类的注解功能只能用于方法上</span></span><br><span class="line"><span class="comment">//&#x27;自定义注解&#x27;类，以后就可以使用@Systemlog注解了，注解名就是下面那行的接口名</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemLog &#123;</span><br><span class="line">    <span class="comment">//为controller提供接口的描述信息，用于&#x27;日志记录&#x27;功能</span></span><br><span class="line">    String <span class="title function_">businessName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的src&#x2F;main&#x2F;java&#x2F;com&#x2F;hth目录新建aspect.LogAspect类，写入如下，作为切面类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">////告诉spring容器，LogAspect是切面类</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定哪个切点，以后哪个类想成为切点，就在哪个类添加上面那行的注解。例如下面这个pt()就是切点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.hth.annotation.SystemLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义通知的方法(这里用的是环绕通知)，通知的方法也就是增强的具体代码。@Around注解表示该通知的方法会用在哪个切点</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">     <span class="comment">//ProceedingJoinPoint可以拿到被增强方法的信息</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">printLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        Object ret;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handleBefore(joinPoint);</span><br><span class="line">            ret = joinPoint.proceed();</span><br><span class="line">            handleAfter(ret);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 结束后换行</span></span><br><span class="line">            log.info(<span class="string">&quot;=======End=======&quot;</span> + System.lineSeparator());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleAfter</span><span class="params">(Object ret)</span> &#123;</span><br><span class="line">        <span class="comment">// 打印出参</span></span><br><span class="line">        log.info(<span class="string">&quot;Response       : &#123;&#125;&quot;</span>, JSON.toJSONString(ret));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBefore</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();</span><br><span class="line">        <span class="comment">//获取被增强方法上的注解对象</span></span><br><span class="line">        <span class="type">SystemLog</span> <span class="variable">systemLog</span> <span class="operator">=</span> getSystemLog(joinPoint);</span><br><span class="line">        log.info(<span class="string">&quot;=======Start=======&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印请求 URL</span></span><br><span class="line">        log.info(<span class="string">&quot;URL            : &#123;&#125;&quot;</span>,request.getRequestURL());</span><br><span class="line">        <span class="comment">// 打印描述信息</span></span><br><span class="line">        log.info(<span class="string">&quot;BusinessName   : &#123;&#125;&quot;</span>,systemLog.businessName());</span><br><span class="line">        <span class="comment">// 打印 Http method</span></span><br><span class="line">        log.info(<span class="string">&quot;HTTP Method    : &#123;&#125;&quot;</span>,request.getMethod());</span><br><span class="line">        <span class="comment">// 打印调用 controller 的全路径以及执行方法</span></span><br><span class="line">        log.info(<span class="string">&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;</span>,joinPoint.getSignature().getDeclaringTypeName(),((MethodSignature) joinPoint.getSignature()).getName());</span><br><span class="line">        <span class="comment">// 打印请求的 IP</span></span><br><span class="line">        log.info(<span class="string">&quot;IP             : &#123;&#125;&quot;</span>,request.getRemoteHost());</span><br><span class="line">        <span class="comment">// 打印请求入参</span></span><br><span class="line">        log.info(<span class="string">&quot;Request Args   : &#123;&#125;&quot;</span>, JSON.toJSONString(joinPoint.getArgs()) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> SystemLog <span class="title function_">getSystemLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">SystemLog</span> <span class="variable">systemLog</span> <span class="operator">=</span> methodSignature.getMethod().getAnnotation(SystemLog.class);</span><br><span class="line">        <span class="keyword">return</span> systemLog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把hth-blog工程的UserController类修改为如下，作用是在每一个业务访问接口添加自定义的@Systemlog注解，并添加businessName属性，属性值就是你这个业务接口的作用描述(看着业务自己写描述就行)。拓展: 在每一个Controller都这样做</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main<span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userInfo&quot;)</span></span><br><span class="line">    <span class="meta">@SystemLog(businessName = &quot;查询个人信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.userInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping(&quot;/userInfo&quot;)</span></span><br><span class="line">    <span class="meta">@SystemLog(businessName = &quot;更新用户信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">updateUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updateUserInfo(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="meta">@SystemLog(businessName = &quot;用户注册&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.register(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="swagger学习"><a href="#swagger学习" class="headerlink" title="swagger学习"></a>swagger学习</h1><p>swagger 是一套基于 OpenAPI 规范构建的开源工具，用于生成接口文档，我们需要使用swagger生成 ‘博客前台模块’ 和 ‘博客后台模块’ 的接口文档。swagger 可以帮助我们设计、构建、记录以及使用 Rest API。当下很多公司都采取前后端分离的开发模式，前端和后端的工作由不同的工程师完成，在这种开发模式下，维持一份及时更新且完整的 Rest API 文档将会极大的提高我们的工作效率。</p>
<p>swagger的优点：</p>
<p>①代码变，文档变。只需要少量的注解，Swagger 就可以根据代码自动生成 API 文档，很好的保证了文档的时效性</p>
<p>②跨语言性，支持 40 多种语言</p>
<p>③Swagger UI 呈现出来的是一份可交互式的 API 文档，我们可以直接在文档页面尝试 API 的调用，省去了准备复杂的调用参数的过程</p>
<ol>
<li>在hth-framework工程的pom.xml添加如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"> 	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在hth-blog的application.yml添加如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # springboot <span class="number">2.6</span>版本之后需要配置ant_path_matcher才能生使swagger生成接口文档</span><br><span class="line">  # 我们目前的springboot版本是<span class="number">2.5</span><span class="number">.0</span>，不需要配置ant_path_matcher也可正常使用swagger</span><br><span class="line">  mvc:</span><br><span class="line">    pathmatch:</span><br><span class="line">      matching-strategy: ant_path_matcher</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>需要为哪个工程通过swagger生成接口文档，就在哪个工程创建一个配置类，并在这个配置类添加 <a href="">@EnableSwagger2</a> 注解。由于我们的 ‘博客前台模块’，也就是hth-blog工程已经(在前面的学习中)写好了各种功能，我们可以为hth-blog工程通过swagger生成接口文档。</li>
<li><a href="http://localhost:7777/swagger-ui.html">http://localhost:7777/swagger-ui.html</a></li>
</ol>
<h3 id="自定义-Controller的信息"><a href="#自定义-Controller的信息" class="headerlink" title="自定义-Controller的信息"></a>自定义-Controller的信息</h3><ol>
<li>在hth-blog工程的CommentController类，添加如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;评论的相关接口文档&quot;, description = &quot;我是描述信息&quot;)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>浏览器访问swagger提供的可视化页面。查看相关信息有没有在页面进行展示</li>
</ol>
<h3 id="请求接口的信息"><a href="#请求接口的信息" class="headerlink" title="请求接口的信息"></a>请求接口的信息</h3><ol>
<li>在hth-blog工程的CommentController类的@GetMapping(“&#x2F;linkCommentList”)的下一行添加如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;友链评论列表&quot;,notes = &quot;获取友链评论区的评论&quot;)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>浏览器访问swagger提供的可视化页面。查看相关信息有没有在页面进行展示</li>
</ol>
<h3 id="自定义-请求接口的参数信息"><a href="#自定义-请求接口的参数信息" class="headerlink" title="自定义-请求接口的参数信息"></a>自定义-请求接口的参数信息</h3><ol>
<li>在hth-blog工程的CommentController类的@GetMapping(“&#x2F;linkCommentList”)的下一行添加如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">	@ApiImplicitParam(name = &quot;pageNum&quot;,value = &quot;页号&quot;),</span></span><br><span class="line"><span class="meta">	@ApiImplicitParam(name = &quot;pageSize&quot;,value = &quot;每页大小&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>浏览器访问swagger提供的可视化页面。查看相关信息有没有在页面进行展示</li>
</ol>
<h3 id="自定义-实体类描述的信息"><a href="#自定义-实体类描述的信息" class="headerlink" title="自定义-实体类描述的信息"></a>自定义-实体类描述的信息</h3><ol>
<li>在hth-framework工程的Comment类的类名的上一行添加如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(description = &quot;添加评论的实体类&quot;)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>浏览器访问swagger提供的可视化页面。查看相关信息有没有在页面进行展示</li>
</ol>
<p>问题：Comment是我们评论表的大类，我们不能在后端使用Comment类去接收前端的请求体，杀鸡用牛刀。应该用DTO类，前面我们了解过VO类，其实概念差不多，DTO就是数据传输对象hth-framework工程的domain目录新建addCommentDto类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;添加评论dto&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddCommentDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//评论类型（0代表文章评论，1代表友链评论）</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(notes = &quot;评论类型（0代表文章评论，1代表友链评论）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">//文章id</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(notes = &quot;文章id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">    <span class="comment">//根评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long rootId;</span><br><span class="line">    <span class="comment">//评论内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//所回复的目标评论的userid</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentUserId;</span><br><span class="line">    <span class="comment">//回复目标评论id</span></span><br><span class="line">    <span class="keyword">private</span> Long toCommentId;</span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把hth-blog工程的CommentController类的addComment方法修改为如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">addComment</span><span class="params">(<span class="meta">@RequestBody</span> AddCommentDto addCommentDto)</span>&#123;</span><br><span class="line">    <span class="type">Comment</span> <span class="variable">comment</span> <span class="operator">=</span> BeanCopyUtils.copyBean(addCommentDto, Comment.class);</span><br><span class="line">    <span class="keyword">return</span> commentService.addComment(comment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器访问swagger提供的可视化页面。查看相关信息有没有在页面进行展示</p>
<h3 id="自定义-顶部文档的信息"><a href="#自定义-顶部文档的信息" class="headerlink" title="自定义-顶部文档的信息"></a>自定义-顶部文档的信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">customDocket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.hth.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;MyBlog&quot;</span>, <span class="string">&quot;http://www.hth.com&quot;</span>, <span class="string">&quot;2093913128@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;文档标题1&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;文档描述2&quot;</span>)</span><br><span class="line">                .contact(contact)   <span class="comment">// 联系方式</span></span><br><span class="line">                .version(<span class="string">&quot;1.1.1&quot;</span>)  <span class="comment">// 版本</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="博客后台"><a href="#博客后台" class="headerlink" title="博客后台"></a>博客后台</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="接口分析-9"><a href="#接口分析-9" class="headerlink" title="接口分析"></a>接口分析</h3><p>使用SpringSecurity安全框架来实现登录功能，并且实现登录的校验，也就是把数据库的用户表跟页面输入的用户名密码做比较</p>
<p>需求: 后台所有功能都必须登录才能使用</p>
<h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><ul>
<li>登录：</li>
</ul>
<ol>
<li>自定义登录接口：调用ProviderManager的方法进行认证 如果认证通过生成jwt,  把用户信息存入redis中</li>
</ol>
<ul>
<li><code>ProviderManager</code> 是 Spring Security 中用于管理身份验证提供者的类。它实现了 <code>AuthenticationManager</code> 接口，是 Spring Security 中默认的身份验证管理器。<code>ProviderManager</code> 通过调用身份验证提供者来进行身份验证，并将身份验证请求传递给它所管理的一组身份验证提供者</li>
</ul>
<ol start="2">
<li>自定义UserDetailsService：在这个实现类中去查询数据库，注意配置passwordEncoder为BCryptPasswordEncoder</li>
</ol>
<ul>
<li>校验：</li>
</ul>
<p>​	1. 定义Jwt认证过滤器</p>
<p>​	2. 获取token</p>
<p>​	3. 解析token获取其中的userid</p>
<pre><code> 4. 从redis中获取用户信息
</code></pre>
<ol start="5">
<li>存入SecurityContextHolder</li>
</ol>
<h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><p>新建SystemLoginService接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//认证，判断用户登录是否成功</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemLoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SystemLoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//AuthenticationManager是security官方提供的接口</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//RedisCache是我们在hth-framework工程的config目录写的类</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//封装登录的用户名和密码</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUserName(),user.getPassword());</span><br><span class="line">        <span class="comment">//在下一行之前，封装的数据会先走UserDetailsServiceImpl实现类，这个实现类在我们的hth-framework工程的service/impl目录里面</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        <span class="comment">//上面那一行会得到所有的认证用户信息authenticate。然后下一行需要判断用户认证是否通过，如果authenticate的值是null，就说明认证没有通过</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(authenticate))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取userid</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">        <span class="comment">//把这个userid通过我们写的JwtUtil工具类转成密文，这个密文就是token值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面那行的第一个参数: 把上面那行的jwt，也就是token值保存到Redis。存到时候是键值对的形式，值就是jwt，key要加上 &quot;bloglogin:&quot; 前缀</span></span><br><span class="line">        <span class="comment">//下面那行的第二个参数: 要把哪个对象存入Redis。我们写的是loginUser，里面有权限信息，后面会用到</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span>+userId,loginUser);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把token封装 返回</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建LoginController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SystemLoginService systemLoginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getUserName()))&#123;</span><br><span class="line">            <span class="comment">//提示 必须要传用户名</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.REQUIRE_USERNAME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> systemLoginService.login(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><h3 id="接口分析-10"><a href="#接口分析-10" class="headerlink" title="接口分析"></a>接口分析</h3><p>接口设计。对应用户只能使用自己的权限所允许使用的功能</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;getInfo</td>
<td>需要token请求头</td>
</tr>
</tbody></table>
<p>响应格式如下。如果用户id为1代表管理员，roles 中只需要有admin，permissions中需要有所有菜单类型为C或者F的，状态为正常的，未被删除的权限</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;system:user:list&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;system:role:list&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;system:menu:list&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;system:user:query&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;system:user:add&quot;</span></span><br><span class="line">            <span class="comment">//此次省略1000字</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;roles&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;admin&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://r7yxkqloa.bkt.clouddn.com/2022/03/05/75fd15587811443a9a9a771f24da458d.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;23412332@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span><span class="string">&quot;sg3334&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;操作成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><p>新建AdminUserInfoVo类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminUserInfoVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserInfoVo user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建Menu类、Role类、RoleService接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RoleMapper, Role&gt; <span class="keyword">implements</span> <span class="title class_">RoleService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleMenuService roleMenuService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">selectRoleKeyByUserId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否是管理员 如果是返回集合中只需要有admin</span></span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">1L</span>)&#123;</span><br><span class="line">            List&lt;String&gt; roleKeys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            roleKeys.add(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> roleKeys;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则查询用户所具有的角色信息</span></span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectRoleKeyByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建RoleMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Role&gt; &#123;</span><br><span class="line">    <span class="comment">//查询普通用户的角色权限</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectRoleKeyByOtherUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的resources目录新建mapper文件夹，在mapper文件夹里面新建RoleMapper.xml文件，写入如下，是查询用户的角色信息的具体代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hth.mapper.RoleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRoleKeyByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            r.`role_key`</span><br><span class="line">        FROM</span><br><span class="line">            sg_blog.`sys_user_role` ur</span><br><span class="line">            LEFT JOIN sg_blog.`sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            r.`status` = 0 AND</span><br><span class="line">            r.`del_flag` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建MenuService接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//如果是管理员，返回所有的权限</span></span><br><span class="line">    <span class="keyword">if</span>(SecurityUtils.isAdmin())&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Menu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.in(Menu::getMenuType,SystemConstants.MENU,SystemConstants.BUTTON);</span><br><span class="line">        wrapper.eq(Menu::getStatus,SystemConstants.STATUS_NORMAL);</span><br><span class="line">        List&lt;Menu&gt; menus = list(wrapper);</span><br><span class="line">        List&lt;String&gt; perms = menus.stream()</span><br><span class="line">                .map(Menu::getPerms)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> perms;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则返回所具有的权限</span></span><br><span class="line">    <span class="keyword">return</span> getBaseMapper().selectPermsByUserId(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建MenuMapper接口,用于查询非超级管理员的权限信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line">    <span class="comment">//查询普通用户的权限信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByOtherUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建mapper&#x2F;MenuMapper.xml文件，写入如下，是查询非超级管理员的权限信息的具体代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;select id=<span class="string">&quot;selectPermsByUserId&quot;</span> resultType=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span><br><span class="line">    SELECT</span><br><span class="line">        DISTINCT m.perms</span><br><span class="line">    FROM</span><br><span class="line">        sg_blog.`sys_user_role` ur</span><br><span class="line">        LEFT JOIN sg_blog.`sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">        LEFT JOIN sg_blog.`sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">    WHERE</span><br><span class="line">        ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">        m.`menu_type` IN (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;F&#x27;</span>) AND</span><br><span class="line">        m.`status` = <span class="number">0</span> AND</span><br><span class="line">        m.`del_flag` = <span class="number">0</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>把hth-admin工程的LoginController类修改为如下，增加了查询角色信息、权限信息的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;getInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult&lt;AdminUserInfoVo&gt; <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前登录的用户</span></span><br><span class="line">    <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> SecurityUtils.getLoginUser();</span><br><span class="line">    <span class="comment">//根据用户id查询权限信息</span></span><br><span class="line">    List&lt;String&gt; perms = menuService.selectPermsByUserId(loginUser.getUser().getId());</span><br><span class="line">    <span class="comment">//根据用户id查询角色信息</span></span><br><span class="line">    List&lt;String&gt; roleKeyList = roleService.selectRoleKeyByUserId(loginUser.getUser().getId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> loginUser.getUser();</span><br><span class="line">    <span class="type">UserInfoVo</span> <span class="variable">userInfoVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(user, UserInfoVo.class);</span><br><span class="line">    <span class="comment">//封装数据返回</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AdminUserInfoVo</span> <span class="variable">adminUserInfoVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdminUserInfoVo</span>(perms,roleKeyList,userInfoVo);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(adminUserInfoVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><h3 id="接口分析-11"><a href="#接口分析-11" class="headerlink" title="接口分析"></a>接口分析</h3><p>接口设计。后台系统需要能实现不同的用户权限可以看到不同的功能，即左侧的导航栏</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;getRouters</td>
<td>需要token请求头</td>
</tr>
</tbody></table>
<p>响应格式如下: 前端为了实现动态路由的效果，需要后端有接口能返回用户所能访问的菜单数据。注意: 返回的菜单数据需要体现父子菜单的层级关系</p>
<p>如果用户id为1代表管理员，menus中需要有所有菜单类型为C或者M的，C表示菜单，M表示目录，状态为正常的，未被删除的权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">	<span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">		<span class="string">&quot;menus&quot;</span>:[</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="string">&quot;children&quot;</span>:[],</span><br><span class="line">				<span class="string">&quot;component&quot;</span>:<span class="string">&quot;content/article/write/index&quot;</span>,</span><br><span class="line">				<span class="string">&quot;createTime&quot;</span>:<span class="string">&quot;2022-01-08 11:39:58&quot;</span>,</span><br><span class="line">				<span class="string">&quot;icon&quot;</span>:<span class="string">&quot;build&quot;</span>,</span><br><span class="line">				<span class="string">&quot;id&quot;</span>:<span class="number">2023</span>,</span><br><span class="line">				<span class="string">&quot;menuName&quot;</span>:<span class="string">&quot;写博文&quot;</span>,</span><br><span class="line">				<span class="string">&quot;menuType&quot;</span>:<span class="string">&quot;C&quot;</span>,</span><br><span class="line">				<span class="string">&quot;orderNum&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">				<span class="string">&quot;parentId&quot;</span>:<span class="number">0</span>,</span><br><span class="line">				<span class="string">&quot;path&quot;</span>:<span class="string">&quot;write&quot;</span>,</span><br><span class="line">				<span class="string">&quot;perms&quot;</span>:<span class="string">&quot;content:article:writer&quot;</span>,</span><br><span class="line">				<span class="string">&quot;status&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">				<span class="string">&quot;visible&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="string">&quot;children&quot;</span>:[</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="string">&quot;children&quot;</span>:[],</span><br><span class="line">						<span class="string">&quot;component&quot;</span>:<span class="string">&quot;system/user/index&quot;</span>,</span><br><span class="line">						<span class="string">&quot;createTime&quot;</span>:<span class="string">&quot;2021-11-12 18:46:19&quot;</span>,</span><br><span class="line">						<span class="string">&quot;icon&quot;</span>:<span class="string">&quot;user&quot;</span>,</span><br><span class="line">						<span class="string">&quot;id&quot;</span>:<span class="number">100</span>,</span><br><span class="line">						<span class="string">&quot;menuName&quot;</span>:<span class="string">&quot;用户管理&quot;</span>,</span><br><span class="line">						<span class="string">&quot;menuType&quot;</span>:<span class="string">&quot;C&quot;</span>,</span><br><span class="line">						<span class="string">&quot;orderNum&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">						<span class="string">&quot;parentId&quot;</span>:<span class="number">1</span>,</span><br><span class="line">						<span class="string">&quot;path&quot;</span>:<span class="string">&quot;user&quot;</span>,</span><br><span class="line">						<span class="string">&quot;perms&quot;</span>:<span class="string">&quot;system:user:list&quot;</span>,</span><br><span class="line">						<span class="string">&quot;status&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">						<span class="string">&quot;visible&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="string">&quot;children&quot;</span>:[],</span><br><span class="line">						<span class="string">&quot;component&quot;</span>:<span class="string">&quot;system/role/index&quot;</span>,</span><br><span class="line">						<span class="string">&quot;createTime&quot;</span>:<span class="string">&quot;2021-11-12 18:46:19&quot;</span>,</span><br><span class="line">						<span class="string">&quot;icon&quot;</span>:<span class="string">&quot;peoples&quot;</span>,</span><br><span class="line">						<span class="string">&quot;id&quot;</span>:<span class="number">101</span>,</span><br><span class="line">						<span class="string">&quot;menuName&quot;</span>:<span class="string">&quot;角色管理&quot;</span>,</span><br><span class="line">						<span class="string">&quot;menuType&quot;</span>:<span class="string">&quot;C&quot;</span>,</span><br><span class="line">						<span class="string">&quot;orderNum&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">						<span class="string">&quot;parentId&quot;</span>:<span class="number">1</span>,</span><br><span class="line">						<span class="string">&quot;path&quot;</span>:<span class="string">&quot;role&quot;</span>,</span><br><span class="line">						<span class="string">&quot;perms&quot;</span>:<span class="string">&quot;system:role:list&quot;</span>,</span><br><span class="line">						<span class="string">&quot;status&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">						<span class="string">&quot;visible&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="string">&quot;children&quot;</span>:[],</span><br><span class="line">						<span class="string">&quot;component&quot;</span>:<span class="string">&quot;system/menu/index&quot;</span>,</span><br><span class="line">						<span class="string">&quot;createTime&quot;</span>:<span class="string">&quot;2021-11-12 18:46:19&quot;</span>,</span><br><span class="line">						<span class="string">&quot;icon&quot;</span>:<span class="string">&quot;tree-table&quot;</span>,</span><br><span class="line">						<span class="string">&quot;id&quot;</span>:<span class="number">102</span>,</span><br><span class="line">						<span class="string">&quot;menuName&quot;</span>:<span class="string">&quot;菜单管理&quot;</span>,</span><br><span class="line">						<span class="string">&quot;menuType&quot;</span>:<span class="string">&quot;C&quot;</span>,</span><br><span class="line">						<span class="string">&quot;orderNum&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">						<span class="string">&quot;parentId&quot;</span>:<span class="number">1</span>,</span><br><span class="line">						<span class="string">&quot;path&quot;</span>:<span class="string">&quot;menu&quot;</span>,</span><br><span class="line">						<span class="string">&quot;perms&quot;</span>:<span class="string">&quot;system:menu:list&quot;</span>,</span><br><span class="line">						<span class="string">&quot;status&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">						<span class="string">&quot;visible&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">					&#125;</span><br><span class="line">				],</span><br><span class="line">				<span class="string">&quot;createTime&quot;</span>:<span class="string">&quot;2021-11-12 18:46:19&quot;</span>,</span><br><span class="line">				<span class="string">&quot;icon&quot;</span>:<span class="string">&quot;system&quot;</span>,</span><br><span class="line">				<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">				<span class="string">&quot;menuName&quot;</span>:<span class="string">&quot;系统管理&quot;</span>,</span><br><span class="line">				<span class="string">&quot;menuType&quot;</span>:<span class="string">&quot;M&quot;</span>,</span><br><span class="line">				<span class="string">&quot;orderNum&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">				<span class="string">&quot;parentId&quot;</span>:<span class="number">0</span>,</span><br><span class="line">				<span class="string">&quot;path&quot;</span>:<span class="string">&quot;system&quot;</span>,</span><br><span class="line">				<span class="string">&quot;perms&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">				<span class="string">&quot;status&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">				<span class="string">&quot;visible&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;操作成功&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h3><p>新建RoutersVo类，写入如下，负责把指定字段返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoutersVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; menus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Menu类增加children字段(成员变量)、增加了@Accessors(chain](<a href="https://www.yuque.com/Accessors(chain)">https://www.yuque.com/Accessors(chain)</a> &#x3D; true)注解 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Accessors(chain = true)</span> <span class="comment">//允许链式编程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于数据库没有children字段，所以我们要添加@TableField(exist = false)注解让mybatis在查表时不查询这个字段</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Menu&gt; children;</span><br></pre></td></tr></table></figure>

<p>MenuService接口修改为如下，增加了查询用户的路由信息(权限菜单)的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Menu&gt; &#123;</span><br><span class="line">    <span class="comment">//查询用户的权限信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line">    <span class="comment">//查询用户的路由信息，也就是查询权限菜单</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">MenuMapper</span> <span class="variable">menuMapper</span> <span class="operator">=</span> getBaseMapper();</span><br><span class="line">        List&lt;Menu&gt; menus = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//判断是否是管理员</span></span><br><span class="line">        <span class="keyword">if</span>(SecurityUtils.isAdmin())&#123;</span><br><span class="line">            <span class="comment">//如果是 获取所有符合要求的Menu</span></span><br><span class="line">            menus = menuMapper.selectAllRouterMenu();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则  获取当前用户所具有的Menu</span></span><br><span class="line">            menus = menuMapper.selectRouterMenuTreeByUserId(userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建tree</span></span><br><span class="line">        <span class="comment">//先找出第一层的菜单  然后去找他们的子菜单设置到children属性中</span></span><br><span class="line">        List&lt;Menu&gt; menuTree = builderMenuTree(menus,<span class="number">0L</span>);</span><br><span class="line">        <span class="keyword">return</span> menuTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">selectMenuList</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Menu&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//menuName模糊查询</span></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(menu.getMenuName()),Menu::getMenuName,menu.getMenuName());</span><br><span class="line">        queryWrapper.eq(StringUtils.hasText(menu.getStatus()),Menu::getStatus,menu.getStatus());</span><br><span class="line">        <span class="comment">//排序 parent_id和order_num</span></span><br><span class="line">        queryWrapper.orderByAsc(Menu::getParentId,Menu::getOrderNum);</span><br><span class="line">        List&lt;Menu&gt; menus = list(queryWrapper);;</span><br><span class="line">        <span class="keyword">return</span> menus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasChild</span><span class="params">(Long menuId)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Menu&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Menu::getParentId,menuId);</span><br><span class="line">        <span class="keyword">return</span> count(queryWrapper) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">selectMenuListByRoleId</span><span class="params">(Long roleId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectMenuListByRoleId(roleId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">builderMenuTree</span><span class="params">(List&lt;Menu&gt; menus, Long parentId)</span> &#123;</span><br><span class="line">        List&lt;Menu&gt; menuTree = menus.stream()</span><br><span class="line">                .filter(menu -&gt; menu.getParentId().equals(parentId))</span><br><span class="line">                .map(menu -&gt; menu.setChildren(getChildren(menu, menus)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> menuTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取存入参数的 子Menu集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menus</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">getChildren</span><span class="params">(Menu menu, List&lt;Menu&gt; menus)</span> &#123;</span><br><span class="line">        List&lt;Menu&gt; childrenList = menus.stream()</span><br><span class="line">                .filter(m -&gt; m.getParentId().equals(menu.getId()))</span><br><span class="line">                .map(m-&gt;m.setChildren(getChildren(m,menus)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> childrenList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MenuMapper接口修改为如下，增加了2个(一个查超级管理员，另一个查普通用户)查询权限菜单的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line">    <span class="comment">//查询普通用户的权限信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByOtherUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">    <span class="comment">//查询超级管理员的路由信息(权限菜单)</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectAllRouterMenu</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//查询普通用户的路由信息(权限菜单)</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectOtherRouterMenuTreeByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MenuMapper.xml文件修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hth.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.perms</span><br><span class="line">        FROM</span><br><span class="line">            sg_blog.`sys_user_role` ur</span><br><span class="line">            LEFT JOIN sg_blog.`sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">            LEFT JOIN sg_blog.`sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;F&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllRouterMenu&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hth.domain.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">          DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,&#x27;&#x27;) AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time</span><br><span class="line">        FROM</span><br><span class="line">            sg_blog.`sys_menu` m</span><br><span class="line">        WHERE</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;M&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">        ORDER BY</span><br><span class="line">            m.parent_id,m.order_num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRouterMenuTreeByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hth.domain.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">          DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,&#x27;&#x27;) AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time</span><br><span class="line">        FROM</span><br><span class="line">            sg_blog.`sys_user_role` ur</span><br><span class="line">            LEFT JOIN sg_blog.`sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">            LEFT JOIN sg_blog.`sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;M&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">        ORDER BY</span><br><span class="line">            m.parent_id,m.order_num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>LoginController类修改为如下，增加了查询路由信息(权限菜单)的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/getRouters&quot;)</span></span><br><span class="line">    <span class="comment">//RoutersVo是我们在hth-framework工程写的类</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;RoutersVo&gt; <span class="title function_">getRouters</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户id来查询menu(权限菜单)。要求查询结果是tree的形式，也就是子父菜单树</span></span><br><span class="line">        List&lt;Menu&gt; menus = menuService.selectRouterMenuTreeByUserId(userId);</span><br><span class="line">        <span class="comment">//封装响应返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(<span class="keyword">new</span> <span class="title class_">RoutersVo</span>(menus));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="退出登录-1"><a href="#退出登录-1" class="headerlink" title="退出登录"></a>退出登录</h2><h3 id="接口分析-12"><a href="#接口分析-12" class="headerlink" title="接口分析"></a>接口分析</h3><p>删除redis中的用户信息</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>POST</td>
<td>&#x2F;user&#x2F;logout</td>
<td>需要token请求头</td>
</tr>
</tbody></table>
<h3 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//获取当前登录的用户id。SecurityUtils是我们在hth-framework工程写的类</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//删除redis中对应的值</span></span><br><span class="line">       redisCache.deleteObject(<span class="string">&quot;login:&quot;</span> + userId);</span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/user/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//退出登录</span></span><br><span class="line">        <span class="keyword">return</span> systemLoginService.logout();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="标签列表"><a href="#标签列表" class="headerlink" title="标签列表"></a>标签列表</h2><h3 id="查询列表"><a href="#查询列表" class="headerlink" title="查询列表"></a>查询列表</h3><h4 id="接口分析-13"><a href="#接口分析-13" class="headerlink" title="接口分析"></a>接口分析</h4><p>为了方便后期对文章进行管理，需要提供标签的功能，一个文章可以有多个标签。在后台需要分页查询标签功能，要求能根据标签名进行分页查询对应的文章</p>
<p>注意：不能把删除了的标签查询出来。除了可以根据标签名查询文章，后期还要添加根据备注名查询文章</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
</tr>
</thead>
<tbody><tr>
<td>Get</td>
<td>content&#x2F;tag&#x2F;list</td>
</tr>
</tbody></table>
<h4 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h4><p>新建com.huanf.dto.TagListDto类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;查询标签的请求参数dto&quot;)</span> <span class="comment">//这个是关于swagger的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagListDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求参数。用户可传可不传，这两个参数是给用户在搜索框根据name查询对应的标签，或根据remark查询对应的标签</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建TagService接口和实现类，写入如下，用于查询标签</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;tagService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;TagMapper, Tag&gt; <span class="keyword">implements</span> <span class="title class_">TagService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;PageVo&gt; <span class="title function_">pageTagList</span><span class="params">(Integer pageNum, Integer pageSize, TagListDto tagListDto)</span> &#123;</span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        LambdaQueryWrapper&lt;Tag&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(StringUtils.hasText(tagListDto.getName()),Tag::getName,tagListDto.getName());</span><br><span class="line">        queryWrapper.eq(StringUtils.hasText(tagListDto.getRemark()),Tag::getRemark,tagListDto.getRemark());</span><br><span class="line"></span><br><span class="line">        Page&lt;Tag&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page, queryWrapper);</span><br><span class="line">        <span class="comment">//封装数据返回</span></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(page.getRecords(),page.getTotal());</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建TagController类，写入如下，是查询标签的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/content/tag&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagController</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> TagService tagService;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询标签列表</span></span><br><span class="line">        <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> ResponseResult&lt;PageVo&gt; <span class="title function_">list</span><span class="params">(Integer pageNum, Integer pageSize, TagListDto tagListDto)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tagService.pageTagList(pageNum,pageSize,tagListDto);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新增标签"><a href="#新增标签" class="headerlink" title="新增标签"></a>新增标签</h3><h4 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h4><p>新建Tag类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tag</span>  &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">    <span class="comment">//标签名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建AddTagDto类，写入如下，用于接收前端传过来的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddTagDto</span> &#123;</span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">    <span class="comment">//标签名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TagController类，添加如下，作用是新增标签功能的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AddTagDto tagDto)</span>&#123;</span><br><span class="line">	<span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> BeanCopyUtils.copyBean(tagDto, Tag.class);</span><br><span class="line">	tagService.save(tag);</span><br><span class="line">	<span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><h4 id="接口分析-14"><a href="#接口分析-14" class="headerlink" title="接口分析"></a>接口分析</h4><p>例如content&#x2F;tag&#x2F;6 代表删除id为6的标签数据。删除后在列表中是否查看不到该条数据，但是数据库中该条数据还是存在的，只是修改了逻辑删除字段的值</p>
<h4 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">	tagService.removeById(id);</span><br><span class="line">	<span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="修改标签"><a href="#修改标签" class="headerlink" title="修改标签"></a>修改标签</h3><h4 id="接口分析-15"><a href="#接口分析-15" class="headerlink" title="接口分析"></a>接口分析</h4><p>根据标签id来获取某一条标签的信息，当用户点击修改按钮时触发，展示在弹框里面。例如：content&#x2F;tag&#x2F;6 代表获取id为6的标签数据</p>
<h4 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h4><ol>
<li>新建EditTagDto类，写入如下，用于接收前端传过来的参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EditTagDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">    <span class="comment">//标签名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>TagController类修改为如下，作用是修改标签功能的访问接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> EditTagDto tagDto)</span>&#123;</span><br><span class="line">    <span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> BeanCopyUtils.copyBean(tagDto,Tag.class);</span><br><span class="line">    tagService.updateById(tag);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>需要提供写博文的功能，写博文时需要关联分类和标签。可以上传缩略图，也可以在正文中添加图片。文章可以直接发布，也可以保存到草稿箱</p>
<h3 id="查询分类接口"><a href="#查询分类接口" class="headerlink" title="查询分类接口"></a>查询分类接口</h3><h4 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h4><p>新建CategoryVo类，用于指定哪些字段返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//返回给前端的特定字段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CategoryService接口修改为如下，增加了 ‘写博客-查询文章分类’ ‘写博客-查询文章分类’ 的接口的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询文章分类的接口</span></span><br><span class="line">    ResponseResult <span class="title function_">getCategoryList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写博客-查询文章分类的接口</span></span><br><span class="line">    List&lt;CategoryVo&gt; <span class="title function_">listAllCategory</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ResponseResult <span class="title function_">getCategoryList</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//查询文章表  状态为已发布的文章</span></span><br><span class="line">       LambdaQueryWrapper&lt;Article&gt; articleWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       articleWrapper.eq(Article::getStatus,SystemConstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">       List&lt;Article&gt; articleList = articleService.list(articleWrapper);</span><br><span class="line">       <span class="comment">//获取文章的分类id，并且去重</span></span><br><span class="line">       Set&lt;Long&gt; categoryIds = articleList.stream()</span><br><span class="line">               .map(article -&gt; article.getCategoryId())</span><br><span class="line">               .collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询分类表</span></span><br><span class="line">       List&lt;Category&gt; categories = listByIds(categoryIds);</span><br><span class="line">       categories = categories.stream().</span><br><span class="line">               filter(category -&gt; SystemConstants.STATUS_NORMAL.equals(category.getStatus()))</span><br><span class="line">               .collect(Collectors.toList());</span><br><span class="line">       <span class="comment">//封装vo</span></span><br><span class="line">       List&lt;CategoryVo&gt; categoryVos = BeanCopyUtils.copyBeanList(categories, CategoryVo.class);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> ResponseResult.okResult(categoryVos);</span><br><span class="line">   &#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;CategoryVo&gt; <span class="title function_">listAllCategory</span><span class="params">()</span> &#123;</span><br><span class="line">       LambdaQueryWrapper&lt;Category&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       wrapper.eq(Category::getStatus, SystemConstants.NORMAL);</span><br><span class="line">       List&lt;Category&gt; list = list(wrapper);</span><br><span class="line">       List&lt;CategoryVo&gt; categoryVos = BeanCopyUtils.copyBeanList(list, CategoryVo.class);</span><br><span class="line">       <span class="keyword">return</span> categoryVos;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>新建CategoryController类，写入如下，是 ‘写博客-查询文章分类’ 的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/content/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------------------------写博文-查询文章分类的接口--------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/listAllCategory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">listAllCategory</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;CategoryVo&gt; list = categoryService.listAllCategory();</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询标签接口"><a href="#查询标签接口" class="headerlink" title="查询标签接口"></a>查询标签接口</h3><h4 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h4><p>新建TabListDto类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagListDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改Vo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/content/tag&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TagController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TagService tagService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;PageVo&gt; <span class="title function_">list</span><span class="params">(Integer pageNum, Integer pageSize, TagListDto tagListDto)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tagService.pageTagList(pageNum,pageSize,tagListDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AddTagDto tagDto)</span>&#123;</span><br><span class="line">        <span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> BeanCopyUtils.copyBean(tagDto, Tag.class);</span><br><span class="line">        tagService.save(tag);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        tagService.removeById(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> EditTagDto tagDto)</span>&#123;</span><br><span class="line">        <span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> BeanCopyUtils.copyBean(tagDto,Tag.class);</span><br><span class="line">        tagService.updateById(tag);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="type">Tag</span> <span class="variable">tag</span> <span class="operator">=</span> tagService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(tag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/listAllTag&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">listAllTag</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;TagVo&gt; list = tagService.listAllTag();</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增博文"><a href="#新增博文" class="headerlink" title="新增博文"></a>新增博文</h3><h4 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h4><p>新建ArticleTag类，写入如下，文章表&amp;标签表的中间表，对应的实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value=&quot;sg_article_tag&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleTag</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">625337492348897098L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 文章id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long articleId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 标签id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Long tagId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建AddArticleDto类，写入如下，用来接受前端传过来的参数，最重要的是tags属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huanf.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 35238</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/8/7 0007 15:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//新增博客文章</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddArticleDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line">    <span class="comment">//是否置顶（0否，1是）</span></span><br><span class="line">    <span class="keyword">private</span> String isTop;</span><br><span class="line">    <span class="comment">//状态（0已发布，1草稿）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">//是否允许评论 1是，0否</span></span><br><span class="line">    <span class="keyword">private</span> String isComment;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//tags属性是一个List集合，用于接收文章关联标签的id</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; tags;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建ArticleVoMapper接口、Service接口、Service实现类</p>
<p>新建ArticleTagMapper接口、Service接口、Service实现类</p>
<p>ArticleService接口，修改为写入如下，增加写博客文章的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Article&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文章列表</span></span><br><span class="line">    ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类查询文章列表</span></span><br><span class="line">    ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum, Integer pageSize, Long categoryId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询文章详情</span></span><br><span class="line">    ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据文章id从mysql查询文章</span></span><br><span class="line">    ResponseResult <span class="title function_">updateViewCount</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增博客文章</span></span><br><span class="line">    ResponseResult <span class="title function_">add</span><span class="params">(AddArticleDto article)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ArticleMapper, Article&gt; <span class="keyword">implements</span> <span class="title class_">ArticleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleTagService articleTagService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询热门文章 封装成ResponseResult返回</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//必须是正式文章</span></span><br><span class="line">        queryWrapper.eq(Article::getStatus, SystemConstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">        <span class="comment">//按照浏览量进行排序</span></span><br><span class="line">        queryWrapper.orderByDesc(Article::getViewCount);</span><br><span class="line">        <span class="comment">//最多只查询10条</span></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>(SystemConstants.ARTICLE_STATUS_CURRENT,SystemConstants.ARTICLE_STATUS_SIZE);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">        <span class="comment">//bean拷贝</span></span><br><span class="line"><span class="comment">//        List&lt;HotArticleVo&gt; articleVos = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        for (Article article : articles) &#123;</span></span><br><span class="line"><span class="comment">//            HotArticleVo vo = new HotArticleVo();</span></span><br><span class="line"><span class="comment">//            BeanUtils.copyProperties(article,vo);</span></span><br><span class="line"><span class="comment">//            articleVos.add(vo);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        List&lt;HotArticleVo&gt; vs = BeanCopyUtils.copyBeanList(articles, HotArticleVo.class);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(vs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(Integer pageNum, Integer pageSize, Long categoryId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 如果 有categoryId 就要 查询时要和传入的相同</span></span><br><span class="line">        lambdaQueryWrapper.eq(Objects.nonNull(categoryId)&amp;&amp;categoryId&gt;<span class="number">0</span> ,Article::getCategoryId,categoryId);</span><br><span class="line">        <span class="comment">// 状态是正式发布的</span></span><br><span class="line">        lambdaQueryWrapper.eq(Article::getStatus,SystemConstants.ARTICLE_STATUS_NORMAL);</span><br><span class="line">        <span class="comment">// 对isTop进行降序</span></span><br><span class="line">        lambdaQueryWrapper.orderByDesc(Article::getIsTop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        page(page,lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line">        <span class="comment">//查询categoryName</span></span><br><span class="line">        articles.stream()</span><br><span class="line">                .map(article -&gt; article.setCategoryName(categoryService.getById(article.getCategoryId()).getName()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//articleId去查询articleName进行设置</span></span><br><span class="line"><span class="comment">//        for (Article article : articles) &#123;</span></span><br><span class="line"><span class="comment">//            Category category = categoryService.getById(article.getCategoryId());</span></span><br><span class="line"><span class="comment">//            article.setCategoryName(category.getName());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装查询结果</span></span><br><span class="line">        List&lt;ArticleListVo&gt; articleListVos = BeanCopyUtils.copyBeanList(page.getRecords(), ArticleListVo.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>(articleListVos,page.getTotal());</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//根据id查询文章</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//从redis中获取viewCount</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">viewCount</span> <span class="operator">=</span> redisCache.getCacheMapValue(<span class="string">&quot;article:viewCount&quot;</span>, id.toString());</span><br><span class="line">        article.setViewCount(viewCount.longValue());</span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        <span class="type">ArticleDetailVo</span> <span class="variable">articleDetailVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(article, ArticleDetailVo.class);</span><br><span class="line">        <span class="comment">//根据分类id查询分类名</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> articleDetailVo.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span>(category!=<span class="literal">null</span>)&#123;</span><br><span class="line">            articleDetailVo.setCategoryName(category.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//封装响应返回</span></span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(articleDetailVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">updateViewCount</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//更新redis中对应 id的浏览量</span></span><br><span class="line">        redisCache.incrementCacheMapValue(<span class="string">&quot;article:viewCount&quot;</span>,id.toString(),<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(AddArticleDto articleDto)</span> &#123;</span><br><span class="line">        <span class="comment">//添加 博客</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> BeanCopyUtils.copyBean(articleDto, Article.class);</span><br><span class="line">        save(article);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;ArticleTag&gt; articleTags = articleDto.getTags().stream()</span><br><span class="line">                .map(tagId -&gt; <span class="keyword">new</span> <span class="title class_">ArticleTag</span>(article.getId(), tagId))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加 博客和标签的关联</span></span><br><span class="line">        articleTagService.saveBatch(articleTags);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageVo <span class="title function_">selectArticlePage</span><span class="params">(Article article, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(article.getTitle()),Article::getTitle, article.getTitle());</span><br><span class="line">        queryWrapper.like(StringUtils.hasText(article.getSummary()),Article::getSummary, article.getSummary());</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里偷懒没写VO的转换 应该转换完在设置到最后的pageVo中</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">        pageVo.setTotal(page.getTotal());</span><br><span class="line">        pageVo.setRows(articles);</span><br><span class="line">        <span class="keyword">return</span> pageVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ArticleVo <span class="title function_">getInfo</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//获取关联标签</span></span><br><span class="line">        LambdaQueryWrapper&lt;ArticleTag&gt; articleTagLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        articleTagLambdaQueryWrapper.eq(ArticleTag::getArticleId,article.getId());</span><br><span class="line">        List&lt;ArticleTag&gt; articleTags = articleTagService.list(articleTagLambdaQueryWrapper);</span><br><span class="line">        List&lt;Long&gt; tags = articleTags.stream().map(articleTag -&gt; articleTag.getTagId()).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="type">ArticleVo</span> <span class="variable">articleVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(article,ArticleVo.class);</span><br><span class="line">        articleVo.setTags(tags);</span><br><span class="line">        <span class="keyword">return</span> articleVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(ArticleDto articleDto)</span> &#123;</span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> BeanCopyUtils.copyBean(articleDto, Article.class);</span><br><span class="line">        <span class="comment">//更新博客信息</span></span><br><span class="line">        updateById(article);</span><br><span class="line">        <span class="comment">//删除原有的 标签和博客的关联</span></span><br><span class="line">        LambdaQueryWrapper&lt;ArticleTag&gt; articleTagLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        articleTagLambdaQueryWrapper.eq(ArticleTag::getArticleId,article.getId());</span><br><span class="line">        articleTagService.remove(articleTagLambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//添加新的博客和标签的关联信息</span></span><br><span class="line">        List&lt;ArticleTag&gt; articleTags = articleDto.getTags().stream()</span><br><span class="line">                .map(tagId -&gt; <span class="keyword">new</span> <span class="title class_">ArticleTag</span>(articleDto.getId(), tagId))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        articleTagService.saveBatch(articleTags);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新建ArticleController类，写入如下，增加了写博客文章的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"> <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> AddArticleDto article)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> articleService.add(article);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="分类列表"><a href="#分类列表" class="headerlink" title="分类列表"></a>分类列表</h2><h3 id="查询分类"><a href="#查询分类" class="headerlink" title="查询分类"></a>查询分类</h3><h4 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h4><p>CategoryService接口修改为如下，增加了分页查询分类列表的接口,并添加实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageVo <span class="title function_">selectCategoryPage</span><span class="params">(Category category, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">    queryWrapper.like(StringUtils.hasText(category.getName()),Category::getName, category.getName());</span><br><span class="line">    queryWrapper.eq(Objects.nonNull(category.getStatus()),Category::getStatus, category.getStatus());</span><br><span class="line"></span><br><span class="line">    Page&lt;Category&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    page.setCurrent(pageNum);</span><br><span class="line">    page.setSize(pageSize);</span><br><span class="line">    page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换成VO</span></span><br><span class="line">    List&lt;Category&gt; categories = page.getRecords();</span><br><span class="line"></span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">    pageVo.setTotal(page.getTotal());</span><br><span class="line">    pageVo.setRows(categories);</span><br><span class="line">    <span class="keyword">return</span> pageVo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CategoryController类修改为如下，增加了分页查询分类功能的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(Category category, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> categoryService.selectCategoryPage(category,pageNum,pageSize);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h3><h4 id="代码实现-20"><a href="#代码实现-20" class="headerlink" title="代码实现"></a>代码实现</h4><p>新建CategoryVo类，写入如下，用于接收前端传过来的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CategoryController类，添加如下，作用是新增 ‘文章分类’ 功能的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    categoryService.save(category);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h2><h3 id="接口分析-16"><a href="#接口分析-16" class="headerlink" title="接口分析"></a>接口分析</h3><p>例如content&#x2F;category&#x2F;6 代表删除id为6的标签数据。删除后在列表中是否查看不到该条数据，但是数据库中该条数据还是存在的，只是修改了逻辑删除字段的值</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>DELETE</td>
<td>content&#x2F;category&#x2F;{id}</td>
<td>需要token请求头</td>
</tr>
</tbody></table>
<h3 id="代码实现-21"><a href="#代码实现-21" class="headerlink" title="代码实现"></a>代码实现</h3><p>第一步: 在hth-admin工程的CategoryController类修改为如下，增加了删除 ‘文章分类’ 功能的具体代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">    categoryService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h3><h4 id="代码实现-22"><a href="#代码实现-22" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">    <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(category);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Excel表格"><a href="#Excel表格" class="headerlink" title="Excel表格"></a>Excel表格</h2><p>我们在项目中只使用了 ‘写Excel’ 的功能。如果要学习如何实现 ‘读Excel’功能，那么可以对照easyExcel官方提供的 ‘快速开始’ 文档</p>
<h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><h4 id="在分类管理中点击导出按钮可以把所有的分类导出到Excel文件中"><a href="#在分类管理中点击导出按钮可以把所有的分类导出到Excel文件中" class="headerlink" title="在分类管理中点击导出按钮可以把所有的分类导出到Excel文件中"></a>在分类管理中点击导出按钮可以把所有的分类导出到Excel文件中</h4><table>
<thead>
<tr>
<th>请求方式</th>
<th>请求地址</th>
<th>请求头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;content&#x2F;category&#x2F;export</td>
<td>需要token请求头</td>
</tr>
</tbody></table>
<h3 id="接口分析-17"><a href="#接口分析-17" class="headerlink" title="接口分析"></a>接口分析</h3><p>使用easyExcel实现Excel的导出操作</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">官方地址: https://github.com/alibaba/easyexcel</span><br><span class="line"></span><br><span class="line">快速开始: https://easyexcel.opensource.alibaba.com/docs/current/quickstart/write<span class="params">#</span><span class="comment">%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-1</span></span><br></pre></td></tr></table></figure>

<p>分析: 把数据库的分类数据查询出来，然后写入到Excel文件中，然后下载这个Excel文件，重点就是怎么往Excel里面写入数据，点击上面提供的快速开始的链接，点击左侧的 ‘写Excel’，就能看到实现的代码了，重点看右侧小导航栏的 ‘web中的写并且失败的时候返回json’</p>
<h3 id="代码实现-23"><a href="#代码实现-23" class="headerlink" title="代码实现"></a>代码实现</h3><ol>
<li>在hth-framework工程的pom.xml添加如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--easyExcel的依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;easyexcel&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>把hth-framework工程的WebUtils类修改为如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string 待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//easyExcel文件导出失败时候做的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置下载文件的响应头。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setDownLoadHeader</span><span class="params">(String filename, HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">//设置了响应的内容类型为 Excel 文件类型</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String fname= URLEncoder.encode(filename,<span class="string">&quot;UTF-8&quot;</span>).replaceAll(<span class="string">&quot;\\+&quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        <span class="comment">//通过 Content-disposition 头部设置了文件的下载方式为附件，并指定了下载的文件名。</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>,<span class="string">&quot;attachment; filename=&quot;</span>+fname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建ExcelCategoryVo类，写入如下，用于作为Excel表格的列头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelCategoryVo</span> &#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;分类名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态0:正常,1禁用</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;状态0:正常,1禁用&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CategoryController类修改为如下，增加了easyExcel文件导出的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个注解表明了该方法需要满足指定的权限才能执行，具体权限验证逻辑可能在 ps 对象的 hasPermission 方法中实现。</span></span><br><span class="line"><span class="comment">//这里的权限表达式是检查是否有权限导出分类内容。</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ps.hasPermission(&#x27;content:category:export&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//设置下载文件的请求头，下载下来的Excel文件叫&#x27;分类.xlsx&#x27;</span></span><br><span class="line">        WebUtils.setDownLoadHeader(<span class="string">&quot;分类.xlsx&quot;</span>,response);</span><br><span class="line">        <span class="comment">//获取需要导出的数据</span></span><br><span class="line">        List&lt;Category&gt; categoryVos = categoryService.list();</span><br><span class="line"></span><br><span class="line">        List&lt;ExcelCategoryVo&gt; excelCategoryVos = BeanCopyUtils.copyBeanList(categoryVos, ExcelCategoryVo.class);</span><br><span class="line">        <span class="comment">//把数据写入到Excel中</span></span><br><span class="line">        EasyExcel.write(response.getOutputStream(), ExcelCategoryVo.class).autoCloseStream(Boolean.FALSE).sheet(<span class="string">&quot;分类导出&quot;</span>)</span><br><span class="line">                .doWrite(excelCategoryVos);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//如果出现异常也要响应json</span></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR);</span><br><span class="line">        WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="权限控制-1"><a href="#权限控制-1" class="headerlink" title="权限控制"></a>权限控制</h2><h3 id="接口分析-18"><a href="#接口分析-18" class="headerlink" title="接口分析"></a>接口分析</h3><p>通过自定义权限校验，实现对导出 ‘文章分类’ 的接口做权限控制</p>
<h3 id="代码实现-24"><a href="#代码实现-24" class="headerlink" title="代码实现"></a>代码实现</h3><p>LoginUser类修改为如下，增加了权限信息集合的成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//UserDetails是SpringSecurity官方提供的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//权限信息的集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用于返回权限信息。现在我们正在实现&#x27;认证&#x27;，&#x27;权限&#x27;后面才用得到。所以返回null即可</span></span><br><span class="line">    <span class="comment">//当要查询用户信息的时候，我们不能单纯返回null，要重写这个方法，作用是返回权限信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用于获取用户密码。由于使用的实体类是User，所以获取的是数据库的用户密码</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//用于获取用户名。由于使用的实体类是User，所以获取的是数据库的用户名</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//判断登录状态是否过期。把这个改成true，表示永不过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//判断账号是否被锁定。把这个改成true，表示未锁定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//判断登录凭证是否过期。把这个改成true，表示永不过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//判断用户是否可用。把这个改成true，表示可用状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把hth-admin工程的SecurityConfig修改为如下，增加了@EnableGlobalMethodSecurity注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span></span><br></pre></td></tr></table></figure>

<p>把hth-framework工程的UserDetailsServiceImpl类修改为如下，增加了权限信息的相关实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="comment">//判断是否查到用户  如果没查到抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回用户信息</span></span><br><span class="line">        <span class="keyword">if</span>(user.getType().equals(SystemConstants.ADMAIN))&#123;</span><br><span class="line">            List&lt;String&gt; list = menuMapper.selectPermsByUserId(user.getId());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hth-framework工程的service目录创建impl.PermissionService类，写入如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;ps&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前用户是否具有permission</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permission 要判断的权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPermission</span><span class="params">(String permission)</span>&#123;</span><br><span class="line">        <span class="comment">//如果是超级管理员  直接返回true</span></span><br><span class="line">        <span class="keyword">if</span>(SecurityUtils.isAdmin())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则  获取当前登录用户所具有的权限列表 如何判断是否存在permission</span></span><br><span class="line">        List&lt;String&gt; permissions = SecurityUtils.getLoginUser().getPermissions();</span><br><span class="line">        <span class="keyword">return</span> permissions.contains(permission);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把hth-admin工程的CategoryController类修改为如下，在export方法的上面添加了@PreAuthorize注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;@ps.hasPermission(&#x27;content:category:export&#x27;)&quot;)</span><span class="comment">//权限控制，ps是PermissionService类的bean名称</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line">    <span class="comment">//注意返回值类型是void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//设置下载文件的请求头，下载下来的Excel文件叫&#x27;分类.xlsx&#x27;</span></span><br><span class="line">            WebUtils.setDownLoadHeader(<span class="string">&quot;分类.xlsx&quot;</span>,response);</span><br><span class="line">            <span class="comment">//获取需要导出的数据</span></span><br><span class="line">            List&lt;Category&gt; xxcategory = categoryService.list();</span><br><span class="line"></span><br><span class="line">            List&lt;ExcelCategoryVo&gt; excelCategoryVos = BeanCopyUtils.copyBeanList(xxcategory, ExcelCategoryVo.class);</span><br><span class="line">            <span class="comment">//把数据写入到Excel中，也就是把ExcelCategoryVo实体类的字段作为Excel表格的列头</span></span><br><span class="line">            <span class="comment">//sheet方法里面的字符串是Excel表格左下角工作簿的名字</span></span><br><span class="line">            EasyExcel.write(response.getOutputStream(), ExcelCategoryVo.class).autoCloseStream(Boolean.FALSE).sheet(<span class="string">&quot;文章分类&quot;</span>)</span><br><span class="line">                    .doWrite(excelCategoryVos);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//如果出现异常,就返回失败的json数据给前端。AppHttpCodeEnum和ResponseResult是我们在huanf-framework工程写的类</span></span><br><span class="line">            <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR);</span><br><span class="line">            <span class="comment">//WebUtils是我们在huanf-framework工程写的类，里面的renderString方法是将json字符串写入到请求体，然后返回给前端</span></span><br><span class="line">            WebUtils.renderString(response, JSON.toJSONString(result));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把hth-framework工程的GlobalExceptionHandler类修改为如下，增加了处理springsecurity的权限异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccessDeniedHandler accessDeniedHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">//关闭csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//不通过Session获取SecurityContext</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 对于登录接口 允许匿名访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>).anonymous()</span><br><span class="line">                <span class="comment">// 除上面外的所有请求全部不需要认证即可访问</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置异常处理器</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler);</span><br><span class="line">        <span class="comment">//关闭默认的注销功能</span></span><br><span class="line">        http.logout().disable();</span><br><span class="line">        <span class="comment">//把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中</span></span><br><span class="line">        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//允许跨域</span></span><br><span class="line">        http.cors();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><h3 id="查询文章"><a href="#查询文章" class="headerlink" title="查询文章"></a>查询文章</h3><h4 id="代码实现-25"><a href="#代码实现-25" class="headerlink" title="代码实现"></a>代码实现</h4><p>ArticleService接口修改为如下，增加了分页查询文章的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管理后台(文章管理)-分页查询文章</span></span><br><span class="line">PageVo <span class="title function_">selectArticlePage</span><span class="params">(Article article, Integer pageNum, Integer pageSize)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageVo <span class="title function_">selectArticlePage</span><span class="params">(Article article, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Article&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(article.getTitle()),Article::getTitle, article.getTitle());</span><br><span class="line">        queryWrapper.like(StringUtils.hasText(article.getSummary()),Article::getSummary, article.getSummary());</span><br><span class="line"></span><br><span class="line">        Page&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        List&lt;Article&gt; articles = page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里偷懒没写VO的转换 应该转换完在设置到最后的pageVo中</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">        pageVo.setTotal(page.getTotal());</span><br><span class="line">        pageVo.setRows(articles);</span><br><span class="line">        <span class="keyword">return</span> pageVo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>ArticleController类修改为如下，增加了分页查询文章的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(Article article, Integer pageNum, Integer pageSize)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> articleService.selectArticlePage(article,pageNum,pageSize);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改文章"><a href="#修改文章" class="headerlink" title="修改文章"></a>修改文章</h3><h4 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h4><p>点击文章列表中的修改按钮可以跳转到写博文页面。回显示该文章的具体信息。用户可以在该页面修改文章信息。点击更新按钮后修改文章</p>
<p>这个功能的实现首先需要能够根据文章id查询文章的详细信息这样才能实现文章的回显</p>
<p>①先查询根据文章id查询对应的文章</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>Get</td>
<td>content&#x2F;article&#x2F;{id}</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-26"><a href="#代码实现-26" class="headerlink" title="代码实现"></a>代码实现</h4><p>新建ArticleVo类，写入如下，指定某些字段返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line">    <span class="comment">//是否置顶（0否，1是）</span></span><br><span class="line">    <span class="keyword">private</span> String isTop;</span><br><span class="line">    <span class="comment">//状态（0已发布，1草稿）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">//是否允许评论 1是，0否</span></span><br><span class="line">    <span class="keyword">private</span> String isComment;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; tags;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建ArticleDto类，写入如下，用于接收前端传过来的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//文章内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//文章摘要</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">//所属分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缩略图</span></span><br><span class="line">    <span class="keyword">private</span> String thumbnail;</span><br><span class="line">    <span class="comment">//是否置顶（0否，1是）</span></span><br><span class="line">    <span class="keyword">private</span> String isTop;</span><br><span class="line">    <span class="comment">//状态（0已发布，1草稿）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> Long viewCount;</span><br><span class="line">    <span class="comment">//是否允许评论 1是，0否</span></span><br><span class="line">    <span class="keyword">private</span> String isComment;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; tags;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ArticleService接口修改为如下，增加了两个用于修改文章的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArticleVo <span class="title function_">getInfo</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(ArticleDto article)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ArticleVo <span class="title function_">getInfo</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//获取关联标签</span></span><br><span class="line">        LambdaQueryWrapper&lt;ArticleTag&gt; articleTagLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        articleTagLambdaQueryWrapper.eq(ArticleTag::getArticleId,article.getId());</span><br><span class="line">        List&lt;ArticleTag&gt; articleTags = articleTagService.list(articleTagLambdaQueryWrapper);</span><br><span class="line">        List&lt;Long&gt; tags = articleTags.stream().map(articleTag -&gt; articleTag.getTagId()).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="type">ArticleVo</span> <span class="variable">articleVo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(article,ArticleVo.class);</span><br><span class="line">        articleVo.setTags(tags);</span><br><span class="line">        <span class="keyword">return</span> articleVo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(ArticleDto articleDto)</span> &#123;</span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> BeanCopyUtils.copyBean(articleDto, Article.class);</span><br><span class="line">        <span class="comment">//更新博客信息</span></span><br><span class="line">        updateById(article);</span><br><span class="line">        <span class="comment">//删除原有的 标签和博客的关联</span></span><br><span class="line">        LambdaQueryWrapper&lt;ArticleTag&gt; articleTagLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        articleTagLambdaQueryWrapper.eq(ArticleTag::getArticleId,article.getId());</span><br><span class="line">        articleTagService.remove(articleTagLambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//添加新的博客和标签的关联信息</span></span><br><span class="line">        List&lt;ArticleTag&gt; articleTags = articleDto.getTags().stream()</span><br><span class="line">                .map(tagId -&gt; <span class="keyword">new</span> <span class="title class_">ArticleTag</span>(articleDto.getId(), tagId))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        articleTagService.saveBatch(articleTags);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>ArticleController类修改为如下，增加了修改文章的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//①先查询根据文章id查询对应的文章</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">    <span class="type">ArticleByIdVo</span> <span class="variable">article</span> <span class="operator">=</span> articleService.getInfo(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(article);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="comment">//②然后才是修改文章</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> ArticleDto article)</span>&#123;</span><br><span class="line">    articleService.edit(article);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><h4 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h4><p>点击文章后面的删除按钮可以删除该文章。注意: 是逻辑删除不是物理删除</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>DELETE</td>
<td>content&#x2F;article&#x2F;{id}</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-27"><a href="#代码实现-27" class="headerlink" title="代码实现"></a>代码实现</h4><p>ArticleController类修改为如下，增加了删除文章的具体实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="comment">//直接使用mybatisplus提供的removeById方法</span></span><br><span class="line">    articleService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="菜单列表"><a href="#菜单列表" class="headerlink" title="菜单列表"></a>菜单列表</h2><h3 id="查询菜单"><a href="#查询菜单" class="headerlink" title="查询菜单"></a>查询菜单</h3><h4 id="一、接口分析"><a href="#一、接口分析" class="headerlink" title="一、接口分析"></a>一、接口分析</h4><p>需要展示菜单列表，不需要分页。可以针对菜单名进行模糊查询。也可以针对菜单的状态进行查询。菜单要按照父菜单id和orderNum进行排序</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>system&#x2F;menu&#x2F;list</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h4><p>第一步: 在hth-framework工程的Vo目录新建MenuVo类，写入如下，用于把指定字段返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuVo</span> &#123;</span><br><span class="line">    <span class="comment">//菜单ID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单名称</span></span><br><span class="line">    <span class="keyword">private</span> String menuName;</span><br><span class="line">    <span class="comment">//父菜单ID</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    <span class="comment">//显示顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer orderNum;</span><br><span class="line">    <span class="comment">//路由地址</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="comment">//组件路径</span></span><br><span class="line">    <span class="keyword">private</span> String component;</span><br><span class="line">    <span class="comment">//是否为外链（0是 1否）</span></span><br><span class="line">    <span class="keyword">private</span> Integer isFrame;</span><br><span class="line">    <span class="comment">//菜单类型（M目录 C菜单 F按钮）</span></span><br><span class="line">    <span class="keyword">private</span> String menuType;</span><br><span class="line">    <span class="comment">//菜单状态（0显示 1隐藏）</span></span><br><span class="line">    <span class="keyword">private</span> String visible;</span><br><span class="line">    <span class="comment">//菜单状态（0正常 1停用）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//权限标识</span></span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">    <span class="comment">//菜单图标</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MenuService接口修改为如下，增加了查询菜单列表的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Menu&gt; &#123;</span><br><span class="line">    <span class="comment">//查询用户的权限信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line">    <span class="comment">//查询用户的路由信息，也就是查询权限菜单</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">    <span class="comment">//查询菜单列表</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectMenuList</span><span class="params">(Menu menu)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MenuServiceImpl类修改为如下，增加了查询菜单列表的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//如果是管理员，返回所有的权限</span></span><br><span class="line">        <span class="keyword">if</span>(SecurityUtils.isAdmin())&#123;</span><br><span class="line">            LambdaQueryWrapper&lt;Menu&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            wrapper.in(Menu::getMenuType,SystemConstants.MENU,SystemConstants.BUTTON);</span><br><span class="line">            wrapper.eq(Menu::getStatus,SystemConstants.STATUS_NORMAL);</span><br><span class="line">            List&lt;Menu&gt; menus = list(wrapper);</span><br><span class="line">            List&lt;String&gt; perms = menus.stream()</span><br><span class="line">                    .map(Menu::getPerms)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">            <span class="keyword">return</span> perms;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则返回所具有的权限</span></span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectPermsByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">MenuMapper</span> <span class="variable">menuMapper</span> <span class="operator">=</span> getBaseMapper();</span><br><span class="line">        List&lt;Menu&gt; menus = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//判断是否是管理员</span></span><br><span class="line">        <span class="keyword">if</span>(SecurityUtils.isAdmin())&#123;</span><br><span class="line">            <span class="comment">//如果是 获取所有符合要求的Menu</span></span><br><span class="line">            menus = menuMapper.selectAllRouterMenu();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则  获取当前用户所具有的Menu</span></span><br><span class="line">            menus = menuMapper.selectRouterMenuTreeByUserId(userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建tree</span></span><br><span class="line">        <span class="comment">//先找出第一层的菜单  然后去找他们的子菜单设置到children属性中</span></span><br><span class="line">        List&lt;Menu&gt; menuTree = builderMenuTree(menus,<span class="number">0L</span>);</span><br><span class="line">        <span class="keyword">return</span> menuTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">selectMenuList</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;Menu&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//menuName模糊查询</span></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(menu.getMenuName()),Menu::getMenuName,menu.getMenuName());</span><br><span class="line">        queryWrapper.eq(StringUtils.hasText(menu.getStatus()),Menu::getStatus,menu.getStatus());</span><br><span class="line">        <span class="comment">//排序 parent_id和order_num</span></span><br><span class="line">        queryWrapper.orderByAsc(Menu::getParentId,Menu::getOrderNum);</span><br><span class="line">        List&lt;Menu&gt; menus = list(queryWrapper);;</span><br><span class="line">        <span class="keyword">return</span> menus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">builderMenuTree</span><span class="params">(List&lt;Menu&gt; menus, Long parentId)</span> &#123;</span><br><span class="line">        List&lt;Menu&gt; menuTree = menus.stream()</span><br><span class="line">                .filter(menu -&gt; menu.getParentId().equals(parentId))</span><br><span class="line">                .map(menu -&gt; menu.setChildren(getChildren(menu, menus)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> menuTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取存入参数的 子Menu集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menus</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Menu&gt; <span class="title function_">getChildren</span><span class="params">(Menu menu, List&lt;Menu&gt; menus)</span> &#123;</span><br><span class="line">        List&lt;Menu&gt; childrenList = menus.stream()</span><br><span class="line">                .filter(m -&gt; m.getParentId().equals(menu.getId()))</span><br><span class="line">                .map(m-&gt;m.setChildren(getChildren(m,menus)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> childrenList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>新建MenuController类，写入如下，是查询菜单列表的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/system/menu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MenuService menuService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------------------------------查询菜单列表--------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(Menu menu)</span> &#123;</span><br><span class="line">        List&lt;Menu&gt; menus = menuService.selectMenuList(menu);</span><br><span class="line">        List&lt;MenuVo&gt; menuVos = BeanCopyUtils.copyBeanList(menus, MenuVo.class);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(menuVos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增菜单"><a href="#新增菜单" class="headerlink" title="新增菜单"></a>新增菜单</h3><h4 id="接口分析-19"><a href="#接口分析-19" class="headerlink" title="接口分析"></a>接口分析</h4><p>新增权限菜单</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>POST</td>
<td>system&#x2F;menu</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-28"><a href="#代码实现-28" class="headerlink" title="代码实现"></a>代码实现</h4><p>MenuController类修改为如下，增加了新增菜单的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Menu menu)</span> &#123;</span><br><span class="line">    menuService.save(menu);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h3><h4 id="接口分析-20"><a href="#接口分析-20" class="headerlink" title="接口分析"></a>接口分析</h4><p>能够修改菜单，但是修改的时候不能把父菜单设置为当前菜单，如果设置了需要给出相应的提示。并且修改失败</p>
<p>①先查询根据菜单id查询对应的权限菜单</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>Get</td>
<td>system&#x2F;menu&#x2F;{menuId}</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-29"><a href="#代码实现-29" class="headerlink" title="代码实现"></a>代码实现</h4><p>第一步: 把hth-framework工程的MenuController类修改为如下，增加了修改菜单的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据菜单编号获取详细信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/&#123;menuId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable</span> Long menuId)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(menuService.getById(menuId));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改菜单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> Menu menu)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (menu.getId().equals(menu.getParentId())) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(<span class="number">500</span>,<span class="string">&quot;修改菜单&#x27;&quot;</span> + menu.getMenuName() + <span class="string">&quot;&#x27;失败，上级菜单不能选择自己&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    menuService.updateById(menu);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除菜单"><a href="#删除菜单" class="headerlink" title="删除菜单"></a>删除菜单</h3><h4 id="接口分析-21"><a href="#接口分析-21" class="headerlink" title="接口分析"></a>接口分析</h4><p>能够删除菜单，但是如果要删除的菜单有子菜单则提示：存在子菜单不允许删除 并且删除失败</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>DELETE</td>
<td>system&#x2F;menu&#x2F;{menuId}</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-30"><a href="#代码实现-30" class="headerlink" title="代码实现"></a>代码实现</h4><p>第一步: 把hth-framework工程的MenuService接口修改为如下，增加了判断菜单里面是否存在子菜单的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Menu&gt; &#123;</span><br><span class="line">    <span class="comment">//查询用户的权限信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line">    <span class="comment">//查询用户的路由信息，也就是查询权限菜单</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">    <span class="comment">//查询菜单列表</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectMenuList</span><span class="params">(Menu menu)</span>;</span><br><span class="line">    <span class="comment">//删除菜单-判断是否存在子菜单</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasChild</span><span class="params">(Long menuId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步: 把hth-framework工程的MenuServiceImpl类修改为如下，增加了判断菜单里面是否存在子菜单的具体判断代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasChild</span><span class="params">(Long menuId)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Menu&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Menu::getParentId,menuId);</span><br><span class="line">    <span class="keyword">return</span> count(queryWrapper) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步: 把hth-admin工程的MenuController类修改为如下，增加了删除菜单的访问接口、删除菜单的具体实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;menuId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable(&quot;menuId&quot;)</span> Long menuId)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (menuService.hasChild(menuId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(<span class="number">500</span>,<span class="string">&quot;存在子菜单不允许删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    menuService.removeById(menuId);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="角色列表"><a href="#角色列表" class="headerlink" title="角色列表"></a>角色列表</h2><h3 id="查询角色"><a href="#查询角色" class="headerlink" title="查询角色"></a>查询角色</h3><h4 id="接口设计-3"><a href="#接口设计-3" class="headerlink" title="接口设计"></a>接口设计</h4><p>需要有角色列表分页查询的功能。要求能够针对角色名称进行模糊查询。要求能够针对状态进行查询。要求按照role_sort进行升序排列</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>system&#x2F;role&#x2F;list</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-31"><a href="#代码实现-31" class="headerlink" title="代码实现"></a>代码实现</h4><p>第一步: 把hth-framework工程的Role表修改为如下，为其中的四个字段使用mybatisplus提供的字段字段、添加了menuIds属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span>  &#123;</span><br><span class="line">    <span class="comment">//角色ID@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色名称</span></span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="comment">//角色权限字符串</span></span><br><span class="line">    <span class="keyword">private</span> String roleKey;</span><br><span class="line">    <span class="comment">//显示顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer roleSort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色状态（0正常 1停用）</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">//删除标志（0代表存在 2代表删除）</span></span><br><span class="line">    <span class="keyword">private</span> String delFlag;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关联菜单id数组，不是表中的字段  用来接收参数使用</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long[] menuIds;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步: 把hth-framework工程的RoleService接口修改为如下，增加了查询角色列表的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Role&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询用户的角色信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectRoleKeyByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询角色列表</span></span><br><span class="line">    ResponseResult <span class="title function_">selectRolePage</span><span class="params">(Role role, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">selectRoleKeyByUserId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否是管理员 如果是返回集合中只需要有admin</span></span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">1L</span>)&#123;</span><br><span class="line">            List&lt;String&gt; roleKeys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            roleKeys.add(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> roleKeys;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则查询用户所具有的角色信息</span></span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectRoleKeyByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">selectRolePage</span><span class="params">(Role role, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Role&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//目前没有根据id查询</span></span><br><span class="line"><span class="comment">//        lambdaQueryWrapper.eq(Objects.nonNull(role.getId()),Role::getId,role.getId());</span></span><br><span class="line">        lambdaQueryWrapper.like(StringUtils.hasText(role.getRoleName()),Role::getRoleName,role.getRoleName());</span><br><span class="line">        lambdaQueryWrapper.eq(StringUtils.hasText(role.getStatus()),Role::getStatus,role.getStatus());</span><br><span class="line">        lambdaQueryWrapper.orderByAsc(Role::getRoleSort);</span><br><span class="line"></span><br><span class="line">        Page&lt;Role&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page,lambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        List&lt;Role&gt; roles = page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">        pageVo.setTotal(page.getTotal());</span><br><span class="line">        pageVo.setRows(roles);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建RoleController类，写入如下，是查询角色列表的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/system/role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------查询角色列表---------------------------------------</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(Role role, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleService.selectRolePage(role,pageNum,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改状态"><a href="#修改状态" class="headerlink" title="修改状态"></a>修改状态</h3><h4 id="一、接口设计"><a href="#一、接口设计" class="headerlink" title="一、接口设计"></a>一、接口设计</h4><p>要求能够修改角色的停启用状态</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>PUT</td>
<td>system&#x2F;role&#x2F;changeStatus</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-32"><a href="#代码实现-32" class="headerlink" title="代码实现"></a>代码实现</h4><p>第一步: 在hth-framework工程的dto目录新建ChangeRoleStatusDto类，写入如下，用于接收前端的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeRoleStatusDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RoleController类修改为如下，增加了修改角色状态的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@PutMapping(&quot;/changeStatus&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> ChangeRoleStatusDto roleStatusDto)</span>&#123;</span><br><span class="line">    <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>();</span><br><span class="line">    role.setId(roleStatusDto.getRoleId());</span><br><span class="line">    role.setStatus(roleStatusDto.getStatus());</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(roleService.updateById(role));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增角色"><a href="#新增角色" class="headerlink" title="新增角色"></a>新增角色</h3><p>需要提供新增角色的功能。</p>
<h4 id="接口设计-4"><a href="#接口设计-4" class="headerlink" title="接口设计"></a>接口设计</h4><p>①要想新增角色时能够直接设置角色所关联的菜单权限，就需要先查询出所有菜单，也就是获取菜单树</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;system&#x2F;menu&#x2F;treeselect</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-33"><a href="#代码实现-33" class="headerlink" title="代码实现"></a>代码实现</h4><p>第一步: 在hth-framework工程的utils目录新建SystemConverter类，写入如下，是一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SystemConverter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;MenuTreeVo&gt; <span class="title function_">buildMenuSelectTree</span><span class="params">(List&lt;Menu&gt; menus)</span> &#123;</span><br><span class="line">        List&lt;MenuTreeVo&gt; MenuTreeVos = menus.stream()</span><br><span class="line">                .map(m -&gt; <span class="keyword">new</span> <span class="title class_">MenuTreeVo</span>(m.getId(), m.getMenuName(), m.getParentId(), <span class="literal">null</span>))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        List&lt;MenuTreeVo&gt; options = MenuTreeVos.stream()</span><br><span class="line">                .filter(o -&gt; o.getParentId().equals(<span class="number">0L</span>))</span><br><span class="line">                .map(o -&gt; o.setChildren(getChildList(MenuTreeVos, o)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到子节点列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;MenuTreeVo&gt; <span class="title function_">getChildList</span><span class="params">(List&lt;MenuTreeVo&gt; list, MenuTreeVo option)</span> &#123;</span><br><span class="line">        List&lt;MenuTreeVo&gt; options = list.stream()</span><br><span class="line">                .filter(o -&gt; Objects.equals(o.getParentId(), option.getId()))</span><br><span class="line">                .map(o -&gt; o.setChildren(getChildList(list, o)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步: 在hth-framework工程的vo目录新建MenuTreeVo类，写入如下，用于把指定字段返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuTreeVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 节点ID */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 节点名称 */</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 子节点 */</span></span><br><span class="line"><span class="comment">//    @JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuTreeVo&gt; children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步: 在hth-framework工程的domain目录新建RoleMenu类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_role_menu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleMenu</span> &#123;</span><br><span class="line">    <span class="comment">/** 角色ID */</span></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 菜单ID */</span></span><br><span class="line">    <span class="keyword">private</span> Long menuId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建RoleMenuMapper接口，RoleMenuService接口、RoleMenuServiceImpl类</p>
<p>把hth-framework工程的RoleService接口修改为如下，增加了新增角色的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RoleMenuService roleMenuService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">       save(role);</span><br><span class="line">       System.out.println(role.getId());</span><br><span class="line">       <span class="keyword">if</span>(role.getMenuIds()!=<span class="literal">null</span>&amp;&amp;role.getMenuIds().length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           insertRoleMenu(role);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertRoleMenu</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">       List&lt;RoleMenu&gt; roleMenuList = Arrays.stream(role.getMenuIds())</span><br><span class="line">               .map(memuId -&gt; <span class="keyword">new</span> <span class="title class_">RoleMenu</span>(role.getId(), memuId))</span><br><span class="line">               .collect(Collectors.toList());</span><br><span class="line">       roleMenuService.saveBatch(roleMenuList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>MenuController类修改为如下，增加了 ‘新增角色-获取菜单下拉树列表’ 的代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/treeselect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">treeselect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//复用之前的selectMenuList方法。方法需要参数，参数可以用来进行条件查询，而这个方法不需要条件，所以直接new Menu()传入</span></span><br><span class="line">    List&lt;Menu&gt; menus = menuService.selectMenuList(<span class="keyword">new</span> <span class="title class_">Menu</span>());</span><br><span class="line">    List&lt;MenuTreeVo&gt; options =  SystemConverter.buildMenuSelectTree(menus);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改角色"><a href="#修改角色" class="headerlink" title="修改角色"></a>修改角色</h3><p>需要提供修改角色的功能。修改角色时可以修改角色所关联的菜单权限</p>
<h4 id="代码实现-34"><a href="#代码实现-34" class="headerlink" title="代码实现"></a>代码实现</h4><p>第一步: 在hth-framework工程的vo目录新建RoleMenuTreeSelectVo类，写入如下，用于把指定字段返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleMenuTreeSelectVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; checkedKeys;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuTreeVo&gt; menus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步: 把hth-framework工程的MenuService接口修改为如下，增加了 ‘根据角色id查询对应角色菜单列表树’ 的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Menu&gt; &#123;</span><br><span class="line">    <span class="comment">//查询用户的权限信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line">    <span class="comment">//查询用户的路由信息，也就是查询权限菜单</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectRouterMenuTreeByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">    <span class="comment">//查询菜单列表</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectMenuList</span><span class="params">(Menu menu)</span>;</span><br><span class="line">    <span class="comment">//删除菜单-判断是否存在子菜单</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasChild</span><span class="params">(Long menuId)</span>;</span><br><span class="line">    <span class="comment">//修改角色-根据角色id查询对应角色菜单列表树</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">selectMenuListByRoleId</span><span class="params">(Long roleId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步: 补充MenuMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MenuMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Menu&gt; &#123;</span><br><span class="line">    <span class="comment">//查询普通用户的权限信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectPermsByOtherUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">    <span class="comment">//查询超级管理员的路由信息(权限菜单)</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectAllRouterMenu</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//查询普通用户的路由信息(权限菜单)</span></span><br><span class="line">    List&lt;Menu&gt; <span class="title function_">selectOtherRouterMenuTreeByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">    <span class="comment">//修改角色-根据角色id查询对应角色菜单列表树</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">selectMenuListByRoleId</span><span class="params">(Long roleId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四步: 把hth-framework工程的resources&#x2F;mapper目录的MenuMapper.xml修改为如下，增加了 ‘根据角色id查询对应角色菜单列表树’ 的具体实现代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hth.mapper.MenuMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermsByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            DISTINCT m.perms</span><br><span class="line">        FROM</span><br><span class="line">            sg_blog.`sys_user_role` ur</span><br><span class="line">            LEFT JOIN sg_blog.`sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">            LEFT JOIN sg_blog.`sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;F&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllRouterMenu&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hth.domain.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">          DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,&#x27;&#x27;) AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time</span><br><span class="line">        FROM</span><br><span class="line">            sg_blog.`sys_menu` m</span><br><span class="line">        WHERE</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;M&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">        ORDER BY</span><br><span class="line">            m.parent_id,m.order_num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRouterMenuTreeByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hth.domain.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">          DISTINCT m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,&#x27;&#x27;) AS perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time</span><br><span class="line">        FROM</span><br><span class="line">            sg_blog.`sys_user_role` ur</span><br><span class="line">            LEFT JOIN sg_blog.`sys_role_menu` rm ON ur.`role_id` = rm.`role_id`</span><br><span class="line">            LEFT JOIN sg_blog.`sys_menu` m ON m.`id` = rm.`menu_id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            m.`menu_type` IN (&#x27;C&#x27;,&#x27;M&#x27;) AND</span><br><span class="line">            m.`status` = 0 AND</span><br><span class="line">            m.`del_flag` = 0</span><br><span class="line">        ORDER BY</span><br><span class="line">            m.parent_id,m.order_num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMenuListByRoleId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select m.id</span><br><span class="line">        from sg_blog.sys_menu m</span><br><span class="line">        left join sg_blog.sys_role_menu rm on m.id = rm.menu_id</span><br><span class="line">        where rm.role_id = #&#123;roleId&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        order by m.parent_id, m.order_num</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第五步: 把hth-framework工程的MenuServiceImpl类修改为如下，增加了 ‘根据角色id查询对应角色菜单列表树’ 的具体实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">selectMenuListByRoleId</span><span class="params">(Long roleId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getBaseMapper().selectMenuListByRoleId(roleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MenuController类修改为如下，是 ‘根据角色id查询对应角色菜单列表树’ 的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//---------------------修改角色-根据角色id查询对应角色菜单列表树--------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/roleMenuTreeselect/&#123;roleId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">roleMenuTreeSelect</span><span class="params">(<span class="meta">@PathVariable(&quot;roleId&quot;)</span> Long roleId)</span> &#123;</span><br><span class="line">    List&lt;Menu&gt; menus = menuService.selectMenuList(<span class="keyword">new</span> <span class="title class_">Menu</span>());</span><br><span class="line">    List&lt;Long&gt; checkedKeys = menuService.selectMenuListByRoleId(roleId);</span><br><span class="line">    List&lt;MenuTreeVo&gt; menuTreeVos = SystemConverter.buildMenuSelectTree(menus);</span><br><span class="line">    <span class="type">RoleMenuTreeSelectVo</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleMenuTreeSelectVo</span>(checkedKeys,menuTreeVos);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第七步: 在hth-framework工程的service目录新建RoleMenuService接口，写入如下，是 ‘保存角色信息’ 的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMenuService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;RoleMenu&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改角色-保存修改好的角色信息</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteRoleMenuByRoleId</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第八步: 在hth-framework工程的service目录新建RoleMenuServiceImpl类，写入如下，是 ‘保存角色信息’ 的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleMenuServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RoleMenuMapper, RoleMenu&gt; <span class="keyword">implements</span> <span class="title class_">RoleMenuService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteRoleMenuByRoleId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;RoleMenu&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(RoleMenu::getRoleId,id);</span><br><span class="line">        remove(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第九步: 把hth-framework工程的RoleService接口修改为如下，增加了 ‘保存角色信息’ 的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Role&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户的角色信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectRoleKeyByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询角色列表</span></span><br><span class="line">    ResponseResult <span class="title function_">selectRolePage</span><span class="params">(Role role, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增角色</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertRole</span><span class="params">(Role role)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改角色-保存修改好的角色信息</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateRole</span><span class="params">(Role role)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第十步: 把hth-framework工程的RoleServiceImpl类修改为如下，是 ‘保存角色信息’ 的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">    updateById(role);</span><br><span class="line">    roleMenuService.deleteRoleMenuByRoleId(role.getId());</span><br><span class="line">    insertRoleMenu(role);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第十一步: 把hth-admin工程的RoleController类修改为如下，增加了 ‘根据角色id查询对应的角色’ 和 ‘保存角色信息’ 的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//----------------------修改角色-根据角色id查询对应的角色-----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/&#123;roleId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable</span> Long roleId)</span> &#123;</span><br><span class="line">    <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> roleService.getById(roleId);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(role);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------修改角色-保存修改好的角色信息------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> Role role)</span> &#123;</span><br><span class="line">    roleService.updateRole(role);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除角色"><a href="#删除角色" class="headerlink" title="删除角色"></a>删除角色</h3><h4 id="接口设计-5"><a href="#接口设计-5" class="headerlink" title="接口设计"></a>接口设计</h4><p>删除固定的某个角色，注意是逻辑删除</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>DELETE</td>
<td>system&#x2F;role&#x2F;{id}</td>
<td>是</td>
</tr>
</tbody></table>
<h4 id="代码实现-35"><a href="#代码实现-35" class="headerlink" title="代码实现"></a>代码实现</h4><p>把hth-admin工程的RoleController类修改为如下，增加了删除角色的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable(name = &quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    roleService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="用户列表"><a href="#用户列表" class="headerlink" title="用户列表"></a>用户列表</h1><h2 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h2><h3 id="接口分析-22"><a href="#接口分析-22" class="headerlink" title="接口分析"></a>接口分析</h3><p>需要用户分页列表接口。可以根据用户名模糊搜索。可以进行手机号的搜索。可以进行状态的查询</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>system&#x2F;user&#x2F;list</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="代码实现-36"><a href="#代码实现-36" class="headerlink" title="代码实现"></a>代码实现</h3><p>第一步: 在hth-framework工程的vo目录新建UserVo类，写入如下，用于把指定字段返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号状态（0正常 1停用）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String phonenumber;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户性别（0男，1女，2未知）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头像</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人的用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步</p>
<p> 把hth-framework工程的UserService接口修改为如下，增加了查询用户列表的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">//查询用户列表</span></span><br><span class="line">    ResponseResult <span class="title function_">selectUserPage</span><span class="params">(User user, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">selectUserPage</span><span class="params">(User user, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">    queryWrapper.like(StringUtils.hasText(user.getUserName()),User::getUserName,user.getUserName());</span><br><span class="line">    queryWrapper.eq(StringUtils.hasText(user.getStatus()),User::getStatus,user.getStatus());</span><br><span class="line">    queryWrapper.eq(StringUtils.hasText(user.getPhonenumber()),User::getPhonenumber,user.getPhonenumber());</span><br><span class="line"></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    page.setCurrent(pageNum);</span><br><span class="line">    page.setSize(pageSize);</span><br><span class="line">    page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换成VO</span></span><br><span class="line">    List&lt;User&gt; users = page.getRecords();</span><br><span class="line">    List&lt;UserVo&gt; userVoList = users.stream()</span><br><span class="line">            .map(u -&gt; BeanCopyUtils.copyBean(u, UserVo.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">    pageVo.setTotal(page.getTotal());</span><br><span class="line">    pageVo.setRows(userVoList);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建UserController类，写入如下，是查询用户列表的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/system/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------------------查询用户列表-------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(User user, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.selectUserPage(user,pageNum,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h2><p>需要新增用户功能。新增用户时可以直接关联角色。注意如下</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">新增用户时注意密码加密存储</span><br><span class="line"></span><br><span class="line">用户名不能为空，否则提示：必需填写用户名</span><br><span class="line"></span><br><span class="line">用户名必须之前未存在，否则提示：用户名已存在</span><br><span class="line"></span><br><span class="line">手机号必须之前未存在，否则提示：手机号已存在</span><br><span class="line"></span><br><span class="line">邮箱必须之前未存在，否则提示：邮箱已存在</span><br></pre></td></tr></table></figure>

<h3 id="接口分析-23"><a href="#接口分析-23" class="headerlink" title="接口分析"></a>接口分析</h3><p>①查询角色列表接口。注意: 查询的是所有状态正常的角色</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;system&#x2F;role&#x2F;listAllRole</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="代码实现-37"><a href="#代码实现-37" class="headerlink" title="代码实现"></a>代码实现</h3><p>新建UserRole类，写入如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_user_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRole</span> &#123;</span><br><span class="line">    <span class="comment">/** 用户ID */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 角色ID */</span></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建UserRoleMapper接口，UserRoleService接口</p>
<p>把hth-framework工程的RoleService接口修改为如下，增加了查询角色列表的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Role&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户的角色信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectRoleKeyByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询角色列表</span></span><br><span class="line">    ResponseResult <span class="title function_">selectRolePage</span><span class="params">(Role role, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增角色</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertRole</span><span class="params">(Role role)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改角色-保存修改好的角色信息</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateRole</span><span class="params">(Role role)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户-①查询角色列表接口</span></span><br><span class="line">    List&lt;Role&gt; <span class="title function_">selectRoleAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把hth-framework工程的RoleServiceImpl类修改为如下，增加了查询角色列表的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-----------------------新增用户-①查询角色列表接口----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">selectRoleAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> list(Wrappers.&lt;Role&gt;lambdaQuery().eq(Role::getStatus, SystemCanstants.NORMAL));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RoleController类修改为如下，增加了查询角色列表的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//--------------------------------新增用户---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/listAllRole&quot;)</span></span><br><span class="line"><span class="comment">//①查询角色列表接口</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">listAllRole</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Role&gt; roles = roleService.selectRoleAll();</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(roles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第九步: 把hth-framework工程的UserService接口修改为如下，增加了新增用户的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增加用户-②新增用户</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">checkUserNameUnique</span><span class="params">(String userName)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">checkPhoneUnique</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">checkEmailUnique</span><span class="params">(User user)</span>;</span><br><span class="line">ResponseResult <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>第十步: 把hth-framework工程的UserServiceImpl接口修改为如下，增加了新增用户的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">userInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> SecurityUtils.getUserId();</span><br><span class="line">        <span class="comment">//根据用户id查询用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">        <span class="comment">//封装成UserInfoVo</span></span><br><span class="line">        <span class="type">UserInfoVo</span> <span class="variable">vo</span> <span class="operator">=</span> BeanCopyUtils.copyBean(user,UserInfoVo.class);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(vo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">updateUserInfo</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        updateById(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">register</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//对数据进行非空判断</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getUserName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.USERNAME_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.PASSWORD_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getEmail()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.EMAIL_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getNickName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.NICKNAME_NOT_NULL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对数据进行是否存在的判断</span></span><br><span class="line">        <span class="keyword">if</span>(userNameExist(user.getUserName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.USERNAME_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nickNameExist(user.getNickName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.NICKNAME_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//对密码进行加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodePassword</span> <span class="operator">=</span> passwordEncoder.encode(user.getPassword());</span><br><span class="line">        user.setPassword(encodePassword);</span><br><span class="line">        <span class="comment">//存入数据库</span></span><br><span class="line">        save(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">selectUserPage</span><span class="params">(User user, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(user.getUserName()),User::getUserName,user.getUserName());</span><br><span class="line">        queryWrapper.eq(StringUtils.hasText(user.getStatus()),User::getStatus,user.getStatus());</span><br><span class="line">        queryWrapper.eq(StringUtils.hasText(user.getPhonenumber()),User::getPhonenumber,user.getPhonenumber());</span><br><span class="line"></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        List&lt;User&gt; users = page.getRecords();</span><br><span class="line">        List&lt;UserVo&gt; userVoList = users.stream()</span><br><span class="line">                .map(u -&gt; BeanCopyUtils.copyBean(u, UserVo.class))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">        pageVo.setTotal(page.getTotal());</span><br><span class="line">        pageVo.setRows(userVoList);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkUserNameUnique</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUserName,userName))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPhoneUnique</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getPhonenumber,user.getPhonenumber()))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkEmailUnique</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getEmail,user.getEmail()))==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//密码加密处理</span></span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        save(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user.getRoleIds()!=<span class="literal">null</span>&amp;&amp;user.getRoleIds().length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            insertUserRole(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 删除用户与角色关联</span></span><br><span class="line">        LambdaQueryWrapper&lt;UserRole&gt; userRoleUpdateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userRoleUpdateWrapper.eq(UserRole::getUserId,user.getId());</span><br><span class="line">        userRoleService.remove(userRoleUpdateWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增用户与角色管理</span></span><br><span class="line">        insertUserRole(user);</span><br><span class="line">        <span class="comment">// 更新用户信息</span></span><br><span class="line">        updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleService userRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertUserRole</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        List&lt;UserRole&gt; sysUserRoles = Arrays.stream(user.getRoleIds())</span><br><span class="line">                .map(roleId -&gt; <span class="keyword">new</span> <span class="title class_">UserRole</span>(user.getId(), roleId)).collect(Collectors.toList());</span><br><span class="line">        userRoleService.saveBatch(sysUserRoles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">nickNameExist</span><span class="params">(String nickName)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getNickName,nickName);</span><br><span class="line">        <span class="keyword">return</span> count(queryWrapper)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">userNameExist</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUserName,userName);</span><br><span class="line">        <span class="keyword">return</span> count(queryWrapper)&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第十一步: 在hth-admin工程的controller目录新建UserController类，写入如下，是新增用户的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getUserName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.REQUIRE_USERNAME);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!userService.checkUserNameUnique(user.getUserName()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.USERNAME_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!userService.checkPhoneUnique(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.PHONENUMBER_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!userService.checkEmailUnique(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemException</span>(AppHttpCodeEnum.EMAIL_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService.addUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><h3 id="接口分析-24"><a href="#接口分析-24" class="headerlink" title="接口分析"></a>接口分析</h3><p>删除固定的某个用户，注意是逻辑删除。不能删除当前操作的用户</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>DELETE</td>
<td>&#x2F;system&#x2F;user&#x2F;{userIds}</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="代码实现-38"><a href="#代码实现-38" class="headerlink" title="代码实现"></a>代码实现</h3><p>第一步: 把hth-admin工程的UserController类修改为如下，增加了删除用户的实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//--------------------------------删除用户--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;userIds&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable</span> List&lt;Long&gt; userIds)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(userIds.contains(SecurityUtils.getUserId()))&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.errorResult(<span class="number">500</span>,<span class="string">&quot;不能删除当前你正在使用的用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.removeByIds(userIds);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><p>需要提供修改用户的功能。修改用户时可以修改用户所关联的角色</p>
<h3 id="一、接口分析-1"><a href="#一、接口分析-1" class="headerlink" title="一、接口分析"></a>一、接口分析</h3><p>①根据id查询用户信息</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>Get</td>
<td>&#x2F;system&#x2F;user&#x2F;{userId}</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="代码实现-39"><a href="#代码实现-39" class="headerlink" title="代码实现"></a>代码实现</h3><p>第一步: 在hth-framework工程的vo目录新建UserInfoAndRoleIdsVo类，写入如下，用于把指定字段返回给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoAndRoleIdsVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; roleIds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步: 把hth-framework工程的RoleMapper接口修改为如下，增加了根据id查询用户信息的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Role&gt; &#123;</span><br><span class="line">    <span class="comment">//查询普通用户的角色权限</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectRoleKeyByOtherUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">    <span class="comment">//修改用户-①根据id查询用户信息</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">selectRoleIdByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步: 把hth-framework工程的RoleMapper.xml修改为如下，增加了根据id查询用户信息的具体实现代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hth.mapper.RoleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRoleKeyByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            r.`role_key`</span><br><span class="line">        FROM</span><br><span class="line">            sg_blog.`sys_user_role` ur</span><br><span class="line">            LEFT JOIN sg_blog.`sys_role` r ON ur.`role_id` = r.`id`</span><br><span class="line">        WHERE</span><br><span class="line">            ur.`user_id` = #&#123;userId&#125; AND</span><br><span class="line">            r.`status` = 0 AND</span><br><span class="line">            r.`del_flag` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRoleIdByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select r.id</span><br><span class="line">        from sg_blog.sys_role r</span><br><span class="line">	        left join sg_blog.sys_user_role ur on ur.role_id = r.id</span><br><span class="line">	    where ur.user_id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第四步: 把hth-framework工程的RoleService接口修改为如下，增加了根据id查询用户信息的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Role&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户的角色信息</span></span><br><span class="line">    List&lt;String&gt; <span class="title function_">selectRoleKeyByUserId</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询角色列表</span></span><br><span class="line">    ResponseResult <span class="title function_">selectRolePage</span><span class="params">(Role role, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增角色</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertRole</span><span class="params">(Role role)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改角色-保存修改好的角色信息</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateRole</span><span class="params">(Role role)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户-①查询角色列表接口</span></span><br><span class="line">    List&lt;Role&gt; <span class="title function_">selectRoleAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户-①根据id查询用户信息</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">selectRoleIdByUserId</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第五步: 把hth-framework工程的RoleServiceImpl类修改为如下，增加了根据id查询用户信息的具体实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//-----------------------修改用户-①根据id查询用户信息----------------------------</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">selectRoleIdByUserId</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getBaseMapper().selectRoleIdByUserId(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第六步: 把hth-framework工程的UserService接口修改为如下，增加了更新用户信息的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改用户-②更新用户信息</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span></span><br></pre></td></tr></table></figure>

<p>第七步: 把hth-framework工程的UserServiceImpl类修改为如下，增加了更新用户信息的具体实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-----------------------------修改用户-②更新用户信息-------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="comment">// 删除用户与角色关联</span></span><br><span class="line">    LambdaQueryWrapper&lt;UserRole&gt; userRoleUpdateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    userRoleUpdateWrapper.eq(UserRole::getUserId,user.getId());</span><br><span class="line">    userRoleService.remove(userRoleUpdateWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增用户与角色管理</span></span><br><span class="line">    insertUserRole(user);</span><br><span class="line">    <span class="comment">// 更新用户信息</span></span><br><span class="line">    updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第八步: 把hth-admin工程的UserController类修改为如下，增加了根据id查询用户信息、更新用户信息的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------------------------修改用户-②更新用户信息--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    userService.updateUser(user);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="友链列表"><a href="#友链列表" class="headerlink" title="友链列表"></a>友链列表</h1><h2 id="查询友链"><a href="#查询友链" class="headerlink" title="查询友链"></a>查询友链</h2><h3 id="接口分析-25"><a href="#接口分析-25" class="headerlink" title="接口分析"></a>接口分析</h3><p>需要分页查询友链列表。能根据友链名称进行模糊查询。能根据状态进行查询</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>&#x2F;content&#x2F;link&#x2F;list</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="代码实现-40"><a href="#代码实现-40" class="headerlink" title="代码实现"></a>代码实现</h3><p>第一步: 把hth-framework工程的LinkService接口修改为如下，增加了分页查询友链的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LinkService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Link&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ResponseResult <span class="title function_">getAllLink</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    PageVo <span class="title function_">selectLinkPage</span><span class="params">(Link link, Integer pageNum, Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LinkServiceImpl类修改为如下，增加了分类查询友链的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageVo <span class="title function_">selectLinkPage</span><span class="params">(Link link, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Link&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line"></span><br><span class="line">        queryWrapper.like(StringUtils.hasText(link.getName()),Link::getName, link.getName());</span><br><span class="line">        queryWrapper.eq(Objects.nonNull(link.getStatus()),Link::getStatus, link.getStatus());</span><br><span class="line"></span><br><span class="line">        Page&lt;Link&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        page.setCurrent(pageNum);</span><br><span class="line">        page.setSize(pageSize);</span><br><span class="line">        page(page,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成VO</span></span><br><span class="line">        List&lt;Link&gt; categories = page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageVo</span>();</span><br><span class="line">        pageVo.setTotal(page.getTotal());</span><br><span class="line">        pageVo.setRows(categories);</span><br><span class="line">        <span class="keyword">return</span> pageVo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>新建LinkController类，写入如下，是分页查询友链的访问接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/content/link&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LinkService linkService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------分页查询友链---------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">list</span><span class="params">(Link link, Integer pageNum, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="type">PageVo</span> <span class="variable">pageVo</span> <span class="operator">=</span> linkService.selectLinkPage(link,pageNum,pageSize);</span><br><span class="line">        <span class="keyword">return</span> ResponseResult.okResult(pageVo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新增友链"><a href="#新增友链" class="headerlink" title="新增友链"></a>新增友链</h2><h3 id="一、接口分析-2"><a href="#一、接口分析-2" class="headerlink" title="一、接口分析"></a>一、接口分析</h3><p>需要新增友链功能</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>POST</td>
<td>&#x2F;content&#x2F;link</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="代码实现-41"><a href="#代码实现-41" class="headerlink" title="代码实现"></a>代码实现</h3><p>第一步: 把hth-framework工程的domain目录下的Link类修改为如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;sg_link&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Link</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String logo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//网站地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//审核状态 (0代表审核通过，1代表审核未通过，2代表未审核)</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字段自增</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步: 把hth-admin工程的LinkController类修改为如下，增加了新增友链的具体代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------------------------------增加友链----------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Link link)</span>&#123;</span><br><span class="line">    linkService.save(link);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改友链"><a href="#修改友链" class="headerlink" title="修改友链"></a>修改友链</h2><h3 id="一、接口分析-3"><a href="#一、接口分析-3" class="headerlink" title="一、接口分析"></a>一、接口分析</h3><p>①根据id查询友链</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>Get</td>
<td>content&#x2F;link&#x2F;{id}</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="代码实现-42"><a href="#代码实现-42" class="headerlink" title="代码实现"></a>代码实现</h3><p>第一步: 把hth-admin工程的LinkController类修改为如下，增加了修改友链的具体实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------修改友链---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//①根据id查询友链</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">    <span class="type">Link</span> <span class="variable">link</span> <span class="operator">=</span> linkService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult(link);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping(&quot;/changeLinkStatus&quot;)</span></span><br><span class="line"><span class="comment">//②修改友链状态</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">changeLinkStatus</span><span class="params">(<span class="meta">@RequestBody</span> Link link)</span>&#123;</span><br><span class="line">    linkService.updateById(link);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="comment">//③修改友链</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestBody</span> Link link)</span>&#123;</span><br><span class="line">    linkService.updateById(link);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除友链"><a href="#删除友链" class="headerlink" title="删除友链"></a>删除友链</h2><h3 id="一、接口分析-4"><a href="#一、接口分析-4" class="headerlink" title="一、接口分析"></a>一、接口分析</h3><p>删除某个友链，注意是逻辑删除</p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>请求路径</th>
<th>是否需求token头</th>
</tr>
</thead>
<tbody><tr>
<td>DELETE</td>
<td>&#x2F;content&#x2F;link&#x2F;{id}</td>
<td>是</td>
</tr>
</tbody></table>
<h3 id="代码实现-43"><a href="#代码实现-43" class="headerlink" title="代码实现"></a>代码实现</h3><p>第一步: 把hth-admin工程的LinkController类修改为如下，增加了删除友链的具体实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------------------------------删除友链---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    linkService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.okResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="部署博客项目"><a href="#部署博客项目" class="headerlink" title="部署博客项目"></a>部署博客项目</h1><h2 id="数据库打包"><a href="#数据库打包" class="headerlink" title="数据库打包"></a>数据库打包</h2><p>第一步: 在S盘新建SpringBootBlogMySQL文件夹</p>
<p>第二步: win+r，在弹出的命令行黑窗口输入如下，-p是数据库密码，hthbolgSite.sql是输出后的文件名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p228675 sg_blog &gt; D:\SpringBootBlogMySQL\mybolgSite.sql</span><br></pre></td></tr></table></figure>

<p>第三步: 查看SpringBootBlogMySQL文件夹，就会发现有一个hthbolgSite.sql，这个就是数据库备份文件，也就是我们要的打包文件</p>
<p>第四步: 以后要用的时候，先自己建一个名称为hth_blog的数据库，然后导入刚刚生成的myblogSite.sql文件即可</p>
<h2 id="后端项目打包"><a href="#后端项目打包" class="headerlink" title="后端项目打包"></a>后端项目打包</h2><p>第一步: 把hth-admin(子工程)的application.yml文件修改为如下</p>
<p>把数据库ip换成服务器公网ip，redis同样用公网ip</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8989</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//47.100.210.238:3306/hth_blog?characterEncoding=utf-8</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">  servlet:</span><br><span class="line">    # 文件上传</span><br><span class="line">    multipart:</span><br><span class="line">      # 单个上传文件的最大允许大小</span><br><span class="line">      max-file-size: 20MB</span><br><span class="line">      # HTTP请求中包含的所有文件的总大小的最大允许值</span><br><span class="line">      max-request-size: 20MB</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    host: <span class="number">47.100</span><span class="number">.210</span><span class="number">.238</span></span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    # 日志</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      # 逻辑删除的字段</span><br><span class="line">      logic-delete-field: delFlag</span><br><span class="line">      # 代表已删除的值</span><br><span class="line">      logic-delete-value: <span class="number">1</span></span><br><span class="line">      # 代表未删除的值</span><br><span class="line">      logic-not-delete-value: <span class="number">0</span></span><br><span class="line">      # 主键自增策略，以mysql数据库为准</span><br><span class="line">      id-type: auto</span><br><span class="line">oss:</span><br><span class="line">  accessKey: <span class="string">&quot;sTNq8rKyhIK8yu-wwRBoF7BnKqlyIjvsYpKEWytD&quot;</span></span><br><span class="line">  secretKey: <span class="string">&quot;ts-vlHWJ5aZxqy4QSZNgLaUGxdksg5K8SJxh-O1Y&quot;</span></span><br><span class="line">  bucket: <span class="string">&quot;hth-blog&quot;</span></span><br></pre></td></tr></table></figure>



<p>第二步: 把hth-blog(子工程)的application.yml文件修改为如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">7777</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//47.100.210.238:3306/hth_blog?characterEncoding=utf-8</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">  servlet:</span><br><span class="line">    # 文件上传</span><br><span class="line">    multipart:</span><br><span class="line">      # 单个上传文件的最大允许大小</span><br><span class="line">      max-file-size: 20MB</span><br><span class="line">      # HTTP请求中包含的所有文件的总大小的最大允许值</span><br><span class="line">      max-request-size: 20MB</span><br><span class="line">  redis:</span><br><span class="line">    host: <span class="number">47.100</span><span class="number">.210</span><span class="number">.238</span></span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    # 日志</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      # 逻辑删除的字段</span><br><span class="line">      logic-delete-field: delFlag</span><br><span class="line">      # 代表已删除的值</span><br><span class="line">      logic-delete-value: <span class="number">1</span></span><br><span class="line">      # 代表未删除的值</span><br><span class="line">      logic-not-delete-value: <span class="number">0</span></span><br><span class="line">      # 主键自增策略，以mysql数据库为准</span><br><span class="line">      id-type: auto</span><br><span class="line">oss:</span><br><span class="line">  accessKey: <span class="string">&quot;sTNq8rKyhIK8yu-wwRBoF7BnKqlyIjvsYpKEWytD&quot;</span></span><br><span class="line">  secretKey: <span class="string">&quot;ts-vlHWJ5aZxqy4QSZNgLaUGxdksg5K8SJxh-O1Y&quot;</span></span><br><span class="line">  bucket: <span class="string">&quot;hth-blog&quot;</span></span><br></pre></td></tr></table></figure>

<p>第三步: 把Blog(父工程)的pom.xml文件bulid部分修改为如下，然后刷新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;!--配置maven版本--&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">            &lt;!--配置jdk版本--&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;$&#123;java.version&#125;&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;$&#123;java.version&#125;&lt;/target&gt;</span><br><span class="line">                &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;!-- 此插件必须放在父 POM 中  --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">            &lt;executions&gt;</span><br><span class="line">                &lt;!--</span><br><span class="line">                执行本插件的方法为，在主目录下执行如下命令：</span><br><span class="line">                mvn <span class="keyword">package</span> assembly:single</span><br><span class="line"></span><br><span class="line">                对于 IntelliJ IDEA，生成的 JAR 包位于每个模块下的文件夹 target</span><br><span class="line">                --&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                    &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">                    &lt;phase&gt;<span class="keyword">package</span>&lt;/phase&gt;</span><br><span class="line">                    &lt;goals&gt;</span><br><span class="line">                        &lt;!-- 此处 IntelliJ IDEA 可能会报红，这是正常现象  --&gt;</span><br><span class="line">                        &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">                    &lt;/goals&gt;</span><br><span class="line">                &lt;/execution&gt;</span><br><span class="line">            &lt;/executions&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;archive&gt;</span><br><span class="line">                    &lt;manifest&gt;</span><br><span class="line">                        &lt;!-- 配置程序运行入口所在的类 --&gt;</span><br><span class="line">                        &lt;mainClass&gt;com.hth.HTHBlogApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;/manifest&gt;</span><br><span class="line">                    &lt;manifest&gt;</span><br><span class="line">                        &lt;!-- 配置程序运行入口所在的类 --&gt;</span><br><span class="line">                        &lt;mainClass&gt;com.hth.BlogAdminApplication&lt;/mainClass&gt;</span><br><span class="line">                    &lt;/manifest&gt;</span><br><span class="line">                &lt;/archive&gt;</span><br><span class="line">                &lt;!-- 设置 JAR 包输出目录 --&gt;</span><br><span class="line">                &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/#maven-assembly-plugin&lt;/outputDirectory&gt;</span><br><span class="line">                &lt;!-- 设置打包后的 JAR 包的目录结构为默认 --&gt;</span><br><span class="line">                &lt;descriptorRefs&gt;</span><br><span class="line">                    &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">                &lt;/descriptorRefs&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第四步: 把hth-blog(子工程)的pom.xml文件新增如下，然后刷新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">2.5</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">        &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第五步: 把hth-admin(子工程)的pom.xml文件新增如下，然后刷新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.5</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">            &lt;executions&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                    &lt;goals&gt;</span><br><span class="line">                        &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                    &lt;/goals&gt;</span><br><span class="line">                &lt;/execution&gt;</span><br><span class="line">            &lt;/executions&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">    &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>第六步: 打开父工程所在的目录，导航栏输入cmd回车会弹出一个黑窗口</p>
<p><img src="/assets/image-20240402182836712.png"></p>
<p>第七步: 在黑窗口输入如下，即可得到hth-admin、hth-blog工程的jar包。当然也得到了hth-framework工程的jar包(这个jar包用不上)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mvn <span class="keyword">package</span> assembly:single</span><br></pre></td></tr></table></figure>

<p>第八步: 测试jar包。只需要输入如下，即可测试hth-admin或hth-blog工程的jar包，建议测试hth-admin工程的jar包，会比较方便</p>
<p>注意: 由于hth-blog在启动时必须要开redis，如果是测试hth-blog工程的jar包，那么你必须先开启redis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar hth-admin.jar</span><br></pre></td></tr></table></figure>

<h2 id="前端项目打包"><a href="#前端项目打包" class="headerlink" title="前端项目打包"></a>前端项目打包</h2><p>第一步: 把sg-blog-vue(前台)项目的config目录下的index.js文件，port属性值从8080改为8093</p>
<p>第二步: 把sg-vue-admin(后台)项目的vue.config.js文件的port值从81改为8094</p>
<p>第三步: 把sg-blog-vue\src\vue.config.js文件，里面的localhost改为服务器ip</p>
<p>第四步: 把sg-blog-vue\src\store\index.js文件，里面的localhost改为服务器ip</p>
<p>第五步: 把sg-blog-vue的.env.development文件，里面的localhost改为服务器ip，注意端口是8989</p>
<p>第六步: 把sg-blog-vue的.env.production文件，里面的localhost改为服务器ip，注意端口是8989</p>
<p>第七步: 把sg-vue-admin的vue.config.js文件，里面的localhost改为服务器ip，注意端口是8989</p>
<p>第八步: 把sg-vue-admin\src\router\index.js文件修改为如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router from <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Layout */</span></span><br><span class="line"><span class="keyword">import</span> Layout from <span class="string">&#x27;@/layout&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: sub-menu only appear when route children.length &gt;= 1</span></span><br><span class="line"><span class="comment"> * Detail see: https://panjiachen.github.io/vue-element-admin-site/guide/essentials/router-and-nav.html</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * hidden: true                   if set true, item will not show in the sidebar(default is false)</span></span><br><span class="line"><span class="comment"> * alwaysShow: true               if set true, will always show the root menu</span></span><br><span class="line"><span class="comment"> *                                if not set alwaysShow, when item has more than one children route,</span></span><br><span class="line"><span class="comment"> *                                it will becomes nested mode, otherwise not show the root menu</span></span><br><span class="line"><span class="comment"> * redirect: noRedirect           if set noRedirect will no redirect in the breadcrumb</span></span><br><span class="line"><span class="comment"> * name:&#x27;router-name&#x27;             the name is used by &lt;keep-alive&gt; (must set!!!)</span></span><br><span class="line"><span class="comment"> * meta : &#123;</span></span><br><span class="line"><span class="comment">    roles: [&#x27;admin&#x27;,&#x27;editor&#x27;]    control the page roles (you can set multiple roles)</span></span><br><span class="line"><span class="comment">    title: &#x27;title&#x27;               the name show in sidebar and breadcrumb (recommend set)</span></span><br><span class="line"><span class="comment">    icon: &#x27;svg-name&#x27;/&#x27;el-icon-x&#x27; the icon show in the sidebar</span></span><br><span class="line"><span class="comment">    breadcrumb: false            if set false, the item will hidden in breadcrumb(default is true)</span></span><br><span class="line"><span class="comment">    activeMenu: &#x27;/example/list&#x27;  if set path, the sidebar will highlight the path you set</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * constantRoutes</span></span><br><span class="line"><span class="comment"> * a base page that does not have permission requirements</span></span><br><span class="line"><span class="comment"> * all roles can be accessed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">export <span class="type">const</span> <span class="variable">constantRoutes</span> <span class="operator">=</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    hidden: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      meta: &#123; title: <span class="string">&#x27;首页&#x27;</span>, icon: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/write&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Write&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/content/article/write/index&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/system/user&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/system/user&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/system/role&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;role&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/system/role&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/system/menu&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;menu&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/system/menu&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/system/role&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;role&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/system/role&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/content/article&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;article&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/content/article/index&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/content/category&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/content/category/index&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/content/link&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;link&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/content/link/index&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/content/tag&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;tag&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/content/tag/index&#x27;</span>),</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">createRouter</span> <span class="operator">=</span> () =&gt; <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="comment">// mode: &#x27;history&#x27;, // require service support</span></span><br><span class="line">  scrollBehavior: () =&gt; (&#123; y: <span class="number">0</span> &#125;),</span><br><span class="line">  routes: constantRoutes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">router</span> <span class="operator">=</span> createRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detail see: https://github.com/vuejs/vue-router/issues/1234#issuecomment-357941465</span></span><br><span class="line">export function <span class="title function_">resetRouter</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">const</span> <span class="variable">newRouter</span> <span class="operator">=</span> createRouter()</span><br><span class="line">  router.matcher = newRouter.matcher <span class="comment">// reset router</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>第九步: 把sg-vue-admin\src\main.js文件，注释掉下面的内容</p>
<p><img src="/assets/image-20240402184510168.png" alt="image-20240402184510168"></p>
<p>第十步: 在sg-blog-vue项目的终端执行如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>第十一步: 在sg-vue-admin项目的终端执行如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm run build:prod</span><br></pre></td></tr></table></figure>

<p>最后检查打包目录是否生成</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/jpg/35597420/1693034043756-4071e4ef-f9b1-44c0-bfe4-dd5530b87107.jpg" alt="img"></p>
<h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><h3 id="1-开放防火墙"><a href="#1-开放防火墙" class="headerlink" title="1. 开放防火墙"></a>1. 开放防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7777/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8989/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8093/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8094/tcp --permanent</span><br><span class="line"></span><br><span class="line">systemctl restart firewalld.service # 重启防火墙</span><br></pre></td></tr></table></figure>

<h3 id="2-开放安全组"><a href="#2-开放安全组" class="headerlink" title="2. 开放安全组"></a>2. 开放安全组</h3><p><img src="/assets/image-20240402185504014.png" alt="image-20240402185504014"></p>
<h3 id="3-Docker安装"><a href="#3-Docker安装" class="headerlink" title="3. Docker安装"></a>3. Docker安装</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br><span class="line">yum install -y yum-utils</span><br><span class="line">yum install vim</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line">systemctl start docker</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h3 id="4-拉取镜像"><a href="#4-拉取镜像" class="headerlink" title="4. 拉取镜像"></a>4. 拉取镜像</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker pull openjdk:<span class="number">8</span></span><br><span class="line">docker pull mysql:<span class="number">8.0</span>.<span class="number">19</span></span><br><span class="line">docker pull redis:<span class="number">6.0</span>.<span class="number">8</span></span><br><span class="line">docker pull nginx:<span class="number">1.18</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">docker images <span class="comment"># 查看有哪些镜像</span></span><br></pre></td></tr></table></figure>

<h3 id="5-构建镜像"><a href="#5-构建镜像" class="headerlink" title="5. 构建镜像"></a>5. 构建镜像</h3><p>第一步: 在&#x2F;root目录(主目录)新建mydata目录，将hth-admin.jar包和hth-blog.jar包传到这个mydata目录里面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd # 显示当前所在目录</span><br><span class="line">mkdir mydata # 创建mydata目录</span><br><span class="line">cd # 先回到主目录</span><br><span class="line">cd mydata &amp;&amp; ll # 查看mydata目录里面是否有huanf-admin.jar包和huanf-blog.jar包</span><br></pre></td></tr></table></figure>

<p>第二步: 在mydata目录新建Dockerfile文件，写入如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">cd mydata</span><br><span class="line">touch Dockerfile</span><br><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础镜像使用jdk1.8</span></span><br><span class="line">FROM openjdk:8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">作者</span></span><br><span class="line">MAINTAINER hth</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp</span></span><br><span class="line">VOLUME /tmp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将jar包添加到容器中并更名</span></span><br><span class="line">ADD hth-blog.jar hth_blog.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行jar包</span></span><br><span class="line">RUN bash -c &#x27;touch /hth_blog.jar&#x27;</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/hth_blog.jar&quot;]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">暴露7777端口作为微服务</span></span><br><span class="line">EXPOSE 7777</span><br></pre></td></tr></table></figure>



<p>第三步: 在mydata目录执行如下，作用是构建hth-blog.jar包的镜像，构建出来的镜像名为hth_blog</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t hth_blog:1.0 .</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20240402190827395.png" alt="image-20240402190827395"></p>
<p>第四步: 把mydata目录下的Dockerfile文件修改为如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础镜像使用jdk1.8</span></span><br><span class="line">FROM openjdk:8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">作者</span></span><br><span class="line">MAINTAINER hth</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp</span></span><br><span class="line">VOLUME /tmp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将jar包添加到容器中并更名</span></span><br><span class="line">ADD blog-admin.jar hth_admin.jar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行jar包</span></span><br><span class="line">RUN bash -c &#x27;touch /hth_admin.jar&#x27;</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/hth_admin.jar&quot;]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">暴露8989端口作为微服务</span></span><br><span class="line">EXPOSE 8989</span><br></pre></td></tr></table></figure>

<p>第五步: 在mydata目录执行如下，作用是构建hth-admin.jar包的镜像，构建出来的镜像名为hth-admin</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t hth_admin:1.0 .</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20240402191158907.png" alt="image-20240402191158907"></p>
<p>第六步: 检查是否构建出hth_blog和hth_admin镜像</p>
<p><img src="/assets/image-20240402191711008.png" alt="image-20240402191711008"></p>
<h3 id="6-创建容器"><a href="#6-创建容器" class="headerlink" title="6. 创建容器"></a>6. 创建容器</h3><p>第一步: 查看Docker-compose版本，如果你是按照我上面安装的docker，那么你肯定会有Docker-compose</p>
<p>第二步: 在mydata目录新建docker-compose.yml文件，写入如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">cd mydata</span><br><span class="line">touch docker-compose.yml</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compose版本</span></span><br><span class="line">version: &quot;3&quot;  </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  hth_blog:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">微服务镜像</span>  </span><br><span class="line">    image: hth_blog:1.0</span><br><span class="line">    container_name: hth_blog</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;7777:7777&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据卷</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /app/hth_blog:/data/hth_blog</span><br><span class="line">    networks: </span><br><span class="line">      - blog_network</span><br><span class="line">    depends_on: </span><br><span class="line">      - redis</span><br><span class="line">      - mysql</span><br><span class="line">      - nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  hth_admin:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">微服务镜像</span></span><br><span class="line">    image: hth_admin:1.0</span><br><span class="line">    container_name: hth_admin</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8989:8989&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据卷</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /app/hth_admin:/data/hth_admin</span><br><span class="line">    networks:</span><br><span class="line">      - blog_network</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">      - mysql</span><br><span class="line">      - nginx</span><br><span class="line">     </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">redis服务</span></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:6.0.8</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6379:6379&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - /app/redis/conf/redis.conf:/etc/redis/redis.conf</span><br><span class="line">      - /app/redis/data:/data</span><br><span class="line">    networks: </span><br><span class="line">      - blog_network</span><br><span class="line">    command: redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">mysql服务</span></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:8.0.19</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: &#x27;admin&#x27;</span><br><span class="line">      MYSQL_ALLOW_EMPTY_PASSWORD: &#x27;no&#x27;</span><br><span class="line">      MYSQL_DATABASE: &#x27;hth_blog&#x27;</span><br><span class="line">      MYSQL_USER: &#x27;root&#x27;</span><br><span class="line">      MYSQL_PASSWORD: &#x27;123456&#x27;</span><br><span class="line">    ports:</span><br><span class="line">       - &quot;3306:3306&quot;</span><br><span class="line">    volumes:</span><br><span class="line">       - /app/mysql/db:/var/lib/mysql</span><br><span class="line">       - /app/mysql/conf/my.cnf:/etc/my.cnf</span><br><span class="line">       - /app/mysql/init:/docker-entrypoint-initdb.d</span><br><span class="line">    networks:</span><br><span class="line">      - blog_network</span><br><span class="line">    command: --default-authentication-plugin=mysql_native_password #解决外部无法访问</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">nginx服务</span></span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:1.18.0</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">      - &quot;8093:8093&quot;</span><br><span class="line">      - &quot;8094:8094&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - /app/nginx/html:/usr/share/nginx/html</span><br><span class="line">      - /app/nginx/logs:/var/log/nginx</span><br><span class="line">      - /app/nginx/conf:/etc/nginx</span><br><span class="line">    networks:</span><br><span class="line">      - blog_network</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">创建自定义网络</span></span><br><span class="line">networks: </span><br><span class="line">   blog_network:</span><br></pre></td></tr></table></figure>



<p>第三步: 输入如下，作用是检查docker-compose.yml文件有没有语法错误，如果输入之后没任何输出，就说明没有语法错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">cd mydata</span><br><span class="line">docker compose config -q</span><br></pre></td></tr></table></figure>

<p>第四步: 运行docker-compose.yml文件，就可以创建并运行java容器、mysql容器、redis容器、nginx容器。-d表示后台运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br><span class="line">docker ps -a #查看正在运行的容器</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20240402192453539.png" alt="image-20240402192453539"></p>
<h3 id="7-导入数据库"><a href="#7-导入数据库" class="headerlink" title="7. 导入数据库"></a>7. 导入数据库</h3><p>第一步: 把前面在 ‘部署博客项目-数据库打包’ 那里拿到的 ‘hthbolgSite.sql’ 文件上传到服务器的 &#x2F;app&#x2F;mysql&#x2F;db 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /app/mysql/db # 查看目录里面有没有&#x27;mybolgSite.sql&#x27;文件</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20240402192846008.png" alt="image-20240402192846008"></p>
<p>第二步: 如何查看容器ID，每个人的容器ID都是不同的，以你的为准</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20240402192956549.png" alt="image-20240402192956549"></p>
<p>第三步: 进入MySQL容器内部，执行导入sql文件的操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start mydata-mysql-1 # 启动mysql容器</span><br><span class="line">docker exec -it 容器ID bash # 进入mysql容器内部</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面的是执行导入sql文件的操作，必须要进入了mysql容器内部才能执行如下命令，mysql的登录密码是123456</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">123456</span><br><span class="line">use hth_blog;</span><br><span class="line">source /var/lib/mysql/hthbolgSite.sql;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>第四步: 退出MySQL容器内部</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit # 退出MySQL</span><br><span class="line">exit # 退出MySQL容器</span><br></pre></td></tr></table></figure>

<h3 id="8-配置Redis"><a href="#8-配置Redis" class="headerlink" title="8. 配置Redis"></a>8. 配置Redis</h3><p>第一步: 进入 &#x2F;app&#x2F;redis&#x2F;redis.conf 目录下，新建redis.conf文件，写入如下，注意不需要把配置写完全，redis有自己的默认配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /app/redis/redis.conf</span><br><span class="line">touch redis.conf</span><br><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure>

<p>写入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bind 0.0.0.0</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure>

<h3 id="9-配置Nginx"><a href="#9-配置Nginx" class="headerlink" title="9. 配置Nginx"></a>9. 配置Nginx</h3><p>第一步: 下载conf.zip文件，下载链接如下，解压后是conf文件夹，把conf文件夹里面的所有文件，上传到服务器的 &#x2F;app&#x2F;nginx 目录下，注意&#x2F;app&#x2F;nginx目录里面已有一个conf目录，也就是替换掉这个conf即可</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">conf.zip文件下载: https://cowtransfer.com/s/1354f10a05454b</span><br></pre></td></tr></table></figure>

<p>其中conf文件夹里面有个nginx文件，文件的内容如下</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8093</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">              <span class="section">location</span> / &#123;</span><br><span class="line">                     <span class="attribute">root</span>   /usr/share/nginx/html/blog_dist;</span><br><span class="line">                     <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">                     <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8094</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">              <span class="section">location</span> / &#123;</span><br><span class="line">                     <span class="attribute">root</span>   /usr/share/nginx/html/admin_dist;</span><br><span class="line">                     <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">                     <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步: 把前面在 ‘部署博客项目-前端项目打包’，我们在hth-blog-vue项目下有一个dist文件夹、在hth-vue-admin项目下有一个dist文件夹</p>
<p>第三步: 将两个dist文件夹分别重命名为admin_dist、blog_dist，然后上传到服务器的 &#x2F;app&#x2F;nginx&#x2F;html 目录下</p>
<p><img src="/assets/image-20240402194614755.png" alt="image-20240402194614755"></p>
<p>第四步: 启动所有容器。注意，这次nginx容器是可以正常启动的，并且全部容器都是正常启动的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker # 启动docker</span><br><span class="line">docker ps -a # 查看容器ID</span><br><span class="line">docker restart 容器ID # 重新启动所有容器</span><br><span class="line">docker ps # 查看实际启动的容器</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20240402194851034.png" alt="image-20240402194851034"></p>
<h1 id="完美撒花"><a href="#完美撒花" class="headerlink" title="完美撒花~~~"></a>完美撒花~~~</h1>]]></content>
      <categories>
        <category>SpringBoot Vue</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2024/04/12/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="数字反转"><a href="#数字反转" class="headerlink" title="数字反转"></a>数字反转</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 输入一个不小于 <span class="number">100</span> 且小于 <span class="number">1000</span>，同时包括小数点后一位的一个浮点数，例如 <span class="number">123.4</span> ，要求把这个数字翻转过来，变成 <span class="number">4.321</span>并输出。</span><br><span class="line">* 输入格式</span><br><span class="line">* 一行一个浮点数</span><br><span class="line">* 输出格式</span><br><span class="line">* 一行一个浮点数</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">float</span> <span class="variable">t</span> <span class="operator">=</span> scanner.nextFloat();</span><br><span class="line">            <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> (<span class="type">int</span>) (t*<span class="number">10</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> s%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> s/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> s/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> s/<span class="number">1000</span>%<span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> ge*<span class="number">1000</span>+shi*<span class="number">100</span>+bai*<span class="number">10</span>+qian;</span><br><span class="line">            <span class="type">float</span> <span class="variable">ans</span> <span class="operator">=</span> (<span class="type">float</span>) (s2/<span class="number">1000.0</span>); <span class="comment">//直接强转</span></span><br><span class="line">            System.out.println(ans);</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h1 id="String到单-多精度的转换"><a href="#String到单-多精度的转换" class="headerlink" title="String到单&#x2F;多精度的转换"></a>String到单&#x2F;多精度的转换</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">s</span> <span class="operator">=</span> Math.sqrt(p*(p-a)*(p-b)*(p-c));</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> String.format(<span class="string">&quot;%.1f&quot;</span>, s);</span><br><span class="line">System.out.println(format);</span><br><span class="line"><span class="comment">//或者直接 System.out.printf(&quot;%.1f\n&quot;, s);</span></span><br><span class="line"><span class="comment">//注意：</span></span><br><span class="line"><span class="comment">//System.out.printf()：用于格式化输出，可以指定输出的格式，如小数位数等。它的格式化字符串中可以使用 %f 来表示浮点数。</span></span><br><span class="line"><span class="comment">//System.out.println()：用于直接输出对象的字符串表示形式，并在末尾添加换行符。它不具有格式化的能力，所以不能直接指定输出的小数位数</span></span><br></pre></td></tr></table></figure>

<h1 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h1><p>用于操控时间的除了最常用的 <strong>Date</strong> 类，还有</p>
<ul>
<li><strong>方便日期运算的 Calendar 类</strong>，</li>
<li>**拥有许多国家标准时间的 GregorianCalendar 类( Calendar 子类)**。</li>
</ul>
<p>Calendar 类中用一下这些常量表示不同的意义，jdk 内的很多类其实都是采用的这种思想。</p>
<ul>
<li>Calendar.YEAR <em>——年份</em> 。</li>
<li>Calendar.MONTH <em>——月份</em> 。</li>
<li>Calendar.DATE <em>——日期</em> 。</li>
<li>Calendar.DAY_OF_MONTH <em>——日期，和上面的字段意义相同</em> 。</li>
<li>Calendar.HOUR <em>——12小时制的小时</em> 。</li>
<li>Calendar.HOUR_OF_DAY <em>——24小时制的小时</em> 。</li>
<li>Calendar.MINUTE <em>——分钟</em> 。</li>
<li>Calendar.SECOND <em>——秒</em> 。</li>
<li>Calendar.DAY_OF_WEEK <em>——星期几</em>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">c1</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//获取日期实例</span></span><br><span class="line">c1.add(Calendar.DATE, <span class="number">10</span>); </span><br><span class="line">c1.add(Calendar.DATE, -<span class="number">10</span>); <span class="comment">//把c1对象的日期加上-10，也就是c1所表的日期的10天前的日期，其它所有的数值会被重新计算。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">date</span> <span class="operator">=</span> Calendar.getInstance(); <span class="comment">//创造 Calendar 类实例。</span></span><br><span class="line">date.set(<span class="number">2021</span>, Calendar.MAY, <span class="number">5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//设置时间(不设置默认为计算机当前时间。)</span></span><br><span class="line">date.add(Calendar.MINUTE, s % y == <span class="number">0</span> ? -(s / y) : -(s / y) - <span class="number">1</span>); <span class="comment">// 使用三目运算符。因为如果路程不能整除速度的话需要再使用一分钟填满。</span></span><br></pre></td></tr></table></figure>

<p>之后再使用 <strong>SimpleDateFormat 进行时间格式化</strong>再输出。</p>
<ul>
<li>yyyy：年。</li>
<li>MM：月。</li>
<li>dd：日 。</li>
<li>hh：1~12 小时制 (1-12)。</li>
<li>HH：24 小时制 (0-23)。</li>
<li>mm：分。</li>
<li>ss：秒。</li>
<li>S：毫秒。</li>
<li>E：星期几。</li>
<li>D：一年中的第几天。</li>
<li>F：一月中的第几个星期(会把这个月总共过的天数除以 7)。</li>
<li>w：一年中的第几个星期。</li>
<li>W：一月中的第几星期(会根据实际情况来算)。</li>
<li>a：上下午标识。</li>
<li>k：和HH差不多，表示一天 24 小时制 (1-24)。</li>
<li>K：和hh差不多，表示一天 12 小时制 (0-11)。</li>
<li>z：表示时区。</li>
</ul>
<p>这里只需要输出 小时:分钟，所以格式化的格式为：HH:mm</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm&quot;</span>); <span class="comment">//创造格式化 HH:mm 的 SimpleDateFormat 对象。</span></span><br><span class="line"><span class="comment">//最后在输出的时候要将 Calendar 类转换为长整型输出，否则会报错。而日期类都可以转换成长整型( long )格式，所以：</span></span><br><span class="line">System.out.println(format.format(date.getTime())); </span><br><span class="line"><span class="comment">//date.getTime()：这部分是获取Date对象的时间戳（长整型时间），getTime()方法返回的是从1970年1月1日00:00:00 GMT开始计算的毫秒数。</span></span><br><span class="line"><span class="comment">//.format(date.getTime())：这部分是调用SimpleDateFormat对象的format()方法，将时间戳格式化为字符串。.format()方法接受一个Date对象或者时间戳作为参数，并返回一个格式化后的字符串。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 世纪末的星期 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">1999</span>; year &lt; <span class="number">100000</span>; year += <span class="number">100</span>) &#123;</span><br><span class="line">            calendar.set(Calendar.YEAR,year);</span><br><span class="line">            <span class="comment">//月份从0开始</span></span><br><span class="line">            calendar.set(Calendar.MONTH,<span class="number">11</span>);</span><br><span class="line">            calendar.set(Calendar.DAY_OF_MONTH,<span class="number">31</span>);</span><br><span class="line">            <span class="comment">//星期天为第一天</span></span><br><span class="line">            <span class="keyword">if</span>(calendar.get(Calendar.DAY_OF_WEEK)==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(calendar.get(Calendar.YEAR));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="闰年判断"><a href="#闰年判断" class="headerlink" title="闰年判断"></a>闰年判断</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">不是闰年：不能被<span class="number">4</span>整除，能被<span class="number">100</span>整除不能被<span class="number">400</span>整除</span><br><span class="line">闰年<span class="number">2</span>月<span class="number">29</span>天，平年<span class="number">28</span>天</span><br></pre></td></tr></table></figure>

<h1 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h1><p>每次比较相邻的两个元素，如果它们的顺序不对就交换它们</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; numbers.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> numbers[j];</span><br><span class="line">                    numbers[j] = numbers[j + <span class="number">1</span>];</span><br><span class="line">                    numbers[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>



<h1 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h1><ol>
<li>在素数判断时，不需要一直循环到 Math.sqrt(n)，只需循环到 n 的平方根取整即可。</li>
<li>对于大于 3 的素数，可以只考虑奇数，因为偶数除了 2 之外都不是素数。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= Math.sqrt(n); i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><p>对于回文数判断，您可以：</p>
<ol>
<li>不需要完全反转整个数字，只需要反转一半的数字即可，然后与剩余部分进行比较。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isHuiWen</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> <span class="variable">reversed</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (x &gt; reversed) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> x % <span class="number">10</span>;</span><br><span class="line">          reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">          x /= <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> x == reversed || x == reversed / <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="阶乘之和"><a href="#阶乘之和" class="headerlink" title="阶乘之和"></a>阶乘之和</h1><p><code>BigInteger 类提供了支持任意精度整数运算的功能，可以用来解决整数溢出的问题。</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 阶乘之和P1009 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">s</span> <span class="operator">=</span> BigInteger.ZERO;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">            s = s.add(jieCheng(BigInteger.valueOf(i)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">jieCheng</span><span class="params">(BigInteger n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n.compareTo(BigInteger.ZERO) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> BigInteger.ZERO;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">result</span> <span class="operator">=</span> BigInteger.ONE;</span><br><span class="line">        <span class="comment">//这段代码使用了 BigInteger 类型的变量 `i` 来进行循环，从 2 开始逐步增加，直到达到或超过 `n` 的值。</span></span><br><span class="line">        <span class="comment">//这里用到了 `compareTo` 方法，该方法用于比较两个 BigInteger 对象的大小关系。</span></span><br><span class="line">        <span class="comment">//如果当前的 `i` 小于等于 `n`，循环就会继续进行；一旦 `i` 大于 `n`，循环就会停止。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">BigInteger</span> <span class="variable">i</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">2</span>); i.compareTo(n) &lt;= <span class="number">0</span>; i = i.add(BigInteger.ONE)) &#123;</span><br><span class="line">            result = result.multiply(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h1><p><strong>数组中的最小值：</strong></p>
<ul>
<li>如果你有一个数组，可以使用 <code>Arrays</code> 类的 <code>min</code> 方法来找到数组中的最小值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//orElse(Integer.MAX_VALUE) 的意思是如果流为空（即数组为空），则返回 Integer.MAX_VALUE，否则返回流中的最小值。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">minValue</span> <span class="operator">=</span> Arrays.stream(array).min().orElse(Integer.MAX_VALUE);</span><br><span class="line"><span class="comment">//或者写成int min = Arrays.stream(n).min().getAsInt();</span></span><br><span class="line">System.out.println(<span class="string">&quot;最小值为：&quot;</span> + minValue);</span><br></pre></td></tr></table></figure>

<p><strong>集合中的最小值：</strong></p>
<ul>
<li>如果你有一个集合，可以使用集合类的 <code>Collections</code> 类的 <code>min</code> 方法来找到集合中的最小值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">minValue</span> <span class="operator">=</span> Collections.min(list);</span><br><span class="line">System.out.println(<span class="string">&quot;最小值为：&quot;</span> + minValue);</span><br></pre></td></tr></table></figure>

<h1 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 指数计算 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;1921&quot;</span>);</span><br><span class="line">        <span class="comment">//指数</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">pow</span> <span class="operator">=</span> x.pow(<span class="number">2020</span>);</span><br><span class="line">        <span class="comment">//取模</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">remainder</span> <span class="operator">=</span> pow.remainder(y);</span><br><span class="line">        System.out.println(remainder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>remainder</code> 方法：返回的余数的符号和被除数相同。例如，<code>-7.remainder(3)</code> 返回 <code>-1</code>，<code>7.remainder(-3)</code> 返回 <code>1</code>。</li>
<li><code>mod</code> 方法：返回的余数的符号与除数相同。例如，<code>-7.mod(3)</code> 返回 <code>2</code>，<code>7.mod(-3)</code> 返回 <code>-2</code>。</li>
</ul>
<h3 id="BigInteger-1"><a href="#BigInteger-1" class="headerlink" title="BigInteger:"></a>BigInteger:</h3><ol>
<li><p><strong>创建对象</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BigInteger bigInteger = new BigInteger(&quot;12345678901234567890&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>基本操作</strong>：</p>
<ul>
<li>加法：<code>add(BigInteger val)</code></li>
<li>减法：<code>subtract(BigInteger val)</code></li>
<li>乘法：<code>multiply(BigInteger val)</code></li>
<li>除法：<code>divide(BigInteger val)</code></li>
<li>取模：<code>mod(BigInteger val)</code></li>
</ul>
</li>
<li><p><strong>比较</strong>：</p>
<ul>
<li>等于：<code>equals(Object x)</code></li>
<li>大于：<code>compareTo(BigInteger val) &gt; 0</code></li>
<li>小于：<code>compareTo(BigInteger val) &lt; 0</code></li>
</ul>
</li>
<li><p><strong>转换为基本类型</strong>：</p>
<ul>
<li>转换为 int：<code>intValue()</code></li>
<li>转换为 long：<code>longValue()</code></li>
</ul>
</li>
</ol>
<h1 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 BigDecimal.divide() 方法中，你可以指定一个舍入模式来确定如何处理小数的舍入。通过传递 BigDecimal.ROUND_HALF_UP 参数，你告诉 divide() 方法在执行除法运算时采用四舍五入的方式。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title function_">search</span><span class="params">(<span class="type">int</span> flag)</span> &#123;</span><br><span class="line">        flag++;</span><br><span class="line">        <span class="keyword">if</span> (flag &gt; <span class="number">100</span>) <span class="keyword">return</span> BigDecimal.ZERO; <span class="comment">// 预定义一个值来表示递归结束</span></span><br><span class="line">        <span class="keyword">return</span> BigDecimal.ONE.divide(search(flag).add(BigDecimal.valueOf(<span class="number">1</span>)), <span class="number">101</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这里的101是保留小数点后101位xi，指定用四舍五入的方式</span></span><br></pre></td></tr></table></figure>

<h3 id="BigDecimal-1"><a href="#BigDecimal-1" class="headerlink" title="BigDecimal:"></a>BigDecimal:</h3><ol>
<li><p><strong>创建对象</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BigDecimal bigDecimal = new BigDecimal(&quot;1234567890.12345678901234567890&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>基本操作</strong>：</p>
<ul>
<li>加法：<code>add(BigDecimal val)</code></li>
<li>减法：<code>subtract(BigDecimal val)</code></li>
<li>乘法：<code>multiply(BigDecimal val)</code></li>
<li>除法：<code>divide(BigDecimal val, int scale, RoundingMode roundingMode)</code></li>
</ul>
</li>
<li><p><strong>舍入和精度控制</strong>：</p>
<ul>
<li>设置精度：<code>setScale(int newScale, RoundingMode roundingMode)</code></li>
<li>设置舍入模式：<code>ROUND_UP</code>, <code>ROUND_DOWN</code>, <code>ROUND_HALF_UP</code>, 等等。</li>
</ul>
</li>
<li><p><strong>比较</strong>：</p>
<ul>
<li>等于：<code>equals(Object x)</code></li>
<li>大于：<code>compareTo(BigDecimal val) &gt; 0</code></li>
<li>小于：<code>compareTo(BigDecimal val) &lt; 0</code></li>
</ul>
</li>
<li><p><strong>转换为基本类型</strong>：</p>
<ul>
<li>转换为 double：<code>doubleValue()</code></li>
<li>转换为 long：<code>longValue()</code></li>
</ul>
</li>
</ol>
<h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span>加B高精P1601 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取输入字符串并转换为字符数组</span></span><br><span class="line">        <span class="type">char</span>[] s1 = scanner.nextLine().toCharArray();</span><br><span class="line">        <span class="type">char</span>[] s2 = scanner.nextLine().toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据输入字符串的长度动态分配数组大小</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[s1.length];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[s2.length];</span><br><span class="line">        <span class="type">int</span>[] c = <span class="keyword">new</span> <span class="title class_">int</span>[Math.max(s1.length, s2.length) + <span class="number">1</span>]; <span class="comment">// 结果数组长度可能比较大，需要加1防止进位溢出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符数组转换为整数数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s1.length; i++) &#123;</span><br><span class="line">            a[s1.length - <span class="number">1</span> - i] = s1[i] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 修改这里的索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s2.length; i++) &#123;</span><br><span class="line">            b[s2.length - <span class="number">1</span> - i] = s2[i] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 修改这里的索引</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行加法运算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Math.max(a.length, b.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; max; i++) &#123; <span class="comment">// 修改循环从0开始</span></span><br><span class="line">            c[i] += (i &lt; a.length ? a[i] : <span class="number">0</span>) + (i &lt; b.length ? b[i] : <span class="number">0</span>);</span><br><span class="line">            c[i + <span class="number">1</span>] = c[i] / <span class="number">10</span>;</span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到最高有效位的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> c.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; c[index] == <span class="number">0</span>) &#123;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">// 修改循环条件，从index开始递减</span></span><br><span class="line">            System.out.print(c[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者直接应Java自带的高精度</span></span><br><span class="line">System.out.print(sc.nextBigInteger().add(sc.nextBigInteger()));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="查询整数中数码的个数"><a href="#查询整数中数码的个数" class="headerlink" title="查询整数中数码的个数"></a>查询整数中数码的个数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先将整数转为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jieChengStr</span> <span class="operator">=</span> jieCheng.toString();</span><br><span class="line"><span class="comment">//a.toString().charAt(0)--&gt;把整数转换为字符串，然后提取该字符串的第一个字符。</span></span><br><span class="line">s[i] = countOccurrences(jieChengStr,a.toString().charAt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countOccurrences</span><span class="params">(String str, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == target) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//十进制转二、八、十六进制</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">bigInteger</span> <span class="operator">=</span> BigInteger.valueOf(x);</span><br><span class="line"><span class="type">String</span> <span class="variable">two</span> <span class="operator">=</span> bigInteger.toString(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">eight</span> <span class="operator">=</span> bigInteger.toString(<span class="number">8</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">sixteen</span> <span class="operator">=</span> bigInteger.toString(<span class="number">16</span>);</span><br><span class="line">System.out.println(two+<span class="string">&quot; &quot;</span>+eight+<span class="string">&quot; &quot;</span>+sixteen);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//各进制间转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextLine(); </span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">bigInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(x, <span class="number">16</span>);<span class="comment">//第一个参数是要转换的值，第二个参数是进制数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> bigInteger.toString(<span class="number">2</span>); <span class="comment">//要转换成的进制数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 八进制判断</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">eightFlag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; eight.length(); i++) &#123;</span><br><span class="line">           <span class="comment">//取到八进制的每个字符</span></span><br><span class="line">           <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> eight.charAt(i);</span><br><span class="line">           <span class="comment">//使用Character.isDigit()方法检查字符是否为数字。如果是数字，则直接将其转换为相应的整数值；</span></span><br><span class="line">           <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">               eightFlag+=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">               <span class="comment">//如果不是数字，则将其转换为小写字母并减去字符&#x27;a&#x27;的值，然后再加上10（因为十六进制中的a到f分别代表10到15）</span></span><br><span class="line">               <span class="comment">//小写字母&#x27;a&#x27;对应的十进制ASCII码值为97，而大写字母&#x27;A&#x27;对应的十进制ASCII码值为65。</span></span><br><span class="line">           &#125;<span class="keyword">else</span> eightFlag+=Character.toLowerCase(c)-<span class="string">&#x27;a&#x27;</span>+<span class="number">10</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (x % eightFlag != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据里有-1-2-3-4-5-6-7-8-9-，请随机打乱顺序，生成一个新的数组"><a href="#数据里有-1-2-3-4-5-6-7-8-9-，请随机打乱顺序，生成一个新的数组" class="headerlink" title="数据里有{1,2,3,4,5,6,7,8,9}，请随机打乱顺序，生成一个新的数组"></a>数据里有{1,2,3,4,5,6,7,8,9}，请随机打乱顺序，生成一个新的数组</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法题;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">//使用洗牌算法，如Fisher-Yates算法</span></span><br><span class="line"><span class="comment">//通过迭代数组，每次随机选择一个位置与当前位置进行交换，从而实现了打乱顺序的效果。</span></span><br><span class="line"><span class="keyword">public</span> class 打乱数组 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        shuffleArray(array);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shuffleArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> array.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 交换位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[index];</span><br><span class="line">            array[index] = array[i];</span><br><span class="line">            array[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="假设今日是2015年3月1日，星期日，请算出13个月零6天后是星期几，距离现在多少天"><a href="#假设今日是2015年3月1日，星期日，请算出13个月零6天后是星期几，距离现在多少天" class="headerlink" title="假设今日是2015年3月1日，星期日，请算出13个月零6天后是星期几，距离现在多少天"></a>假设今日是2015年3月1日，星期日，请算出13个月零6天后是星期几，距离现在多少天</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 算法题;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 日期判断 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] week = &#123;<span class="string">&quot;星期日&quot;</span>,<span class="string">&quot;星期一&quot;</span>,<span class="string">&quot;星期二&quot;</span>,<span class="string">&quot;星期三&quot;</span>,<span class="string">&quot;星期四&quot;</span>,<span class="string">&quot;星期五&quot;</span>,<span class="string">&quot;星期六&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] monthday1 = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] monthday2 = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">    <span class="comment">//查看距离当前天数的差值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">distance</span><span class="params">(<span class="type">int</span> year,<span class="type">int</span> month,<span class="type">int</span> day,<span class="type">int</span> newMonth,<span class="type">int</span> newDay)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//设定初始距离天数</span></span><br><span class="line">        <span class="keyword">if</span> (month + newMonth &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((year + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; (year + <span class="number">1</span>) % <span class="number">100</span> != <span class="number">0</span>)||(year + <span class="number">1</span>) % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                sum += <span class="number">366</span> + newDay;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; newMonth - <span class="number">12</span>;i++) &#123;</span><br><span class="line">                    sum += monthday1[month + i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">365</span> + newDay;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; newMonth - <span class="number">12</span>;i++) &#123;</span><br><span class="line">                    sum += monthday1[month + i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; newMonth;i++) &#123;</span><br><span class="line">                sum += monthday1[month + i];</span><br><span class="line">            &#125;</span><br><span class="line">            sum += newDay;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> week[sum%<span class="number">7</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入当前年份&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入当前月份&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入当前天数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入当前是星期几：以数字表示，如：星期天 为 0&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;今天是：&quot;</span> + year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day + <span class="string">&quot; &quot;</span> +</span><br><span class="line">                week[index]);</span><br><span class="line">        System.err.println(<span class="string">&quot;请输入相隔月份&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">newMonth</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入剩余天数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">newDay</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;经过&quot;</span> + newMonth + <span class="string">&quot;月&quot;</span> + newDay + <span class="string">&quot;天后，是&quot;</span> +</span><br><span class="line">                distance(year,month,day,newMonth,newDay));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="排序与查找"><a href="#排序与查找" class="headerlink" title="排序与查找"></a>排序与查找</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于在一个已经排序好的数组中查找特定的元素。具体来说，它通过不断将搜索范围缩小为原来的一半，直到找到目标元素或者确定目标元素不存在为止。</span></span><br><span class="line"><span class="comment">//要求传入的数组 array 必须是已经按照升序排序好的，否则无法保证二分查找的正确性。    </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">biSearch</span><span class="params">(<span class="type">int</span> []array,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="type">int</span> lo=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> hi=array.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span>(lo&lt;=hi)&#123;</span><br><span class="line">            mid=(lo+hi)/<span class="number">2</span>;<span class="comment">//中间位置</span></span><br><span class="line">            <span class="keyword">if</span>(array[mid]==a)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[mid]&lt;a)&#123; <span class="comment">//向右查找</span></span><br><span class="line">                lo=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//向左查找</span></span><br><span class="line">                hi=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序算法-1"><a href="#冒泡排序算法-1" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1）比较前后相邻的二个数据，如果前面数据大于后面的数据，就将这二个数据交换。</span></span><br><span class="line"><span class="comment">//（2）这样对数组的第 0 个数据到 N-1 个数据进行一次遍历后，最大的一个数据就“沉” 到数组第N-1 个位置。</span></span><br><span class="line"><span class="comment">//（3） N=N-1，如果 N 不为 0 就重复前面二步，否则排序完成。    </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort1</span><span class="params">(<span class="type">int</span> [] a, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;<span class="comment">//表示 n 次排序过程。</span></span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;n-i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j-<span class="number">1</span>] &gt; a[j])&#123;<span class="comment">//前面的数字大于后面的数字就交换</span></span><br><span class="line">				  <span class="comment">//交换 a[j-1]和 a[j]</span></span><br><span class="line">                    <span class="type">int</span> temp;</span><br><span class="line">                    temp = a[j-<span class="number">1</span>];</span><br><span class="line">                    a[j-<span class="number">1</span>] = a[j];</span><br><span class="line">                    a[j]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="插入排序算法"><a href="#插入排序算法" class="headerlink" title="插入排序算法"></a>插入排序算法</h2><p><img src="/assets/image-20240408103654325.png" alt="image-20240408103654325"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> arr[])</span> &#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//插入的数</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[i];</span><br><span class="line"><span class="comment">//被插入的位置(准备和前一个数比较)</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//如果插入的数比被插入的数小</span></span><br><span class="line">         <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[index]) &#123;</span><br><span class="line"><span class="comment">//将把 arr[index] 向后移动</span></span><br><span class="line">             arr[index + <span class="number">1</span>] = arr[index];</span><br><span class="line"><span class="comment">//让 index 向前移动</span></span><br><span class="line">             index--;</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//把插入的数放入合适位置</span></span><br><span class="line">         arr[index + <span class="number">1</span>] = insertVal;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">快速排序的原理：选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），比基准值大的都在右边（一般是无序的）。 一般选择序列的第一个元素。</span><br><span class="line">一次循环： 从后往前比较，用基准值和最后一个值比较，如果比基准值小的交换位置，如果没有继续比较下一个，直到找到第一个比基准值小的值才交换。 找到这个值之后，又</span><br><span class="line">从前往后开始比较，如果有比基准值大的，交换位置，如果没有继续比较下一个，直到找到第一个比基准值大的值才交换。直到从前往后的比较索引&gt;从后往前比较的索引，结束</span><br><span class="line">第一次循环，此时，对于基准值来说，左右两边就是有序的了。 </span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20240408103845539.png" alt="image-20240408103845539"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] a,<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> low;</span><br><span class="line">      <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> high;</span><br><span class="line">      <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> a[low];</span><br><span class="line">      <span class="keyword">while</span>(end&gt;start)&#123;</span><br><span class="line">	<span class="comment">//从后往前比较</span></span><br><span class="line">          <span class="keyword">while</span>(end&gt;start&amp;&amp;a[end]&gt;=key)</span><br><span class="line">	<span class="comment">//如果没有比关键值小的，比较下一个，直到有比关键值小的交换位置，然后又从前往后比较</span></span><br><span class="line">              end--;</span><br><span class="line">          <span class="keyword">if</span>(a[end]&lt;=key)&#123;</span><br><span class="line">              <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[end];</span><br><span class="line">              a[end] = a[start];</span><br><span class="line">              a[start] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">	<span class="comment">//从前往后比较</span></span><br><span class="line">          <span class="keyword">while</span>(end&gt;start&amp;&amp;a[start]&lt;=key)&#123;</span><br><span class="line">	<span class="comment">//如果没有比关键值大的，比较下一个，直到有比关键值大的交换位置</span></span><br><span class="line">              start++;</span><br><span class="line">              <span class="keyword">if</span>(a[start]&gt;=key)&#123;</span><br><span class="line">                  <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[start];</span><br><span class="line">                  a[start] = a[end];</span><br><span class="line">                  a[end] = temp;</span><br><span class="line">              &#125;</span><br><span class="line">	<span class="comment">//此时第一次循环比较结束，关键值的位置已经确定了。左边的值都比关键值小，右边的值都比关键值大，但是两边的顺序还有可能是不一样的，进行下面的递归调用</span></span><br><span class="line">          &#125;</span><br><span class="line">	<span class="comment">//递归</span></span><br><span class="line">          <span class="keyword">if</span>(start&gt;low) sort(a,low,start-<span class="number">1</span>);<span class="comment">//左边序列。第一个索引位置到关键值索引-1</span></span><br><span class="line">          <span class="keyword">if</span>(end&lt;high) sort(a,end+<span class="number">1</span>,high);<span class="comment">//右边序列。从关键值索引+1 到最后一个</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="桶排序算法"><a href="#桶排序算法" class="headerlink" title="桶排序算法"></a>桶排序算法</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">桶排序的基本思想是： 把数组 arr 划分为 n 个大小相同子区间（桶），每个子区间各自排序，最后合并 。计数排序是桶排序的一种特殊情况，可以把计数排序当成每个桶里只有</span><br><span class="line">一个元素的情况。</span><br><span class="line">1.找出待排序数组中的最大值 max、最小值 min</span><br><span class="line">2.我们使用 动态数组 ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(maxmin)/arr.length+1</span><br><span class="line">3.遍历数组 arr，计算每个元素 arr[i] 放的桶</span><br><span class="line">4.每个桶各自排序 </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bucketSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">      <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">          max = Math.max(max, arr[i]);</span><br><span class="line">          min = Math.min(min, arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//创建桶</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">bucketNum</span> <span class="operator">=</span> (max - min) / arr.length + <span class="number">1</span>;</span><br><span class="line">      ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(bucketNum);</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketNum; i++)&#123;</span><br><span class="line">          bucketArr.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//将每个元素放入桶</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (arr[i] - min) / (arr.length);</span><br><span class="line">          bucketArr.get(num).add(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//对每个桶进行排序</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketArr.size(); i++)&#123;</span><br><span class="line">          Collections.sort(bucketArr.get(i));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="绝对值和矩形重合面积判断"><a href="#绝对值和矩形重合面积判断" class="headerlink" title="绝对值和矩形重合面积判断"></a>绝对值和矩形重合面积判断</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">s1</span> <span class="operator">=</span> Math.abs((x2 - x1) * (y2 - y1));</span><br><span class="line">   <span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> Math.abs((x4 - x3) * (y4 - y3));</span><br><span class="line">   <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 计算交叉部分的面积</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">xOverlap</span> <span class="operator">=</span> Math.min(x2, x4) - Math.max(x1, x3);</span><br><span class="line">   <span class="type">int</span> <span class="variable">yOverlap</span> <span class="operator">=</span> Math.min(y2, y4) - Math.max(y1, y3);</span><br><span class="line">   <span class="keyword">if</span> (xOverlap &gt; <span class="number">0</span> &amp;&amp; yOverlap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       flag = xOverlap * yOverlap;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> s1 + s2 - flag; <span class="comment">// 总面积减去交叉部分的面积</span></span><br></pre></td></tr></table></figure>

<h1 id="左移右移（HashMap-双链表）"><a href="#左移右移（HashMap-双链表）" class="headerlink" title="左移右移（HashMap&#x2F;双链表）"></a>左移右移（HashMap&#x2F;双链表）</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">使用HashMap存储这n个值，初始化的时候key和value相等，都存的是数值。</span><br><span class="line"></span><br><span class="line">  定义两个边界，左边界：l=0，有边界：r=n+1</span><br><span class="line"></span><br><span class="line">  然后从第一个元素开始遍历，当接收到L x，开始左移的时候，我们的key不动，将value赋值为左边界l，并将左边界自减l--。</span><br><span class="line"></span><br><span class="line">  当接收到R x，开始右移动的时候，我们同样将key不动，将value赋值为右边界R，同时将右边界的值自增r++。</span><br><span class="line"></span><br><span class="line">  遍历结束之后，我们只需要将map中的值按照value排序，然后输出排序之后的key即可。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20240411171820740.png" alt="image-20240411171820740"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> B组真题;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 左移右移 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * hashMap</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//设置左右边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> n+<span class="number">1</span>;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            hashMap.put(i,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;L&quot;</span>))&#123;</span><br><span class="line">                hashMap.put(num,l--);<span class="comment">//将要左移的数的value值设置成左边界，然后将将左边界递减</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;R&quot;</span>))&#123;</span><br><span class="line">                hashMap.put(num,r++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hashMap.entrySet()</span><br><span class="line">                .stream()</span><br><span class="line">                .sorted(Map.Entry.comparingByValue())</span><br><span class="line">                .map(Map.Entry::getKey)</span><br><span class="line">                .collect(Collectors.toList()).forEach(x-&gt; System.out.print(x+<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 双链表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*LinkedList linkedList  = new LinkedList();</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">            linkedList.addLast(i+1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; m; i++) &#123;</span></span><br><span class="line"><span class="comment">            String s = scanner.next();</span></span><br><span class="line"><span class="comment">            int num = scanner.nextInt();</span></span><br><span class="line"><span class="comment">            if(s.equals(&quot;L&quot;))&#123;</span></span><br><span class="line"><span class="comment">                linkedList.removeFirstOccurrence(num);</span></span><br><span class="line"><span class="comment">                linkedList.addFirst(num);</span></span><br><span class="line"><span class="comment">            &#125;else if(s.equals(&quot;R&quot;))&#123;</span></span><br><span class="line"><span class="comment">                linkedList.removeFirstOccurrence(num);</span></span><br><span class="line"><span class="comment">                linkedList.addLast(num);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">            System.out.print(linkedList.get(i)+&quot; &quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>博客面试题</title>
    <url>/2024/04/08/%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>xxx</p>
<h1 id="为什么做这个项目？"><a href="#为什么做这个项目？" class="headerlink" title="为什么做这个项目？"></a>为什么做这个项目？</h1><p>当时学习完mybatis、spring、springmvc等知识后，希望去用这些框架整合在一起写一个前后端分离的项目，巩固所学的知识，将所学的这些知识应用到真正的开发中去。</p>
<h1 id="博客内容一般很大，在数据库中用String类型存放不了，怎么处理？"><a href="#博客内容一般很大，在数据库中用String类型存放不了，怎么处理？" class="headerlink" title="博客内容一般很大，在数据库中用String类型存放不了，怎么处理？"></a>博客内容一般很大，在数据库中用String类型存放不了，怎么处理？</h1><p>存储大文本内容的常用方法是使用数据库中的长文本类型，例如在关系型数据库中使用<code>TEXT</code>或<code>LONGTEXT</code>类型字段。我的项目中使用的LONGTEXT。这些字段类型可以存储大量文本数据，通常可以容纳数百至数千个字符。</p>
<p>如果博客内容非常大，超出了数据库长文本类型的限制，一种常见的做法是将大文本内容存储在文件系统中，而不是直接存储在数据库中。在数据库中，您可以存储指向这些文件的路径或者文件名，这样可以减少数据库的负担，并且提高了系统的扩展性和性能。</p>
<h1 id="登录页面输入密码时，密码隐藏了吗？"><a href="#登录页面输入密码时，密码隐藏了吗？" class="headerlink" title="登录页面输入密码时，密码隐藏了吗？"></a>登录页面输入密码时，密码隐藏了吗？</h1><p>密码加密了，在输入密码时看不到密码，看到的是小点点，这个取决于type这个属性的参数，再导入jquery的js文件后，在span标签中有一个type属性，参数填text时，显示的是文本，也就是能看到密码；参数为password时输入就是图片，隐藏密码与否就是通过这个参数实现的。</p>
<h1 id="系统可以存储图片吗？"><a href="#系统可以存储图片吗？" class="headerlink" title="系统可以存储图片吗？"></a>系统可以存储图片吗？</h1><p>如果把图片视频等文件上传到自己的应用的Web服务器的某个目录下，在读取图片的时候会占用比较多的资源。影响应用服务器的性能。所以我们一般使用OSS(Object Storage Service对象存储服务)存储图片或视频</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="为什么会出现跨域问题"><a href="#为什么会出现跨域问题" class="headerlink" title="为什么会出现跨域问题"></a>为什么会出现跨域问题</h3><p>跨域问题是由浏览器的同源策略引起的。同源策略是浏览器的一种安全机制，限制了从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。同源指的是协议、域名和端口号都相同。</p>
<p>如果你的网页尝试从不同的域、不同的端口或不同的协议加载资源（如CSS、JavaScript、图片、iframe等），浏览器就会出现跨域问题，拒绝这些资源的加载或者交互。</p>
<p>这种安全机制是为了防止恶意网站窃取用户信息或者进行 CSRF（跨站请求伪造）等攻击。然而，在开发Web应用时，有时候确实需要进行跨域请求，比如前后端分离的架构中，前端可能在不同的域上运行。</p>
<h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><p>通过实现 <code>WebMvcConfigurer</code> 接口并覆盖其中的 <code>addCorsMappings</code> 方法来实现。以下是代码的功能解释：</p>
<ul>
<li><code>addCorsMappings</code> 方法用于配置跨域请求的规则。</li>
<li><code>registry.addMapping(&quot;/**&quot;)</code>：允许所有的路径进行跨域请求。</li>
<li><code>.allowedOriginPatterns(&quot;*&quot;)</code>：允许所有来源（域名）进行跨域请求。你也可以指定具体的域名，如 <code>&quot;http://example.com&quot;</code>。</li>
<li><code>.allowCredentials(true)</code>：允许携带跨域请求中的认证信息（例如 Cookie）。</li>
<li><code>.allowedMethods(&quot;GET&quot;,&quot;POST&quot;,&quot;DELETE&quot;,&quot;PUT&quot;)</code>：允许跨域请求的 HTTP 方法。在这个例子中，允许 GET、POST、DELETE、PUT 方法。</li>
<li><code>.allowedHeaders(&quot;*&quot;)</code>：允许跨域请求携带的请求头。<code>*</code> 表示允许携带任意请求头。</li>
<li><code>.maxAge(3600)</code>：设置预检请求的有效期，单位是秒。在这个例子中，设置为 3600 秒（1小时），即在此时间内不再发送预检请求。</li>
</ul>
<p>这段配置使得你的应用可以接受来自任意来源的跨域请求，并允许常见的 HTTP 方法，以及携带认证信息和任意请求头的请求。</p>
<h2 id="日期问题"><a href="#日期问题" class="headerlink" title="日期问题"></a>日期问题</h2><h3 id="使用FastJson"><a href="#使用FastJson" class="headerlink" title="使用FastJson"></a>使用FastJson</h3><p>在Spring Boot应用中注册并配置了一个FastJsonHttpMessageConverter，使得应用能够将Java对象与JSON之间进行相互转换。配置了序列化特性、日期格式化以及Long类型的处理，最终将其添加到消息转换器列表中，以替换默认的转换器。</p>
<h2 id="项目中用到了哪些设计模式？"><a href="#项目中用到了哪些设计模式？" class="headerlink" title="项目中用到了哪些设计模式？"></a>项目中用到了哪些设计模式？</h2><ol>
<li><strong>MVC 模式（Model-View-Controller）</strong>：常用于 Web 应用程序的设计，将应用程序分为模型（Model）、视图（View）和控制器（Controller）三个部分，以实现用户界面和业务逻辑的分离。</li>
<li><strong>观察者模式（Observer）</strong>：在这段代码中，<code>myLogAspect</code>类可以被视为观察者，而被增强的方法可以被视为目标对象。通过 AOP 框架的机制，<code>myLogAspect</code>类可以观察目标方法的执行，并在目标方法执行前后添加额外的逻辑，从而实现了观察者模式的思想。</li>
<li><strong>工厂模式（Factory）</strong>：可以将 AOP 的切面类（<code>myLogAspect</code>）看作是一个工厂，它负责创建增强的通知（Advice），即在方法执行前后添加日志记录的功能。通过 AOP 框架（如Spring AOP）将切面类和目标类进行关联，即可动态地为目标类创建代理对象，从而实现了工厂模式的思想。</li>
<li><strong>装饰器模式（Decorator）</strong>：在 AOP 的实现中，通过在目标方法执行前后添加额外的逻辑，实现了对方法的增强功能。这种方式类似于装饰器模式，它可以动态地给对象添加新的功能，而不需要修改对象的结构。在这段代码中，<code>@Around</code>注解修饰的方法就是在目标方法执行前后增加日志记录的功能，实现了装饰器模式的思想。</li>
</ol>
<h2 id="你是如何实现文章的分页查询的"><a href="#你是如何实现文章的分页查询的" class="headerlink" title="你是如何实现文章的分页查询的"></a>你是如何实现文章的分页查询的</h2><p>在这个博客平台中，我使用了 MyBatis-Plus 提供的分页查询功能来实现文章的分页查询。</p>
<ul>
<li>创建了一个 <code>Page</code> 对象 <code>page</code>，用于指定分页查询的页码和每页记录数。</li>
<li>调用 <code>page(page, articleWrapper)</code> 方法执行分页查询，将符合条件的文章数据放入 <code>page</code> 对象中。</li>
</ul>
<p>在前端页面中，我使用了 Vue.js 和 Element UI 框架来实现分页功能。具体来说，我在页面中使用了 Element UI 提供的 el-pagination 组件，并将该组件的属性 current-page 和 page-size 绑定到后端传递过来的分页参数上。这样，当用户点击分页组件中的页码时，前端会自动将新的页码和每页显示的记录数发送给后端，并重新渲染文章列表。</p>
<p>综上所述，我通过使用 MyBatis-Plus 提供的分页查询功能和 Element UI 提供的分页组件，实现了文章的分页查询功能。</p>
<h2 id="MyBatis的分页查询是如何实现的"><a href="#MyBatis的分页查询是如何实现的" class="headerlink" title="MyBatis的分页查询是如何实现的"></a>MyBatis的分页查询是如何实现的</h2><h2 id="MyBatisPlus的分页查询是如何实现的"><a href="#MyBatisPlus的分页查询是如何实现的" class="headerlink" title="MyBatisPlus的分页查询是如何实现的"></a>MyBatisPlus的分页查询是如何实现的</h2><ol>
<li><strong>导入依赖：</strong> 首先，在项目的 Maven 或 Gradle 配置文件中导入 MyBatis-Plus 的依赖，确保项目能够使用 MyBatis-Plus。</li>
<li><strong>配置分页插件：</strong> 创建一个配置类，用于配置 MyBatis-Plus 的分页插件，并添加到 Spring 容器中。</li>
<li>在 Service接口中定义分页查询方法，并使用 MyBatis-Plus 提供的 <code>Page</code> 类来表示分页参数。</li>
<li>在实现类进行具体方法的实现</li>
<li>在 Controller 层中调用 Service 层的方法，获取分页查询结果，并返回给前端。</li>
</ol>
<h2 id="使用MyBatis-Plus的优点"><a href="#使用MyBatis-Plus的优点" class="headerlink" title="使用MyBatis-Plus的优点"></a>使用MyBatis-Plus的优点</h2><p>自动生成SQL语句：MyBatis-Plus可以根据实体类的属性自动生成相应的SQL语句，避免手动编写SQL语句的繁琐工作。</p>
<p>自动映射实体类和数据库表：MyBatis-Plus可以自动将实体类和数据库表进行映射，避免手动编写映射关系的繁琐工作。</p>
<p>分页查询：MyBatis-Plus提供了方便的分页查询功能，可以大大简化分页查询的代码。</p>
<p>逻辑删除：MyBatis-Plus支持逻辑删除功能，可以方便地实现数据的软删除。</p>
<p>乐观锁：MyBatis-Plus支持乐观锁功能，可以避免数据的并发修改问题。</p>
<h2 id="SpringSecurity是如何基于JWT保证安全性的"><a href="#SpringSecurity是如何基于JWT保证安全性的" class="headerlink" title="SpringSecurity是如何基于JWT保证安全性的"></a>SpringSecurity是如何基于JWT保证安全性的</h2><p>Spring Security 可以与 JWT（JSON Web Token）结合使用来实现安全认证和授权。JWT 是一种基于 JSON 的开放标准，用于在网络上安全地传输数据。</p>
<p>具体来说，JWT 由三部分组成：头部、载荷和签名。其中，头部包含算法和类型信息，载荷包含用户信息和其他数据，签名用于验证 JWT 的真实性。</p>
<p>在使用 Spring Security 和 JWT 时，通常的流程如下：</p>
<p>用户登录时，输入用户名和密码，Spring Security 对其进行验证，验证成功后生成 JWT，并将其返回给客户端。<br>客户端在之后的请求中携带 JWT，Spring Security 对其进行验证，如果验证通过，则允许访问受保护的资源。<br>如果 JWT 被篡改或过期，Spring Security 将拒绝访问请求，从而保证了博客平台的安全性。<br>使用 JWT 的好处在于它不需要在服务端存储会话信息，从而可以降低服务端的负担，并且可以轻松地实现跨域访问。同时，JWT 也可以包含用户信息和其他数据，方便进行用户身份认证和授权。</p>
<h2 id="Spring-Security-是如何验证JWT的"><a href="#Spring-Security-是如何验证JWT的" class="headerlink" title="Spring Security 是如何验证JWT的"></a>Spring Security 是如何验证JWT的</h2><ol>
<li><strong>配置 JWT 认证过滤器：</strong> 在 Spring Security 的配置中，需要添加一个过滤器来拦截所有需要进行 JWT 认证的请求。这个过滤器会在请求到达控制器之前对 JWT 进行验证。</li>
<li><strong>获取请求中的 JWT Token：</strong> 从 HTTP 请求头中获取名为 “token” 的 JWT Token。</li>
<li><strong>解析 JWT Token：</strong> 使用 JwtUtil 类中的方法解析 JWT Token，获取其中的用户信息（例如用户ID）。</li>
<li><strong>验证 JWT Token 的有效性：</strong> 根据解析得到的用户ID，从 Redis 缓存中获取相应的用户信息。如果 Redis 中没有对应的用户信息，说明 JWT Token 已过期或非法，返回响应告知客户端需要重新登录。</li>
<li><strong>将用户信息存入 Spring Security 上下文中：</strong> 如果 JWT Token 有效，将用户信息封装成 Spring Security 的认证对象（UsernamePasswordAuthenticationToken），并存入 SecurityContextHolder 中，以便后续的安全策略使用。</li>
</ol>
<h2 id="如何实现密码加密"><a href="#如何实现密码加密" class="headerlink" title="如何实现密码加密"></a>如何实现密码加密</h2><p>我在该博客平台项目中使用了BCrypt进行密码加密。BCrypt是一种密码哈希函数，可以将密码转换为散列值，从而保护用户密码的安全性。相比其他哈希函数，BCrypt还可以通过调整工作因子来增加哈希函数的计算成本，从而增加破解密码的难度。</p>
<p>在该项目中，我使用Spring Security的BCryptPasswordEncoder对用户密码进行加密，并将加密后的密码存储在数据库中。当用户登录时，我使用相同的BCryptPasswordEncoder对用户输入的密码进行加密，并将加密后的密码与数据库中存储的密码进行比对，以实现用户认证</p>
<h2 id="你在开发过程中使用MySQL设计了哪些表，为什么这么设置"><a href="#你在开发过程中使用MySQL设计了哪些表，为什么这么设置" class="headerlink" title="你在开发过程中使用MySQL设计了哪些表，为什么这么设置"></a>你在开发过程中使用MySQL设计了哪些表，为什么这么设置</h2><h1 id="mysql和redis"><a href="#mysql和redis" class="headerlink" title="mysql和redis"></a>mysql和redis</h1><p>MySQL和Redis都是非常流行的数据库，它们各自具有不同的优势和适用场景。以下是一些使用MySQL的优势：</p>
<p>数据持久化：MySQL是一个关系型数据库，它可以将数据持久化到磁盘中。这意味着即使服务器崩溃或重启，数据仍然可以被恢复。相比之下，Redis是一个基于内存的数据库，它不能保证数据的持久性，因为如果服务器崩溃或重启，数据将会丢失。</p>
<p>数据一致性：MySQL是一个ACID兼容的数据库，它可以保证数据的一致性。相比之下，Redis是一个非常快速的数据库，但是它不能保证数据的一致性，因为它在处理数据时可能会出现一些并发问题。</p>
<p>支持复杂查询：MySQL是一个关系型数据库，它支持复杂的SQL查询语句，可以进行各种数据分析和处理。相比之下，Redis虽然也支持一些查询操作，但是它的查询能力相对较弱。</p>
<p>当然，Redis也有自己的优势，比如：</p>
<p>高性能：Redis是一个基于内存的数据库，它的读写速度非常快，可以处理大量的并发请求。</p>
<p>支持缓存：Redis可以作为一个缓存数据库，可以帮助我们提高应用程序的性能。因为它的读写速度非常快，可以减少对后端数据库的访问次数。</p>
<p>支持分布式：Redis可以很容易地进行分布式部署，可以帮助我们实现高可用性和负载均衡。</p>
<p>综上所述，MySQL和Redis各自具有不同的优势和适用场景。在我的博客平台中，我选择使用MySQL作为数据库，因为它可以保证数据的持久性和一致性，并且支持复杂的SQL查询语句。当然，如果您的应用程序需要高性能和缓存功能，那么Redis也是一个非常不错的选择。<br>我在这个博客平台项目中同时使用了MySQL和Redis，将它们结合起来来实现不同的功能。</p>
<p>具体来说，我使用MySQL作为主要的数据存储和管理工具，用于存储博客文章、评论、用户信息等数据，同时还使用MySQL来实现数据的查询、修改、删除等操作，保证了数据的一致性和可靠性。</p>
<p>同时，我还使用Redis作为缓存，用于缓存经常访问的数据，如博客文章、评论、用户信息等，从而提高系统的响应速度和吞吐量。</p>
<p>使用MySQL和Redis的组合，可以充分发挥它们各自的优点，同时弥补它们各自的不足，从而实现更加高效、可靠、稳定的博客平台系统。</p>
<h2 id="项目中有对mysql进行调优吗，你是怎么做的"><a href="#项目中有对mysql进行调优吗，你是怎么做的" class="headerlink" title="项目中有对mysql进行调优吗，你是怎么做的"></a>项目中有对mysql进行调优吗，你是怎么做的</h2><ol>
<li><strong>优化SQL语句</strong>：在编写SQL语句时，我们需要尽可能地避免全表扫描和子查询等操作，因为它们会影响查询的性能。在我的博客平台中，我优化了一些SQL语句，尽可能地避免了这些操作。</li>
</ol>
<h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h3 id="为什么不使用消息队列"><a href="#为什么不使用消息队列" class="headerlink" title="为什么不使用消息队列"></a>为什么不使用消息队列</h3><p>在这个博客平台中，我没有使用消息队列的原因主要是因为这个平台的业务规模相对较小，消息处理的负载相对较轻，没有必要引入消息队列来增加复杂度。同时，使用消息队列也需要考虑到消息的可靠性和顺序性，以及消息队列的维护和管理等问题，这也需要投入一定的时间和精力来解决。</p>
<p>如果这个博客平台的业务规模变大，消息处理的负载增加，或者需要引入一些异步处理的逻辑，那么使用消息队列是一种非常好的选择。消息队列可以帮助我们实现解耦、异步处理、削峰等功能，提高系统的可扩展性和可靠性，从而更好地满足业务需求。</p>
<p>如果使用消息队列你会如何使用<br>如果在这个博客平台中需要使用消息队列，我会考虑使用RabbitMQ或Kafka来实现。</p>
<p>例如，当用户发表一篇新的博客文章时，需要进行异步处理任务，将博客文章的内容保存到数据库中，并发送通知给订阅了该博客的用户。</p>
<p>又如，当用户对博客文章进行评论时，需要进行服务解耦，将评论信息发送到消息队列中，然后由后台服务来处理评论信息，从而降低前端和后端的耦合度，提高系统的可扩展性和可维护性。</p>
<p>还有，当博客系统中存在多个数据源需要进行同步时，可以使用消息队列来实现数据的同步，保证不同数据源之间的数据一致性和可靠性。</p>
<p>当需要使用消息队列时，我会考虑在以下场景中使用：</p>
<p>异步处理任务：如果某些任务需要在后台异步处理，可以使用消息队列来将任务添加到队列中，然后在后台异步处理这些任务，从而提高系统的并发性能和可靠性。</p>
<p>服务解耦：如果系统中存在多个服务之间需要进行通信的情况，可以使用消息队列来实现服务之间的解耦，从而降低服务之间的依赖性，提高系统的可扩展性和可维护性。</p>
<p>数据同步：如果系统中存在多个数据源需要进行同步的情况，可以使用消息队列来实现数据的同步，从而保证数据的一致性和可靠性。</p>
<p>在使用消息队列时，我通常会选择使用Apache Kafka或者RabbitMQ作为消息队列的实现。在具体实现时，我会根据具体的业务需求和系统架构来选择使用哪种消息队列，并根据消息队列的特性来设计消息的格式和传输协议。同时，我还会考虑消息队列的可靠性和性能等方面的问题，从而保证系统的稳定性和可扩展性。</p>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h3 id="有使用到redis吗"><a href="#有使用到redis吗" class="headerlink" title="有使用到redis吗"></a>有使用到redis吗</h3><p>是的，我们在这个博客平台中使用了 Redis。主要是用 Redis 来缓存一些数据，以提高系统的性能和响应速度。</p>
<p>具体来说，我们使用 Redis 来缓存了以下数据：</p>
<p>用户登录的 Token，以便快速验证用户身份，避免频繁地查询数据库；<br>热门文章、热门标签、热门分类等数据，以便快速展示给用户；<br>用户点赞、评论等操作的次数，以便快速更新相关数据。<br>通过使用 Redis 缓存这些数据，我们可以大大减少对数据库的访问次数，从而提高系统的性能和响应速度。同时，由于 Redis 具有高速读写、高并发等特点，因此非常适合用来作为缓存数据库。</p>
<h3 id="Redis缓存机制了解吗"><a href="#Redis缓存机制了解吗" class="headerlink" title="Redis缓存机制了解吗"></a>Redis缓存机制了解吗</h3><p>是的，我对Redis的缓存机制比较了解。Redis的缓存机制主要有以下几个方面：</p>
<p>缓存淘汰策略：Redis支持多种缓存淘汰策略，包括LRU（最近最少使用）、LFU（最不经常使用）、TTL（过期时间）等。其中，LRU是最常用的淘汰策略，它会淘汰最近最少使用的缓存数据，从而保证缓存中存储的数据是经常访问的数据。</p>
<p>缓存预热：为了提高缓存的命中率，我们可以在系统启动时预先将一些经常访问的数据加载到缓存中，从而减少缓存的冷启动时间，提高缓存的效率和性能。</p>
<p>缓存穿透和缓存击穿：缓存穿透是指查询一个不存在的数据，从而导致缓存无法命中，需要访问数据库来获取数据；缓存击穿是指查询一个缓存中不存在但数据库中存在的数据，从而导致大量请求直接访问数据库，从而导致数据库压力过大。为了避免缓存穿透和缓存击穿，我们可以使用布隆过滤器等技术进行过滤，或者使用互斥锁等技术来保证缓存的一致性和可靠性。</p>
<p>缓存雪崩：缓存雪崩是指缓存中大量数据同时过期或者失效，从而导致大量请求直接访问数据库，从而导致数据库压力过大。为了避免缓存雪崩，我们可以使用分布式锁等技术来保证缓存的一致性和可靠性，或者使用多级缓存等技术来减少缓存失效的风险。</p>
<p>总之，Redis的缓存机制是非常灵活和强大的，可以帮助我们提高系统的性能和可靠性，同时还可以支持多种缓存淘汰策略、缓存预热、缓存穿透和缓存击穿等技术，从而保证了缓存的一致性和可靠性。</p>
<h3 id="Redis为什么这么快"><a href="#Redis为什么这么快" class="headerlink" title="Redis为什么这么快"></a>Redis为什么这么快</h3><p>Redis 之所以能够拥有如此快的性能，是因为它采用了以下几种优化策略：</p>
<p>数据结构优化：Redis 内置了多种高效的数据结构，例如哈希表、有序集合等，可以在内存中高效地存储和访问数据。<br>内存优化：Redis 将所有数据存储在内存中，避免了磁盘 I&#x2F;O 的开销，并且采用了多种内存优化技术，例如内存分配器、内存池等，可以减少内存碎片和内存泄漏的风险。<br>网络优化：Redis 使用单线程模型，避免了多线程之间的上下文切换和锁竞争，同时采用了事件驱动的网络模型，可以高效地处理大量的并发连接。<br>持久化优化：Redis 提供了多种持久化方式，例如 RDB 和 AOF，可以在保证数据安全的同时，尽可能地减少持久化的开销。<br>综合以上优化策略，Redis 可以实现非常高的性能和吞吐量，成为了一种非常受欢迎的内存数据库。</p>
<h2 id="如果请求的数据丢失该怎么办？有什么解决方法吗？"><a href="#如果请求的数据丢失该怎么办？有什么解决方法吗？" class="headerlink" title="如果请求的数据丢失该怎么办？有什么解决方法吗？"></a>如果请求的数据丢失该怎么办？有什么解决方法吗？</h2><p><strong>重新发送请求：</strong> 如果客户端检测到数据丢失或请求超时，可以尝试重新发送请求。在客户端实现重试逻辑，当检测到请求失败或超时时，自动重新发送相同的请求，直到收到正确的响应为止。</p>
<p><strong>使用消息队列：</strong> 在分布式系统中，可以使用消息队列来处理请求，确保请求的可靠传递和处理。当客户端发送请求时，将请求发送到消息队列中，然后由后台服务消费消息并处理请求。即使消息在传递过程中丢失，消息队列也会保证消息的可靠传递和处理。</p>
<p><strong>记录日志和监控：</strong> 在服务端记录请求日志，包括请求内容、请求时间和处理结果等信息。通过监控系统实时监控请求的处理情况，及时发现和处理请求丢失的问题。</p>
<h2 id="如果让你对这个博客项目优化，你会从哪几个点来优化呢？"><a href="#如果让你对这个博客项目优化，你会从哪几个点来优化呢？" class="headerlink" title="如果让你对这个博客项目优化，你会从哪几个点来优化呢？"></a>如果让你对这个博客项目优化，你会从哪几个点来优化呢？</h2><ul>
<li><strong>数据库索引优化：</strong> 对于经常被查询的字段，建立索引可以加快查询速度。</li>
<li><strong>SQL 查询优化：</strong> 使用合适的 SQL 查询语句，避免不必要的全表扫描和数据加载，以提高查询效率。</li>
<li><strong>缓存优化：</strong> 使用缓存技术（如 Redis）缓存热点数据，减少数据库访问次数，提高数据读取速度。</li>
<li><strong>图片、静态资源优化：</strong> 对于页面中的图片和其他静态资源，使用合适的压缩算法和 CDN 加速，减少页面加载时间。</li>
<li><strong>日志记录：</strong> 合理记录系统运行日志，包括异常日志、访问日志等，方便排查问题和性能优化。</li>
</ul>
<h1 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h1><p>登录</p>
<ul>
<li><p>自定义登录接口：实现了 Spring Security 的 <code>UserDetails</code> 接口的自定义用户类。它主要用于封装用户的认证信息，包括用户名、密码以及用户状态等。</p>
</li>
<li><p>自定义UserDetailsService，通过实现 <code>UserDetailsService</code> 接口并重写 <code>loadUserByUsername</code> 方法，可以实现根据用户名加载用户信息的功能，从而支持 Spring Security 进行用户认证和授权操作。</p>
</li>
<li><p>通过 <code>AuthenticationManager</code> 对象进行认证，该对象会调用 <code>UserDetailsServiceImpl</code> 中的方法对用户进行认证。如果认证成功，会返回一个 <code>Authentication</code> 对象，如果认证对象为 null，说明认证失败，抛出异常。</p>
</li>
<li><p>如果认证成功，从认证对象中获取到用户信息，并生成一个 JWT（JSON Web Token），然后将 JWT 保存到 Redis 缓存中，以便后续的认证和授权操作。客户端收到JWT后，会在每次与服务器通信时将其发送给服务器。服务器收到JWT后，会验证其有效性，包括检查JWT的签名是否有效以及是否过期。如果JWT过期了，服务器就会拒绝该JWT并要求客户端重新进行登录，以获取一个新的JWT。</p>
</li>
<li><p>最后，将用户信息封装成 <code>UserInfoVo</code> 对象，与生成的 JWT 一同封装到 <code>BlogUserLoginVo</code> 对象中，并返回一个成功的响应结果。</p>
</li>
</ul>
<p>校验：</p>
<ul>
<li><p>定义Jwt身份认证过滤器，用于对用户请求进行身份验证</p>
</li>
<li><p>首先从请求头中获取 JWT 令牌 <code>token</code>。</p>
</li>
<li><p>如果请求头中没有 <code>token</code>，则说明该接口不需要身份认证，直接放行请求。</p>
</li>
<li><p>如果获取到了 <code>token</code>，则尝试解析 <code>token</code> 获取其中的用户信息。如果解析失败，可能是因为 <code>token</code> 过期或者非法，这时会返回需要重新登录的错误响应。</p>
</li>
<li><p>如果成功解析 <code>token</code>，则从 <code>token</code> 中获取用户的标识信息（userid），然后根据用户标识从 Redis 缓存中获取用户信息。</p>
</li>
<li><p>如果用户身份验证通过，则将用户信息存入 Spring Security 的上下文中（<code>SecurityContextHolder</code> 是 Spring Security 提供的一个全局存储容器，用于保存当前用户的安全上下文信息。），否则返回需要重新登录的错误响应。</p>
</li>
</ul>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ol>
<li>创建工具类实现 RedisSerializer 接口的 FastJson 序列化器，主要用于将对象序列化成字节数组并存储到 Redis 中，以及从 Redis 中取出字节数组并反序列化为对象。</li>
<li>创建RedisConfig类用于创建和配置 RedisTemplate 对象，以便在 Spring Boot 应用中方便地对 Redis 进行读写操作，并使用 FastJson 进行对象的序列化和反序列化。</li>
<li>新建JwtUtil类，用于生成、解析 JWT，以及生成加密的秘钥。</li>
<li>新建RedisCache类，封装了对 Redis 缓存进行操作的工具类。它提供了一系列方法用于设置缓存、获取缓存、删除缓存等操作，包括对基本类型、List、Set、Map、Hash等数据结构的操作。</li>
<li>新建WebUtils类，封装了一些常用的 Web 操作，例如将字符串渲染到客户端或设置文件下载的响应头信息，可以方便地在 Web 应用中使用。</li>
</ol>
<h2 id="SecurityConfig类"><a href="#SecurityConfig类" class="headerlink" title="SecurityConfig类"></a>SecurityConfig类</h2><p>继承了WebSecurityConfigurerAdapter类，重写方法，用于配置 Spring Security 的安全策略和认证管理器，包括配置密码加密方式、关闭 CSRF 保护、设置认证规则等。</p>
<h2 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h2><ol>
<li><p><strong>Spring Security配置理解</strong>：</p>
<ul>
<li>你能解释一下 <code>WebSecurityConfigurerAdapter</code> 的作用吗？为什么要继承它来配置安全性？</li>
</ul>
<p><code>WebSecurityConfigurerAdapter</code> 是 Spring Security 提供的用于配置 Web 安全的适配器类，它提供了一系列的方法用于配置安全策略、认证管理器等。继承它可以方便地进行安全配置。</p>
<ul>
<li>为什么要配置 <code>AuthenticationManager</code> 和 <code>PasswordEncoder</code>？它们的作用是什么？</li>
</ul>
<p><code>AuthenticationManager</code> 负责处理认证相关的操作，例如验证用户的身份。而 <code>PasswordEncoder</code> 则用于对密码进行加密和验证。配置它们的目的是为了提供安全的身份认证机制和密码加密方式。</p>
</li>
<li><p><strong>安全策略配置</strong>：</p>
<ul>
<li>为什么要关闭 CSRF 保护？这样做有什么风险吗？</li>
</ul>
<p>关闭 CSRF 保护是因为我们可能不使用基于 session 的认证方式，而采用了基于 token 的认证方式，所以可以关闭 CSRF 以减少安全风险。</p>
<ul>
<li><code>sessionCreationPolicy(SessionCreationPolicy.STATELESS)</code> 的作用是什么？为什么要使用 <code>STATELESS</code> 选项？</li>
</ul>
<p>作用是禁用 session，因为我们使用了基于 token 的认证方式，不需要在服务器端保存用户的会话状态。</p>
<ul>
<li>为什么允许匿名访问登录接口 <code>/login</code>？这样做的安全性如何？</li>
</ul>
<p>允许匿名访问登录接口 <code>/login</code> 是因为登录接口需要在用户未认证时访问，以便用户进行身份验证。</p>
</li>
<li><p><strong>密码加密</strong>：</p>
<ul>
<li>为什么要使用 <code>BCryptPasswordEncoder</code> 作为密码加密方式？它相对于其他加密方式有什么优势？</li>
</ul>
<p>使用 <code>BCryptPasswordEncoder</code> 作为密码加密方式是因为它是一种密码哈希算法，能够提供更高的安全性。相比于其他加密方式，如 MD5 或 SHA-1，BCrypt 更难以被破解，因此更适合存储用户密码等敏感信息。</p>
</li>
<li><p><strong>JWT（JSON Web Token）：</strong></p>
<ul>
<li><p>JWT是一种开放标准，定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息。它由三部分组成：头部、载荷和签名。</p>
</li>
<li><p>JWT的工作原理是在用户登录成功后生成一个JWT并返回给客户端，客户端在后续的请求中将JWT放在请求头中发送给服务器，服务器验证JWT的有效性并根据其中的信息进行操作。</p>
</li>
<li><p><strong>优点：</strong></p>
<ol>
<li><strong>无状态性（Stateless）：</strong> JWT是无状态的，服务器不需要在后端存储会话信息。所有必要的信息都包含在JWT中，因此可以轻松地在多个服务器之间共享用户认证信息。</li>
<li><strong>跨域通信（Cross-Origin Communication）：</strong> 由于JWT是基于标准的JSON格式，因此易于在不同域之间传递和使用。</li>
<li><strong>安全性（Security）：</strong> JWT使用签名机制确保令牌的完整性和真实性。签名是使用密钥生成的，因此只有拥有密钥的服务器才能生成有效的JWT。</li>
<li><strong>灵活性（Flexibility）：</strong> JWT支持自定义的载荷数据，开发人员可以根据需要在令牌中包含任意信息。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li><strong>令牌过期管理：</strong> 一旦JWT生成，其有效期就开始计算，服务器无法在令牌过期前使其失效。因此，令牌的过期时间应该谨慎设置，过长的过期时间会增加安全风险，而过短的过期时间会增加客户端的负担。</li>
<li><strong>信息泄露风险：</strong> JWT中的信息是以明文形式进行传输的，虽然可以对载荷中的数据进行加密，但签名部分仍然是以明文形式存在。因此，JWT在传输过程中存在信息泄露的风险，尤其是如果载荷中包含敏感信息。</li>
<li><strong>无法撤销令牌：</strong> 一旦JWT生成，除非等待其过期，否则无法在服务器端主动撤销令牌。这意味着如果用户的令牌被盗取，服务器无法立即使其失效，而必须等待令牌过期。</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>其他问题</strong>：</p>
<ul>
<li>在配置中还有哪些常见的安全策略需要考虑？例如身份验证、授权等。</li>
</ul>
<p>其他常见的安全策略包括授权、HTTPS 配置、CSRF 防护、安全头部设置等。在实际项目中，我们还需要考虑如何处理用户认证失败、会话管理、注销等安全问题。</p>
<ul>
<li>在实际项目中，你遇到过哪些与 Spring Security 相关的挑战？如何解决的？</li>
</ul>
<p>处理跨域问题。通过阅读官方文档、查阅相关资料和尝试不同的解决方案来解决。</p>
</li>
</ol>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="认证出错或者权限不足"><a href="#认证出错或者权限不足" class="headerlink" title="认证出错或者权限不足"></a>认证出错或者权限不足</h2><p>我们的项目在认证出错或者权限不足的时候响应回来的Json，默认是使用Security官方提供的响应的格式，但是这种响应的格式肯定是不符合我们项目的接口规范的。所以需要自定义异常处理，我们需要去实现AuthenticationEntryPoint(官方提供的认证失败处理器)类（重写 <code>commence</code> 方法，处理未经身份验证的用户访问受保护资源时的情况。）、AccessDeniedHandler(官方提供的授权失败处理器)类（重写 <code>handle</code> 方法，处理访问被拒绝的情况。），然后配置给Security，</p>
<h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><p>定义了一个全局异常处理类 <code>GlobalExceptionHandler</code>，统一处理系统中出现的异常情况，将异常信息转换为统一的响应格式返回给客户端。</p>
<h1 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h1><p>首先从当前的安全上下文（<code>SecurityContextHolder</code>）中获取认证对象（<code>Authentication</code>），然后从认证对象中获取用户信息。在这里，用户信息是 <code>LoginUser</code> 类的实例，其中包含了用户的 ID。接着，根据用户的 ID，删除了 Redis 中存储的用户信息，这样用户就被成功注销了。</p>
<h1 id="如何获取文章评论列表"><a href="#如何获取文章评论列表" class="headerlink" title="如何获取文章评论列表"></a>如何获取文章评论列表</h1><ol>
<li>对articleId进行判断，作用是得到指定的文章。</li>
<li>对评论区的某条评论的rootID进行判断，如果为-1，就表示是根评论。</li>
<li>分页查询。查的是整个评论区的每一条根评论</li>
<li>根据根评论的id，来查询对应的所有子评论</li>
</ol>
<h1 id="AOP实现日志记录"><a href="#AOP实现日志记录" class="headerlink" title="AOP实现日志记录"></a>AOP实现日志记录</h1><ol>
<li><strong>声明自定义注解 <code>@mySystemlog</code></strong>:<ul>
<li>定义一个注解类 <code>@mySystemlog</code>，并在其中添加描述接口信息的属性 <code>xxxBusinessName()</code>。</li>
</ul>
</li>
<li><strong>编写切面类 <code>myLogAspect</code></strong>:<ul>
<li>使用 <code>@Component</code> 注解将类声明为一个 Spring 组件，由 Spring 管理。</li>
<li>使用 <code>@Aspect</code> 注解标注该类为一个切面类，用于定义通知和切点。</li>
<li>使用 <code>@Pointcut</code> 注解定义切点表达式，指定所有被 <code>@mySystemlog</code> 注解标注的方法作为切点。</li>
<li>定义环绕通知方法 <code>xxPrintLog(ProceedingJoinPoint joinPoint)</code>，在目标方法执行前后执行额外的逻辑。</li>
<li>在环绕通知方法中，调用 <code>xxHandleBefore()</code> 方法记录请求前的日志信息，然后调用目标方法 <code>proceed()</code> 执行目标方法，再调用 <code>xxhandleAfter()</code> 方法记录请求后的日志信息。</li>
<li>编写 <code>xxHandleBefore(ProceedingJoinPoint joinPoint)</code> 方法用于记录请求前的日志信息，如请求URL、请求方式、参数等。</li>
<li>编写 <code>xxhandleAfter(Object ret)</code> 方法用于记录请求后的日志信息，如返回结果等。</li>
<li>编写 <code>getSystemlog(ProceedingJoinPoint joinPoint)</code> 方法用于获取被增强方法的 <code>@mySystemlog</code> 注解对象。</li>
</ul>
</li>
<li><strong>在Controller中使用自定义注解</strong>:<ul>
<li>在需要记录日志的控制器方法上添加 <code>@mySystemlog</code> 注解，并传入对应的业务描述信息。</li>
</ul>
</li>
<li><strong>AOP切面的织入</strong>:<ul>
<li>在Spring配置文件中启用AOP，确保切面类 <code>myLogAspect</code> 能够被Spring扫描到并织入到相应的目标方法中。</li>
</ul>
</li>
<li><strong>运行时</strong>:<ul>
<li>当请求到达被 <code>@mySystemlog</code> 注解标注的控制器方法时，AOP切面会捕获到该方法的执行，并根据切面中定义的逻辑记录日志。</li>
<li>在执行控制器方法之前，记录请求的相关信息。</li>
<li>在执行控制器方法之后，记录返回结果的相关信息。</li>
</ul>
</li>
</ol>
<p>通过上述流程，实现了在指定方法执行前后记录日志的功能，提高了系统的可维护性和可追踪性。</p>
<h1 id="浏览次数"><a href="#浏览次数" class="headerlink" title="浏览次数"></a>浏览次数</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果直接操作博客表的浏览量的话，在并发量大的情况下会出现什么问题呢？如何去优化呢？</p>
<h2 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h2><p>①在应用启动时把博客的浏览量存储到redis中 - 项目启动的预处理功能，实现接口-&gt;（CommandLineRunner）</p>
<p>②更新浏览量时去更新redis中的数据</p>
<p>③创建一个定时任务，定时从Redis中获取文章的浏览次数，并将其同步到数据库中。这一步可以通过使用Spring的<code>@Scheduled</code>注解实现定时任务。</p>
<p>④读取文章浏览量时从redis读取</p>
<h1 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h1><h2 id="什么是RBAC"><a href="#什么是RBAC" class="headerlink" title="什么是RBAC"></a>什么是RBAC</h2><p>RBAC（Role-Based Access Control）模型是一种常见的权限管理模型，它基于角色来管理用户的权限。该模型中，用户通过被分配到不同的角色，而角色则被赋予特定的权限。RBAC模型的工作原理是将权限分配给角色，然后再将角色分配给用户，这样用户就继承了相应的权限。</p>
<h2 id="用户权限和角色信息的实现逻辑和流程如下："><a href="#用户权限和角色信息的实现逻辑和流程如下：" class="headerlink" title="用户权限和角色信息的实现逻辑和流程如下："></a>用户权限和角色信息的实现逻辑和流程如下：</h2><ol>
<li><strong>用户登录：</strong> 用户使用用户名和密码进行登录。</li>
<li><strong>权限和角色查询：</strong> 当用户登录成功后，系统会根据用户的身份信息（通常是用户ID）查询用户所具有的权限和角色信息。</li>
<li><strong>权限信息查询：</strong> 系统根据用户ID查询用户所具有的权限信息。通常情况下，权限信息存储在数据库中的权限表中。系统会根据用户ID关联用户角色表和角色权限表，最终获取到用户的权限信息。</li>
<li><strong>角色信息查询：</strong> 系统根据用户ID查询用户所具有的角色信息。角色信息也通常存储在数据库中的角色表中。系统会直接查询用户角色表，获取用户所拥有的角色信息。</li>
<li><strong>权限和角色的返回：</strong> 查询到用户的权限和角色信息后，系统将以JSON格式返回给客户端。</li>
<li><strong>权限控制：</strong> 接收到权限信息后，前端或后端系统会根据这些权限信息进行权限控制。例如，前端根据用户的权限信息动态展示页面中的功能按钮或者菜单项；后端在接收到用户的请求时，根据用户的权限信息来验证用户是否有权限执行该请求。</li>
</ol>
<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><ol>
<li><p><strong>菜单树的构建流程：</strong></p>
<ul>
<li><code>selectRouterMenuTreeByUserId</code>方法首先从数据库中获取所有菜单数据，然后根据用户ID过滤出当前用户所具有的菜单数据。接着，它调用<code>builderMenuTree</code>方法，传入当前用户的菜单数据和一个顶层菜单ID（通常为0），构建用户的菜单树。</li>
</ul>
</li>
<li><p><strong>递归方法的设计：</strong></p>
<ul>
<li><code>builderMenuTree</code>方法负责构建菜单树，遍历菜单数据列表，过滤出当前菜单的子菜单，getChildren&#96;方法则负责获取指定菜单的子菜单列表，通过递归方式实现。</li>
</ul>
</li>
<li><p><strong>性能优化和扩展考虑：</strong></p>
<ul>
<li><p>目前的菜单树构建算法是基于递归的方式实现的，如果菜单数据量非常大，可能会导致性能问题。为了优化性能，可以考虑使用迭代方式实现菜单树的构建，或者在数据库层面进行分页查询和数据缓存。</p>
</li>
<li><p>对于大型菜单数据，可以考虑实现分页加载或者按需加载的功能，以减少页面加载时间和系统资源占用。</p>
</li>
<li><p>分页查询：</p>
</li>
</ul>
<ol>
<li>首先，在服务端，我们需要修改查询菜单数据的方法，支持根据分页参数查询相应的菜单数据。</li>
<li>然后，在菜单服务中调用这个分页查询方法来获取当前页面所需的菜单数据。</li>
<li>接着，在前端，我们需要通过 AJAX 请求来动态加载菜单数据。当用户切换页面或者滚动到菜单列表底部时，再发起请求加载下一页的菜单数据。</li>
</ol>
</li>
<li><p><strong>权限控制与菜单展示：</strong></p>
<ul>
<li>这段代码中，根据用户的权限动态展示菜单是通过查询当前用户所具有的菜单数据，并构建成菜单树的方式实现的。权限控制是在获取菜单数据时进行的，确保只展示用户具有权限的菜单项。</li>
<li>如果用户有多个角色，系统会根据用户所拥有的所有角色，汇总用户的权限，并展示所有角色所具有的菜单项。</li>
<li>菜单数据首次查询时会被存储在Redis缓存中，后续请求可以直接从Redis缓存中获取，避免了对数据库的重复查询，从而提高了系统的响应速度和性能。</li>
</ul>
</li>
<li><p><strong>错误处理与边界情况：</strong></p>
<ul>
<li>增加了对可能出现的异常情况的处理，包括空值判断和异常捕获。如果发生异常，会记录错误日志并返回空列表，避免了系统崩溃或者返回空指针异常。同时，针对查询结果为空的情况，我们返回了一个空列表而不是null，这样可以简化客户端代码的处理逻辑。</li>
</ul>
<h2 id="新增角色需要关联菜单"><a href="#新增角色需要关联菜单" class="headerlink" title="新增角色需要关联菜单"></a>新增角色需要关联菜单</h2><h2 id="修改角色需要修改菜单"><a href="#修改角色需要修改菜单" class="headerlink" title="修改角色需要修改菜单"></a>修改角色需要修改菜单</h2><h2 id="新增用户的时候可以设置角色信息"><a href="#新增用户的时候可以设置角色信息" class="headerlink" title="新增用户的时候可以设置角色信息"></a>新增用户的时候可以设置角色信息</h2><p>新增用户时需要判断用户名电话等是否已存在，并且密钥要进行加密处理</p>
<p>修改用户的时候需要根据用户信息查询角色信息，并且删除用户与角色关联，然后新增用户与角色关联</p>
</li>
</ol>
]]></content>
      <categories>
        <category>springboot java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试八股</title>
    <url>/2024/04/07/%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/</url>
    <content><![CDATA[<h1 id="面试八股"><a href="#面试八股" class="headerlink" title="面试八股"></a>面试八股</h1><h2 id="前端知识点："><a href="#前端知识点：" class="headerlink" title="前端知识点："></a>前端知识点：</h2><p><a href="https://vue3js.cn/interview/">https://vue3js.cn/interview/</a></p>
<p><a href="https://fe.ecool.fun/">https://fe.ecool.fun/</a></p>
<h2 id="后端知识点"><a href="#后端知识点" class="headerlink" title="后端知识点"></a>后端知识点</h2><p><a href="https://javaguide.cn/">https://javaguide.cn/</a></p>
<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><h2 id="面向对象的特征有哪些方面"><a href="#面向对象的特征有哪些方面" class="headerlink" title="面向对象的特征有哪些方面?"></a>面向对象的特征有哪些方面?</h2><p>抽象（包括数据抽象和行为抽象，只关注属性和行为，不关注细节）、封装（隐藏一切可隐藏的东西， 只向外界提供最简单的编程接口）、继承（从父类得到继承信息创建子类的过程）、多态（允许不同子类型的对象对同一消息作出不同的响应，要实现多态需要做两件事：1). 方法重写（子类继承父类并重写父类中已 有的或抽象的方法）；2). 对象造型（用父类型引用引用子类型对象，这样同样 的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</p>
<h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><p>重写： 在子类中把父类本身有的方法重新写一遍，方法名，参数列表，返回类型都相同的情况下， 对方法体进行修改或重写，这就是重写。但要 注意子类函数的访问修饰权限不能少于父类的。</p>
<p>重载： 重载是一个类中多态性的一种表现 。重载要求同名方法的参数列表不同。重载的时候，返回值类型可以相同也可以不同。</p>
<h2 id="equals与-的区别"><a href="#equals与-的区别" class="headerlink" title="equals与&#x3D;&#x3D;的区别"></a>equals与&#x3D;&#x3D;的区别</h2><p>&#x3D;&#x3D;操作符专门用来比较变量的值是否相同。</p>
<p>如果比较的对象是基本数据类型，则比较数值是否相等；</p>
<p>如果比较的是引用数据类型，则比较的是对象的内存地址是否相等。</p>
<p>equals： equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自java.lang.Object类的，所以 适用于所有对象。</p>
<h2 id="Static关键字有什么作用？"><a href="#Static关键字有什么作用？" class="headerlink" title="Static关键字有什么作用？"></a>Static关键字有什么作用？</h2><p>Static修饰的类是静态内部类.</p>
<p>Static修饰的方法是静态方法，表示该方法属于当前类的，而不属于某个对象的，静态方法也不能被重写，可以直接使用类名来调用。在 static方法中不能使用this或者super关键字。</p>
<p>Static修饰变量是静态变量或者叫类变量，静态变量被所有实例所共享，不会依赖于对象。</p>
<p>Static修饰的代码块叫静态代码块，通常用来做程序优化的。静态代码块中的代码在整个类加载的时候只会执行一次。静态代码块可以有多 个，如果有多个，按照先后顺序依次执行。</p>
<h2 id="final在java中的作用，有哪些用法"><a href="#final在java中的作用，有哪些用法" class="headerlink" title="final在java中的作用，有哪些用法?"></a>final在java中的作用，有哪些用法?</h2><ol>
<li>被final修饰的类不可以被继承 </li>
<li>被final修饰的方法不可以被重写 </li>
<li>被final修饰的变量不可以被改变.如果修饰引用,那么表示引用不可变,引用指向的内容可变.</li>
<li>被final修饰的方法,JVM会尝试将其内联,以提高运行效率 </li>
<li>被final修饰的常量,在编译阶段会存入常量池中.</li>
</ol>
<h2 id="String-StringBuffffer-和-StringBuilder-的区别是什么？"><a href="#String-StringBuffffer-和-StringBuilder-的区别是什么？" class="headerlink" title="String StringBuffffer 和 StringBuilder 的区别是什么？"></a>String StringBuffffer 和 StringBuilder 的区别是什么？</h2><p>String是只读字符串，它并不是基本数据类型，而是一个对象。</p>
<p>StringBuffer是线程安全的，Stringbuilder是非线程安全的。所以Stringbuilder比stringbuffer效率更高，StringBuffer的方法大多都加了 synchronized关键字</p>
<h2 id="普通类与抽象类有什么区别？"><a href="#普通类与抽象类有什么区别？" class="headerlink" title="普通类与抽象类有什么区别？"></a>普通类与抽象类有什么区别？</h2><p>普通类不能包含抽象方法，抽象类可以包含抽象方法 抽象类不能直接实例化，普通类可以直接实例化</p>
<h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><p>抽象类：</p>
<ol>
<li>抽象方法，只有行为的概念，没有具体的行为实现。使用abstract关键字修饰，没有方法体。子类必须重写这些抽象方法。 </li>
<li>包含抽象方法的类，一定是抽象类。 </li>
<li>抽象类只能被继承，一个类只能继承一个抽象类。</li>
</ol>
<p> 接口： </p>
<ol>
<li>全部的方法都是抽象方法，属性都是常量 </li>
<li>不能实例化，可以定义变量。 </li>
<li>接口变量可以引用具体实现类的实例 </li>
<li>接口只能被实现，一个具体类实现接口，必须实现全部的抽象方法 </li>
<li>接口之间可以多实现 </li>
<li>一个具体类可以实现多个接口，实现多继承现象</li>
</ol>
<h2 id="Java创建对象有几种方式？"><a href="#Java创建对象有几种方式？" class="headerlink" title="Java创建对象有几种方式？"></a>Java创建对象有几种方式？</h2><ol>
<li>new创建新对象 </li>
<li>通过反射机制 </li>
<li>采用clone机制 </li>
<li>通过序列化机制</li>
</ol>
<h1 id="Java集合-泛型面试题"><a href="#Java集合-泛型面试题" class="headerlink" title="Java集合&#x2F;泛型面试题"></a>Java集合&#x2F;泛型面试题</h1><p>![image-20240407124950846](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240407124950846.png)</p>
<h2 id="1、ArrayList和linkedList的区别"><a href="#1、ArrayList和linkedList的区别" class="headerlink" title="1、ArrayList和linkedList的区别"></a>1、ArrayList和linkedList的区别</h2><p>嗯，它们两个主要是底层使用的数据结构不一样，ArrayList 是动态数组，LinkedList 是双向链表，这也导致了它们很多不同的特点。</p>
<p>1，从操作数据效率来说</p>
<p>ArrayList按照下标查询的时间复杂度O(1)【内存是连续的，根据寻址公式】， LinkedList不支持下标查询</p>
<p>查找（未知索引）： ArrayList需要遍历，链表也需要链表，时间复杂度都是O(n)</p>
<p>新增和删除</p>
<ul>
<li>ArrayList尾部插入和删除，时间复杂度是O(1)；其他部分增删需要挪动数组，时间复杂度是O(n)</li>
<li>LinkedList头尾节点增删时间复杂度是O(1)，其他都需要遍历链表，时间复杂度是O(n)</li>
</ul>
<p>2，从内存空间占用来说</p>
<p>ArrayList底层是数组，内存连续，节省内存</p>
<p>LinkedList 是双向链表需要存储数据，和两个指针，更占用内存</p>
<p>3，从线程安全来说，ArrayList和LinkedList都不是线程安全的</p>
<h2 id="2、-HashMap和HashTable的区别"><a href="#2、-HashMap和HashTable的区别" class="headerlink" title="2、 HashMap和HashTable的区别"></a>2、 HashMap和HashTable的区别</h2><p>Hashtable：key和value都不能为null。 </p>
<p>HashMap：key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性；可以有多个key 值对应的value为null。</p>
<p>Hashtable比HashMap多提供了elments() 和contains() 两个方法。</p>
<p>初始容量大小和每次扩充容量大小不同 </p>
<ul>
<li>在创建HashMap时，可以指定初始容量和加载因子（默认为0.75）。HashMap会根据加载因子的大小在必要时进行扩容，以保持性能。</li>
<li>在创建HashTable时，不能指定初始容量和加载因子。HashTable有一个默认的初始容量为11，加载因子为0.75。</li>
</ul>
<p>HashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自己 处理多线程的安全问题。 Hashtable是线程安全的，它的每个方法上都有synchronized 关键字，因此可直接用于多线程中。 虽然HashMap是线程不安全的，但是它的效率远远高于Hashtable。</p>
<p>ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为 ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。</p>
<h2 id="3-说说List-Set-Map三者的区别"><a href="#3-说说List-Set-Map三者的区别" class="headerlink" title="3.说说List,Set,Map三者的区别"></a>3.说说List,Set,Map三者的区别</h2><p>List： List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的 对象 </p>
<p>Set:不允许重复的集合。不会有多个元素引用相同的对象。 </p>
<p>Map: 以键值对存储数据 ，元素存储循序是无序的 ，不允许出现重复键</p>
<h2 id="4-ArrayList源码分析"><a href="#4-ArrayList源码分析" class="headerlink" title="4. ArrayList源码分析"></a>4. ArrayList源码分析</h2><ul>
<li>底层数据结构</li>
</ul>
<p>ArrayList底层是用动态的数组实现的</p>
<ul>
<li>初始容量</li>
</ul>
<p>ArrayList初始容量为0，当第一次添加数据的时候才会初始化容量为10</p>
<ul>
<li>扩容逻辑</li>
</ul>
<p>ArrayList在进行扩容的时候是原来容量的1.5倍，每次扩容都需要拷贝数组</p>
<ul>
<li><p>添加逻辑</p>
<ul>
<li><p>确保数组已使用长度（size）加1之后足够存下下一个数据 </p>
</li>
<li><p>计算数组的容量，如果当前数组已使用长度+1后的大于当前的数组长度，则调用grow方法扩容（原来的1.5倍）</p>
</li>
<li><p>确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上。</p>
</li>
<li><p>返回添加成功布尔值。</p>
</li>
</ul>
</li>
</ul>
<h2 id="5-用Arrays-asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗"><a href="#5-用Arrays-asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗" class="headerlink" title="5.用Arrays.asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗"></a>5.用Arrays.asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗</h2><p>Arrays.asList转换list之后，如果修改了数组的内容，list会受影响，因为它的底层使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址</p>
<p>list用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响</p>
<hr>
<h2 id="6-说一下HashMap的实现原理？"><a href="#6-说一下HashMap的实现原理？" class="headerlink" title="6.说一下HashMap的实现原理？"></a>6.说一下HashMap的实现原理？</h2><p>1，底层使用hash表数据结构，即数组+（链表 | 红黑树）</p>
<p>2，添加数据时，计算key的值确定元素在数组中的下标</p>
<p>​	key相同则替换，不同则存入链表或红黑树中</p>
<p>3，获取数据通过key的hash计算数组下标获取元素</p>
<ul>
<li><p>JDK1.8之前采用的拉链法，数组+链表</p>
</li>
<li><p>JDK1.8之后采用数组+链表+红黑树，链表长度大于8且数组长度大于64则会从链表转化为红黑树</p>
</li>
</ul>
<h2 id="7-HashMap的put方法的具体流程？"><a href="#7-HashMap的put方法的具体流程？" class="headerlink" title="7.HashMap的put方法的具体流程？"></a>7.HashMap的put方法的具体流程？</h2><ol>
<li>首先，根据键的<code>hashCode()</code>方法计算键的哈希码，确定键值对在哈希表中的位置。哈希码决定了键值对在哈希表数组中的索引位置。</li>
<li>如果在计算出的索引位置上没有其他键值对，直接将新的键值对放入该位置。</li>
<li>如果计算出的索引位置上已经存在键值对，则可能发生两种情况：<ul>
<li>如果新的键与已存在的键相等（使用<code>equals()</code>方法比较），则用新的值替换旧的值。</li>
<li>如果新的键与已存在的键不相等，则发生了哈希冲突，通常情况下，这时会使用链表或红黑树等数据结构来解决冲突。新的键值对将被插入到冲突位置的数据结构中。</li>
</ul>
</li>
<li>如果插入新的键值对后，哈希表的大小超过了负载因子（load factor），则会触发哈希表的扩容操作，将哈希表的容量翻倍，并重新计算每个键值对的位置。</li>
</ol>
<h2 id="8-HashMap的扩容机制"><a href="#8-HashMap的扩容机制" class="headerlink" title="8.HashMap的扩容机制"></a>8.HashMap的扩容机制</h2><ol>
<li>当哈希表中存储的键值对数量达到了负载因子（默认为0.75）与当前容量的乘积时，会触发扩容操作。</li>
<li>扩容操作首先会创建一个新的哈希表，其容量是当前哈希表容量的两倍。</li>
<li>然后，将原有哈希表中的所有键值对重新计算哈希码，并插入到新的哈希表中。这是因为扩容后哈希表的容量变化，原有的哈希码计算可能会导致键值对存放在错误的位置。</li>
<li>扩容操作完成后，原有的哈希表会被丢弃，新的哈希表成为HashMap的存储结构。</li>
</ol>
<h2 id="9-面试官：HashSet与HashMap的区别？"><a href="#9-面试官：HashSet与HashMap的区别？" class="headerlink" title="9.面试官：HashSet与HashMap的区别？"></a>9.<strong>面试官</strong>：HashSet与HashMap的区别？</h2><p>HashSet底层其实是用HashMap实现存储的, HashSet封装了一系列HashMap的方法. 依靠HashMap来存储元素值,(利用hashMap的key键进行存储), 而value值默认为Object对象. 所以HashSet也不允许出现重复值, 判断标准和HashMap判断标准相同, 两个元素的hashCode相等并且通过equals()方法返回true.</p>
<h2 id="10-说说ConcurrentHashMap"><a href="#10-说说ConcurrentHashMap" class="headerlink" title="10.说说ConcurrentHashMap"></a>10.说说ConcurrentHashMap</h2><p>Segment 段</p>
<p> ConcurrentHashMap 和 HashMap 思路是差不多的，但是因为它支持并发操作，所以要复杂一 些。整个 ConcurrentHashMap 由一个个 Segment 组成， Segment 代表”部分“或”一段“的 意思，所以很多地方都会将其描述为分段锁。</p>
<p> 线程安全（Segment 继承 ReentrantLock 加锁） </p>
<p>简单理解就是， ConcurrentHashMap 是一个 Segment 数组， Segment 通过继承 ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每 个 Segment 是线程安全的，也就实现了全局的线程安全 </p>
<h1 id="tcp-ip的工作流程"><a href="#tcp-ip的工作流程" class="headerlink" title="tcp&#x2F;ip的工作流程"></a>tcp&#x2F;ip的工作流程</h1><ol>
<li><p><strong>建立连接</strong>：</p>
<ul>
<li>这通常包括三次握手过程</li>
</ul>
<ol>
<li><strong>客户端向服务器发送连接请求</strong>：<ul>
<li>客户端发送一个SYN（同步）标志位置为1的数据包，指明客户端初始化一个连接。</li>
</ul>
</li>
<li><strong>服务器响应</strong>：<ul>
<li>服务器收到客户端的SYN请求后，会返回一个ACK（确认）标志位和SYN标志位都置为1的数据包，表示收到了客户端的连接请求，并同意建立连接。</li>
</ul>
</li>
<li><strong>客户端确认</strong>：<ul>
<li>客户端收到服务器的响应后，会再次发送一个ACK标志位置为1的数据包给服务器，表示确认收到了服务器的确认，连接建立。</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>数据传输</strong>：</p>
</li>
<li><p><strong>连接维护</strong>：</p>
</li>
<li><p><strong>连接关闭</strong>：</p>
<ul>
<li>这通常包括四次挥手过程</li>
</ul>
<ol>
<li><strong>客户端发送关闭请求</strong>：<ul>
<li>客户端发送一个FIN（结束）标志位置为1的数据包给服务器，表示客户端已经没有数据要发送了，但仍然可以接收数据。</li>
</ul>
</li>
<li><strong>服务器确认</strong>：<ul>
<li>服务器收到客户端的FIN请求后，会返回一个ACK标志位置为1的数据包给客户端，表示确认收到了客户端的关闭请求。</li>
</ul>
</li>
<li><strong>服务器发送关闭请求</strong>：<ul>
<li>服务器会继续处理未发送完的数据，并且发送一个FIN标志位置为1的数据包给客户端，表示服务器也准备好关闭连接了。</li>
</ul>
</li>
<li><strong>客户端确认</strong>：<ul>
<li>客户端收到服务器的关闭请求后，会发送一个ACK标志位置为1的数据包给服务器，表示确认收到了服务器的关闭请求。此时客户端进入TIME_WAIT状态，等待一段时间后才真正关闭连接。</li>
</ul>
</li>
</ol>
</li>
</ol>
<h1 id="为什么要使用cookie"><a href="#为什么要使用cookie" class="headerlink" title="为什么要使用cookie"></a>为什么要使用cookie</h1><p>我们知道HTTP协议是无状态的，一次请求完成，不会持久化请求与相应的信息。那么，在购物车、用户登录状态、页面个性化设置等场景下，就无法识别特定用户的信息。这时Cookie就出现了。</p>
<p>Cookie是客户端保存用户信息的一种机制，将服务器发送到浏览器的数据保存在本地，下次向同一服务器再发起请求时被携带发送。对于Cookie，可以设置过期时间。</p>
<p>通常，Cookie用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。这样就解决了HTTP无状态的问题。</p>
<h1 id="什么是Session"><a href="#什么是Session" class="headerlink" title="什么是Session?"></a>什么是Session?</h1><p>会话(session)是一种持久网络协议，是一种在服务器端保存数据的机制，在用户(或用户代理)端和服务器端之间创建关联，当在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而会在整个用户会话中一直存在下去。当客户端关闭会话，或者Session超时失效时会话结束。</p>
<h1 id="Cookie与Session的区别"><a href="#Cookie与Session的区别" class="headerlink" title="Cookie与Session的区别"></a>Cookie与Session的区别</h1><ul>
<li>作用范围不同，Cookie 保存在客户端(浏览器)，Session 保存在服务器端。</li>
<li>存取方式的不同，Cookie只能保存 ASCII，Session可以存任意数据类型，比如UserId等。</li>
<li>有效期不同，Cookie可设置为长时间保持，比如默认登录功能功能，Session一般有效时间较短，客户端关闭或者Session超时都会失效。</li>
<li>隐私策略不同，Cookie存储在客户端，信息容易被窃取;Session存储在服务端，相对安全一些。</li>
<li>存储大小不同， 单个Cookie 保存的数据不能超过 4K，Session可存储数据远高于Cookie。</li>
</ul>
<h1 id="多线程-并发面试题"><a href="#多线程-并发面试题" class="headerlink" title="多线程&amp;并发面试题"></a>多线程&amp;并发面试题</h1><h2 id="1、Java中实现多线程有几种方法"><a href="#1、Java中实现多线程有几种方法" class="headerlink" title="1、Java中实现多线程有几种方法"></a>1、Java中实现多线程有几种方法</h2><p>继承Thread类、实现runnable接口、实现Callable接口、线程池创建线程。通常情况下，我们项目中都会采用线程池的方式创建线程。</p>
<h2 id="2-runnable-和-callable-两个接口创建线程有什么不同呢？"><a href="#2-runnable-和-callable-两个接口创建线程有什么不同呢？" class="headerlink" title="2.runnable 和 callable 两个接口创建线程有什么不同呢？"></a>2.runnable 和 callable 两个接口创建线程有什么不同呢？</h2><p>Runnable 接口run方法无返回值；Callable接口call方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</p>
<p>还有一个就是，他们异常处理也不一样。Runnable接口run方法只能抛出运行时异常，也无法捕获处理；Callable接口call方法允许抛出异常，可以获取异常信息</p>
<p>在实际开发中，如果需要拿到执行的结果，需要使用Callalbe接口创建线程，调用FutureTask.get()得到可以得到返回值，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。</p>
<h2 id="3-并行和并发有什么区别？"><a href="#3-并行和并发有什么区别？" class="headerlink" title="3.并行和并发有什么区别？"></a>3.并行和并发有什么区别？</h2><p>并发是同一时间应对多件事情的能力，多个线程轮流使用一个或多个CPU</p>
<p>并行是同一时间动手做多件事情的能力，4核CPU同时执行4个线程</p>
<h2 id="4-线程和进程的区别？"><a href="#4-线程和进程的区别？" class="headerlink" title="4.线程和进程的区别？"></a>4.线程和进程的区别？</h2><ul>
<li>进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务</li>
<li>不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间</li>
<li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低(上下文切换指的是从一个线程切换到另一个线程)</li>
</ul>
<h2 id="5-线程包括哪些状态，状态之间是如何变化的？"><a href="#5-线程包括哪些状态，状态之间是如何变化的？" class="headerlink" title="5.线程包括哪些状态，状态之间是如何变化的？"></a>5.线程包括哪些状态，状态之间是如何变化的？</h2><p>在JDK中的Thread类中的枚举State里面定义了6中线程的状态分别是：新建、可运行、终结、阻塞、等待和有时限等待六种。</p>
<p>关于线程的状态切换情况比较多。我分别介绍一下</p>
<p>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态，调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong>状态。如果线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong>状态。当然这些是一个线程正常执行情况。</p>
<p>如果线程获取锁失败后，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，只有当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</p>
<p>如果线程获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁<strong>等待</strong>状态，当其它持锁线程调用 notify() 或 notifyAll() 方法，会恢复为<strong>可运行</strong>状态</p>
<p>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</p>
<h2 id="6-wait-和-sleep方法有什么不同呢？"><a href="#6-wait-和-sleep方法有什么不同呢？" class="headerlink" title="6.wait 和 sleep方法有什么不同呢？"></a>6.wait 和 sleep方法有什么不同呢？</h2><p>第一：方法归属不同</p>
<p>sleep(long) 是 Thread 的静态方法。而 wait()，是 Object 的成员方法，每个对象都有</p>
<p>第二：线程醒来时机不同</p>
<p>线程执行 sleep(long) 会在等待相应毫秒后醒来，而 wait() 需要被 notify 唤醒，wait() 如果不唤醒就一直等下去</p>
<p>第三：锁特性不同</p>
<p>wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制</p>
<p>wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（相当于我放弃 cpu，但你们还可以用）</p>
<p>而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（相当于我放弃 cpu，你们也用不了）</p>
<h2 id="7-如何停止一个正在运行的线程呢？"><a href="#7-如何停止一个正在运行的线程呢？" class="headerlink" title="7.如何停止一个正在运行的线程呢？"></a>7.如何停止一个正在运行的线程呢？</h2><p>第一：可以使用退出标志，使线程正常退出，也就是当run方法完成后线程终止，一般我们加一个标记</p>
<p>第二：可以使用线程的stop方法强行终止，不过一般不推荐，这个方法已作废</p>
<p>第三：可以使用线程的interrupt方法中断线程，内部其实也是使用中断标志来中断线程</p>
<h2 id="8-volatile-是什么-可以保证有序性吗"><a href="#8-volatile-是什么-可以保证有序性吗" class="headerlink" title="8.volatile 是什么?可以保证有序性吗?"></a>8.volatile 是什么?可以保证有序性吗?</h2><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语 义： </p>
<p>1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他 线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存。 </p>
<p>2）禁止进行指令重排序。 volatile 不是原子性操作 当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果 已经对后面的操作可见；在其后面的操作肯定还没有进行；</p>
<h2 id="9-Thread-类中的start-和-run-方法有什么区别？"><a href="#9-Thread-类中的start-和-run-方法有什么区别？" class="headerlink" title="9.Thread 类中的start() 和 run() 方法有什么区别？"></a>9.Thread 类中的start() 和 run() 方法有什么区别？</h2><p>start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果 不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会 启动新线程 。</p>
<h2 id="10-线程中并发锁"><a href="#10-线程中并发锁" class="headerlink" title="10.线程中并发锁"></a>10.线程中并发锁</h2><blockquote>
<h3 id="面试官：讲一下synchronized关键字的底层原理？"><a href="#面试官：讲一下synchronized关键字的底层原理？" class="headerlink" title="面试官：讲一下synchronized关键字的底层原理？"></a><strong>面试官</strong>：讲一下synchronized关键字的底层原理？</h3><p><strong>候选人</strong>：</p>
<p>嗯~~好的，</p>
<p>synchronized 底层使用的JVM级别中的Monitor 来决定当前线程是否获得了锁，如果某一个线程获得了锁，在没有释放锁之前，其他线程是不能或得到锁的。synchronized 属于悲观锁。</p>
<p>synchronized 因为需要依赖于JVM级别的Monitor ，相对性能也比较低。</p>
<h3 id="面试官：好的，你能具体说下Monitor-吗？"><a href="#面试官：好的，你能具体说下Monitor-吗？" class="headerlink" title="面试官：好的，你能具体说下Monitor 吗？"></a><strong>面试官</strong>：好的，你能具体说下Monitor 吗？</h3><p><strong>候选人</strong>：</p>
<p>monitor对象存在于每个Java对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因</p>
<p>monitor内部维护了三个变量</p>
<ul>
<li><p>WaitSet：保存处于Waiting状态的线程</p>
</li>
<li><p>EntryList：保存处于Blocked状态的线程</p>
</li>
<li><p>Owner：持有锁的线程</p>
</li>
</ul>
<p>只有一个线程获取到的标志就是在monitor中设置成功了Owner，一个monitor中只能有一个Owner</p>
<p>在上锁的过程中，如果有其他线程也来抢锁，则进入EntryList 进行阻塞，当获得锁的线程执行完了，释放了锁，就会唤醒EntryList 中等待的线程竞争锁，竞争的时候是非公平的。</p>
<h3 id="面试官：好的，那关于synchronized-的锁升级的情况了解吗？"><a href="#面试官：好的，那关于synchronized-的锁升级的情况了解吗？" class="headerlink" title="面试官：好的，那关于synchronized 的锁升级的情况了解吗？"></a><strong>面试官</strong>：好的，那关于synchronized 的锁升级的情况了解吗？</h3><p><strong>候选人</strong>：</p>
<p>嗯，知道一些（要谦虚）</p>
<p>Java中的synchronized有偏向锁、轻量级锁、重量级锁三种形式，分别对应了锁只被一个线程持有、不同线程交替持有锁、多线程竞争锁三种情况。</p>
<p>重量级锁：底层使用的Monitor实现，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。</p>
<p>轻量级锁：线程加锁的时间是错开的（也就是没有竞争），可以使用轻量级锁来优化。轻量级修改了对象头的锁标志，相对重量级锁性能提升很多。每次修改都是CAS操作，保证原子性</p>
<p>偏向锁：一段很长的时间内都只被一个线程使用锁，可以使用了偏向锁，在第一次获得锁时，会有一个CAS操作，之后该线程再获取锁，只需要判断mark word中是否是自己的线程id即可，而不是开销相对较大的CAS命令</p>
<p>一旦锁发生了竞争，都会升级为重量级锁</p>
<h3 id="面试官：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？"><a href="#面试官：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？" class="headerlink" title="面试官：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？"></a><strong>面试官</strong>：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？</h3><p><strong>候选人</strong>：</p>
<p>嗯，其实，在高并发下，我们可以采用ReentrantLock来加锁。</p>
<p><strong>面试官</strong>：嗯，那你说下ReentrantLock的使用方式和底层原理？</p>
<p><strong>候选人</strong>：</p>
<p>好的，</p>
<p>ReentrantLock是一个可重入锁:，调用 lock 方 法获取了锁之后，再次调用 lock，是不会再阻塞，内部直接增加重入次数 就行了，标识这个线程已经重复获取一把锁而不需要等待锁的释放。</p>
<p>ReentrantLock是属于juc报下的类，属于api层面的锁，跟synchronized一样，都是悲观锁。通过lock()用来获取锁，unlock()释放锁。</p>
<p>它的底层实现原理主要利用<strong>CAS+AQS队列</strong>来实现。它支持公平锁和非公平锁，两者的实现类似</p>
<p>构造方法接受一个可选的公平参数（<strong>默认非公平锁</strong>），当设置为true时，表示公平锁，否则为非公平锁。公平锁的效率往往没有非公平锁的效率高。</p>
<h3 id="synchronized和Lock有什么区别"><a href="#synchronized和Lock有什么区别" class="headerlink" title="synchronized和Lock有什么区别 ?"></a>synchronized和Lock有什么区别 ?</h3><p>第一，语法层面</p>
<ul>
<li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现，退出同步代码块锁会自动释放</li>
<li>Lock 是接口，源码由 jdk 提供，用 java 语言实现，需要手动调用 unlock 方法释放锁</li>
</ul>
<p>第二，功能层面</p>
<ul>
<li>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能</li>
<li>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量，同时Lock 可以实现不同的场景，如 ReentrantLock， ReentrantReadWriteLock</li>
</ul>
<p>第三，性能层面</p>
<ul>
<li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li>
<li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li>
</ul>
<h3 id="死锁产生的条件是什么？"><a href="#死锁产生的条件是什么？" class="headerlink" title="死锁产生的条件是什么？"></a>死锁产生的条件是什么？</h3><p>嗯，是这样的，一个线程需要同时获取多把锁，这时就容易发生死锁，举个例子来说：</p>
<p>t1 线程获得A对象锁，接下来想获取B对象的锁</p>
<p>t2 线程获得B对象锁，接下来想获取A对象的锁 </p>
<p>这个时候t1线程和t2线程都在互相等待对方的锁，就产生了死锁</p>
<h3 id="面试官：线程池的种类有哪些？"><a href="#面试官：线程池的种类有哪些？" class="headerlink" title="面试官：线程池的种类有哪些？"></a><strong>面试官</strong>：线程池的种类有哪些？</h3><p><strong>候选人</strong>：</p>
<p>嗯！是这样</p>
<p>在jdk中默认提供了4中方式创建线程池</p>
<p>第一个是：newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回 收空闲线程，若无可回收，则新建线程。 </p>
<p>第二个是：newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列 中等待。 </p>
<p>第三个是：newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。 </p>
<p>第四个是：newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p>
<h3 id="面试官：线程池的核心参数有哪些？"><a href="#面试官：线程池的核心参数有哪些？" class="headerlink" title="面试官：线程池的核心参数有哪些？"></a><strong>面试官</strong>：线程池的核心参数有哪些？</h3><p><strong>候选人</strong>：</p>
<p>在线程池中一共有7个核心参数：</p>
<ol>
<li><p>corePoolSize 核心线程数目 - 池中会保留的最多线程数</p>
</li>
<li><p>maximumPoolSize 最大线程数目 - 核心线程+救急线程的最大数目</p>
</li>
<li><p>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放</p>
</li>
<li><p>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等</p>
</li>
<li><p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p>
</li>
<li><p>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等</p>
</li>
<li><p>handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略</p>
</li>
</ol>
<p> 在拒绝策略中又有4中拒绝策略</p>
<p> 当线程数过多以后，第一种是抛异常、第二种是由调用者执行任务、第三是丢弃当前的任务，第四是丢弃最早排队任务。默认是直接抛异常。</p>
<h3 id="面试官：如何确定核心线程池呢？"><a href="#面试官：如何确定核心线程池呢？" class="headerlink" title="面试官：如何确定核心线程池呢？"></a><strong>面试官</strong>：如何确定核心线程池呢？</h3><p><strong>候选人</strong>：</p>
<p>是这样的，我们公司当时有一些规范，为了减少线程上下文的切换，要根据当时部署的服务器的CPU核数来决定，我们规则是：CPU核数+1就是最终的核心线程数。</p>
<h3 id="面试官：线程池的执行原理知道吗？"><a href="#面试官：线程池的执行原理知道吗？" class="headerlink" title="面试官：线程池的执行原理知道吗？"></a><strong>面试官</strong>：线程池的执行原理知道吗？</h3><p><strong>候选人</strong>：</p>
<p>嗯~，它是这样的</p>
<p>首先判断线程池里的核心线程是否都在执行任务，如果不是则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队 列里。如果工作队列满了，则判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任 务。如果已经满了，则交给拒绝策略来处理这个任务。</p>
<h3 id="面试官：为什么不建议使用Executors创建线程池呢？"><a href="#面试官：为什么不建议使用Executors创建线程池呢？" class="headerlink" title="面试官：为什么不建议使用Executors创建线程池呢？"></a><strong>面试官</strong>：为什么不建议使用Executors创建线程池呢？</h3><p><strong>候选人</strong>：</p>
<p>主要原因是如果使用Executors创建线程池的话，它允许的请求队列默认长度是Integer.MAX_VALUE，这样的话，有可能导致堆积大量的请求，从而导致OOM（内存溢出）。</p>
<p>所以，我们一般推荐使用ThreadPoolExecutor来创建线程池，这样可以明确规定线程池的参数，避免资源的耗尽。</p>
</blockquote>
<h1 id="sql面试题"><a href="#sql面试题" class="headerlink" title="sql面试题"></a>sql面试题</h1><h2 id="drop、delete-与-truncate-区别？"><a href="#drop、delete-与-truncate-区别？" class="headerlink" title="drop、delete 与 truncate 区别？"></a><a href="https://javaguide.cn/database/basis.html#drop%E3%80%81delete-%E4%B8%8E-truncate-%E5%8C%BA%E5%88%AB">drop、delete 与 truncate 区别？</a></h2><ul>
<li><code>drop</code>(丢弃数据): <code>drop table 表名</code> ，直接将表都删除掉，在删除表的时候使用。</li>
<li><code>truncate</code> (清空数据) : <code>truncate table 表名</code> ，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。</li>
<li><code>delete</code>（删除数据） : <code>delete from 表名 where 列名=值</code>，删除某一行的数据，如果不加 <code>where</code> 子句和<code>truncate table 表名</code>作用类似。</li>
</ul>
<p><code>truncate</code> 和不带 <code>where</code>子句的 <code>delete</code>、以及 <code>drop</code> 都会删除表内的数据，但是 <strong><code>truncate</code> 和 <code>delete</code> 只删除数据不删除表的结构(定义)，执行 <code>drop</code> 语句，此表的结构也会删除，也就是执行<code>drop</code> 之后对应的表不复存在</strong></p>
<h2 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a><a href="#sql-%E5%88%86%E7%B1%BB">SQL 分类</a></h2><h4 id="数据定义语言（DDL）"><a href="#数据定义语言（DDL）" class="headerlink" title="数据定义语言（DDL）"></a><a href="#%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80-ddl">数据定义语言（DDL）</a></h4><p>数据定义语言（Data Definition Language，DDL）是 SQL 语言集中负责数据结构定义与数据库对象定义的语言。</p>
<p>DDL 的主要功能是<strong>定义数据库对象</strong>。</p>
<p>DDL 的核心指令是 <code>CREATE</code>、<code>ALTER</code>、<code>DROP</code>。</p>
<h4 id="数据操纵语言（DML）"><a href="#数据操纵语言（DML）" class="headerlink" title="数据操纵语言（DML）"></a><a href="#%E6%95%B0%E6%8D%AE%E6%93%8D%E7%BA%B5%E8%AF%AD%E8%A8%80-dml">数据操纵语言（DML）</a></h4><p>数据操纵语言（Data Manipulation Language, DML）是用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句。</p>
<p>DML 的主要功能是 <strong>访问数据</strong>，因此其语法都是以<strong>读写数据库</strong>为主。</p>
<p>DML 的核心指令是 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>SELECT</code>。这四个指令合称 CRUD(Create, Read, Update, Delete)，即增删改查。</p>
<h4 id="事务控制语言（TCL）"><a href="#事务控制语言（TCL）" class="headerlink" title="事务控制语言（TCL）"></a><a href="#%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80-tcl">事务控制语言（TCL）</a></h4><p>事务控制语言 (Transaction Control Language, TCL) 用于<strong>管理数据库中的事务</strong>。这些用于管理由 DML 语句所做的更改。它还允许将语句分组为逻辑事务。</p>
<p>TCL 的核心指令是 <code>COMMIT</code>、<code>ROLLBACK</code>。</p>
<h4 id="数据控制语言（DCL）"><a href="#数据控制语言（DCL）" class="headerlink" title="数据控制语言（DCL）"></a><a href="#%E6%95%B0%E6%8D%AE%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80-dcl">数据控制语言（DCL）</a></h4><p>数据控制语言 (Data Control Language, DCL) 是一种可对数据访问权进行控制的指令，它可以控制特定用户账户对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权。</p>
<p>DCL 的核心指令是 <code>GRANT</code>、<code>REVOKE</code>。</p>
<p>DCL 以<strong>控制用户的访问权限</strong>为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有：<code>CONNECT</code>、<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>EXECUTE</code>、<code>USAGE</code>、<code>REFERENCES</code>。</p>
<p>根据不同的 DBMS 以及不同的安全性实体，其支持的权限控制也有所不同。</p>
<hr>
<h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p><strong>插入完整的行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 插入一行</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;xxxx@163.com&#x27;</span>);</span><br><span class="line"># 插入多行</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;xxxx@163.com&#x27;</span>), (<span class="number">12</span>, <span class="string">&#x27;user1&#x27;</span>, <span class="string">&#x27;user1&#x27;</span>, <span class="string">&#x27;xxxx@163.com&#x27;</span>), (<span class="number">18</span>, <span class="string">&#x27;user2&#x27;</span>, <span class="string">&#x27;user2&#x27;</span>, <span class="string">&#x27;xxxx@163.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>插入查询出来的数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(username)</span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> account;</span><br></pre></td></tr></table></figure>

<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a><a href="https://javaguide.cn/database/sql/sql-syntax-summary.html#%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE">更新数据</a></h3><p><code>UPDATE</code> 语句用于更新表中的记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> username<span class="operator">=</span><span class="string">&#x27;robot&#x27;</span>, password<span class="operator">=</span><span class="string">&#x27;robot&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a><a href="https://javaguide.cn/database/sql/sql-syntax-summary.html#%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE">删除数据</a></h3><ul>
<li><code>DELETE</code> 语句用于删除表中的记录。</li>
<li><code>TRUNCATE TABLE</code> 可以清空表，也就是删除所有行。</li>
</ul>
<p><strong>删除表中的指定数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;robot&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>清空表中的数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a><a href="#%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE">查询数据</a></h3><p><code>SELECT</code> 语句用于从数据库中查询数据。</p>
<p><code>DISTINCT</code> 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同。</p>
<p><code>LIMIT</code> 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p>
<ul>
<li><code>ASC</code>：升序（默认）</li>
<li><code>DESC</code>：降序</li>
</ul>
<p><strong>查询多列</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><strong>查询不同的值</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">vend_id <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<p><strong>限制查询结果</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回前 5 行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable LIMIT <span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable LIMIT <span class="number">0</span>, <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 返回第 3 ~ 5 行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable LIMIT <span class="number">2</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a><a href="#%E6%8E%92%E5%BA%8F">排序</a></h2><p><code>order by</code> 用于对结果集按照一个列或者多个列进行排序。默认按照升序对记录进行排序，如果需要按照降序对记录进行排序，可以使用 <code>desc</code> 关键字。</p>
<p><code>order by</code> 对多列排序的时候，先排序的列放前面，后排序的列放后面。并且，不同的列可以有不同的排序规则。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>

<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a><a href="#%E5%88%86%E7%BB%84">分组</a></h2><p>**<code>group by</code>**：</p>
<ul>
<li><code>group by</code> 子句将记录分组到汇总行中。</li>
<li><code>group by</code> 为每个组返回一个记录。</li>
<li><code>group by</code> 通常还涉及聚合<code>count</code>，<code>max</code>，<code>sum</code>，<code>avg</code> 等。</li>
<li><code>group by</code> 可以按一列或多列进行分组。</li>
<li><code>group by</code> 按分组字段进行排序后，<code>order by</code> 可以以汇总字段来进行排序。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, <span class="built_in">COUNT</span>(cust_address) <span class="keyword">AS</span> addr_num</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>**<code>having</code>**：</p>
<ul>
<li><code>having</code> 用于对汇总的 <code>group by</code> 结果进行过滤。</li>
<li><code>having</code> 一般都是和 <code>group by</code> 连用。</li>
<li><code>where</code> 和 <code>having</code> 可以在相同的查询中。</li>
</ul>
<p><strong>使用 WHERE 和 HAVING 过滤数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) 是一个聚合函数，用于统计满足条件的行数</span><br><span class="line"><span class="keyword">SELECT</span> cust_name, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a><a href="#like">LIKE</a></h2><ul>
<li><code>LIKE</code> 操作符在 <code>WHERE</code> 子句中使用，作用是确定字符串是否匹配模式。</li>
<li>只有字段是文本值时才使用 <code>LIKE</code>。</li>
<li><code>LIKE</code> 支持两个通配符匹配选项：<code>%</code> 和 <code>_</code>。</li>
<li>不要滥用通配符，通配符位于开头处匹配会非常慢。</li>
<li><code>%</code> 表示任何字符出现任意次数。</li>
<li><code>_</code> 表示任何字符出现一次。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;%bean bag%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;__ inch teddy bear&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectPermsByUserId&quot; resultType<span class="operator">=</span>&quot;java.lang.String&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">DISTINCT</span> sm.perms</span><br><span class="line">        <span class="keyword">from</span> hth_blog.sys_user_role sur</span><br><span class="line">                 <span class="keyword">left</span> <span class="keyword">join</span> hth_blog.sys_role_menu srm <span class="keyword">on</span> sur.role_id <span class="operator">=</span> srm.role_id</span><br><span class="line">                 <span class="keyword">left</span> <span class="keyword">join</span> hth_blog.sys_menu sm <span class="keyword">on</span> srm.menu_id <span class="operator">=</span> sm.id</span><br><span class="line">        <span class="keyword">where</span> sur.user_id <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">          <span class="keyword">and</span> sm.menu_type <span class="keyword">in</span> (<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">          <span class="keyword">and</span> sm.status <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">          <span class="keyword">and</span> sm.del_flag <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectAllRouterMenu&quot; resultType<span class="operator">=</span>&quot;com.hth.domain.vo.MenuVo&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">DISTINCT</span> m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,<span class="string">&#x27;&#x27;</span>) <span class="keyword">AS</span> perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            hth_blog.sys_menu m</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            m.menu_type <span class="keyword">IN</span> (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;M&#x27;</span>) <span class="keyword">AND</span></span><br><span class="line">            m.status <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span></span><br><span class="line">            m.del_flag <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">            m.parent_id,m.order_num</span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectRouterMenuTreeByUserId&quot; resultType<span class="operator">=</span>&quot;com.hth.domain.vo.MenuVo&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">DISTINCT</span> m.id, m.parent_id, m.menu_name, m.path, m.component, m.visible, m.status, IFNULL(m.perms,<span class="string">&#x27;&#x27;</span>) <span class="keyword">AS</span> perms, m.is_frame,  m.menu_type, m.icon, m.order_num, m.create_time</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            hth_blog.sys_user_role ur</span><br><span class="line">                <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> hth_blog.sys_role_menu rm <span class="keyword">ON</span> ur.`role_id` <span class="operator">=</span> rm.`role_id`</span><br><span class="line">                <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> hth_blog.sys_menu m <span class="keyword">ON</span> m.`id` <span class="operator">=</span> rm.`menu_id`</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            ur.user_id <span class="operator">=</span> #&#123;userId&#125; <span class="keyword">AND</span></span><br><span class="line">            m.menu_type <span class="keyword">IN</span> (<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;M&#x27;</span>) <span class="keyword">AND</span></span><br><span class="line">            m.status <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span></span><br><span class="line">            m.del_flag <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">            m.parent_id,m.order_num</span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectMenuListByRoleId&quot; resultType<span class="operator">=</span>&quot;java.lang.Long&quot; parameterType<span class="operator">=</span>&quot;java.lang.Long&quot;<span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">select</span> m.id</span><br><span class="line">        <span class="keyword">from</span> hth_blog.sys_menu m</span><br><span class="line">                 <span class="keyword">left</span> <span class="keyword">join</span> hth_blog.sys_role_menu rm <span class="keyword">on</span> m.id <span class="operator">=</span> rm.menu_id</span><br><span class="line">        <span class="keyword">where</span> rm.role_id <span class="operator">=</span> #&#123;roleId&#125;</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> m.parent_id, m.order_num</span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a><a href="https://javaguide.cn/database/sql/sql-syntax-summary.html#%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E8%A1%A8">修改数据表</a></h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">添加列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> age <span class="type">int</span>(<span class="number">3</span>);</span><br><span class="line">删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> age;</span><br><span class="line">修改列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> age tinyint;</span><br><span class="line">添加主键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id);</span><br><span class="line">删除主键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>

<h2 id="索引（INDEX）"><a href="#索引（INDEX）" class="headerlink" title="索引（INDEX）"></a><a href="#%E7%B4%A2%E5%BC%95-index">索引（INDEX）</a></h2><p><strong>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。</strong></p>
<p>索引的作用就相当于书的目录。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">删除索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX user_index</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">user</span> (id);</span><br><span class="line">添加索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">ADD</span> INDEX user_index(id)</span><br><span class="line">创建唯一索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX user_index</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">user</span> (id);</span><br><span class="line">删除索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX user_index;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Mysql面试题"><a href="#Mysql面试题" class="headerlink" title="Mysql面试题"></a>Mysql面试题</h1><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><p>1、查询语句中不要使用select *</p>
<p> 2、尽量减少子查询，使用关联查询（left join,right join,inner join）替代 </p>
<p>3、减少使用IN或者NOT IN ,使用exists，not exists或者关联查询语句替代 </p>
<p>4、or 的查询尽量用 union或者union all 代替(在确认没有重复数据或者不用剔除重复数据时，union all会更好) </p>
<p>5、应尽量避免在 where 子句中使用!&#x3D;或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。 </p>
<p>6、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： select id from t where num is null 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： select id from t where num&#x3D;0</p>
<h2 id="了解过索引吗？"><a href="#了解过索引吗？" class="headerlink" title="了解过索引吗？"></a>了解过索引吗？</h2><p>索引在项目中还是比较常见的，它是帮助MySQL高效获取数据的数据结构，主要是用来提高数据检索的效率，降低数据库的IO成本，同时通过索引列对数据进行排序，降低数据排序的成本，也能降低了CPU的消耗</p>
<h2 id="事务的特性是什么？"><a href="#事务的特性是什么？" class="headerlink" title="事务的特性是什么？"></a>事务的特性是什么？</h2><p><strong>原子性</strong>（<code>Atomicity</code>）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</p>
<p><strong>一致性</strong>（<code>Consistency</code>）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</p>
<p><strong>隔离性</strong>（<code>Isolation</code>）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</p>
<p><strong>持久性</strong>（<code>Durability</code>）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p>
<p><strong>只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！</strong></p>
<h2 id="并发事务带来哪些问题？"><a href="#并发事务带来哪些问题？" class="headerlink" title="并发事务带来哪些问题？"></a>并发事务带来哪些问题？</h2><h4 id="脏读（Dirty-read）"><a href="#脏读（Dirty-read）" class="headerlink" title="脏读（Dirty read）"></a><a href="#%E8%84%8F%E8%AF%BB-dirty-read">脏读（Dirty read）</a></h4><p>一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交。这时另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，那第二个事务读取到的就是脏数据，这也就是脏读的由来。</p>
<p>例如：事务 1 读取某表中的数据 A&#x3D;20，事务 1 修改 A&#x3D;A-1，事务 2 读取到 A &#x3D; 19,事务 1 回滚导致对 A 的修改并未提交到数据库， A 的值还是 20。</p>
<h4 id="丢失修改（Lost-to-modify）"><a href="#丢失修改（Lost-to-modify）" class="headerlink" title="丢失修改（Lost to modify）"></a><a href="#%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9-lost-to-modify">丢失修改（Lost to modify）</a></h4><p>在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p>
<p>例如：事务 1 读取某表中的数据 A&#x3D;20，事务 2 也读取 A&#x3D;20，事务 1 先修改 A&#x3D;A-1，事务 2 后来也修改 A&#x3D;A-1，最终结果 A&#x3D;19，事务 1 的修改被丢失。</p>
<h4 id="不可重复读（Unrepeatable-read）"><a href="#不可重复读（Unrepeatable-read）" class="headerlink" title="不可重复读（Unrepeatable read）"></a><a href="#%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB-unrepeatable-read">不可重复读（Unrepeatable read）</a></h4><p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>
<p>例如：事务 1 读取某表中的数据 A&#x3D;20，事务 2 也读取 A&#x3D;20，事务 1 修改 A&#x3D;A-1，事务 2 再次读取 A &#x3D;19，此时读取的结果和第一次读取的结果不同。</p>
<h4 id="幻读（Phantom-read）"><a href="#幻读（Phantom-read）" class="headerlink" title="幻读（Phantom read）"></a><a href="#%E5%B9%BB%E8%AF%BB-phantom-read">幻读（Phantom read）</a></h4><p>幻读与不可重复读类似。它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>
<p>例如：事务 2 读取某个范围的数据，事务 1 在这个范围插入了新的数据，事务 2 再次读取这个范围的数据发现相比于第一次读取的结果多了新的数据。</p>
<h2 id="并发事务的控制方式有哪些？"><a href="#并发事务的控制方式有哪些？" class="headerlink" title="并发事务的控制方式有哪些？"></a><a href="#%E5%B9%B6%E5%8F%91%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B">并发事务的控制方式有哪些？</a></h2><p>MySQL 中并发事务的控制方式无非就两种：<strong>锁</strong> 和 <strong>MVCC</strong>。锁可以看作是悲观控制的模式，多版本并发控制（MVCC，Multiversion concurrency control）可以看作是乐观控制的模式。</p>
<p><strong>锁</strong> 控制方式下会通过锁来显示控制共享资源而不是通过调度手段，MySQL 中主要是通过 <strong>读写锁</strong> 来实现并发控制。</p>
<ul>
<li><strong>共享锁（S 锁）</strong>：又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。</li>
<li><strong>排他锁（X 锁）</strong>：又称写锁&#x2F;独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条记录加任何类型的锁（锁不兼容）。</li>
</ul>
<h2 id="SQL-标准定义了哪些事务隔离级别"><a href="#SQL-标准定义了哪些事务隔离级别" class="headerlink" title="SQL 标准定义了哪些事务隔离级别?"></a><a href="#sql-%E6%A0%87%E5%87%86%E5%AE%9A%E4%B9%89%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">SQL 标准定义了哪些事务隔离级别?</a></h2><p>SQL 标准定义了四个隔离级别：</p>
<ul>
<li><strong>READ-UNCOMMITTED(读取未提交)</strong> ：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li>
<li><strong>READ-COMMITTED(读取已提交)</strong> ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li>
<li><strong>REPEATABLE-READ(可重复读)</strong> ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li>
<li><strong>SERIALIZABLE(可串行化)</strong> ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li>
</ul>
<h2 id="MySQL-的默认隔离级别是什么"><a href="#MySQL-的默认隔离级别是什么" class="headerlink" title="MySQL 的默认隔离级别是什么?"></a><a href="https://javaguide.cn/database/mysql/mysql-questions-01.html#mysql-%E7%9A%84%E9%BB%98%E8%AE%A4%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">MySQL 的默认隔离级别是什么?</a></h2><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong></p>
<h2 id="MySQL主从同步原理"><a href="#MySQL主从同步原理" class="headerlink" title="MySQL主从同步原理"></a>MySQL主从同步原理</h2><p><strong>候选人</strong>：MySQL主从复制的核心就是二进制日志(DDL（数据定义语言）语句和 DML（数据操纵语言）语句)，它的步骤是这样的：</p>
<p>第一：主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</p>
<p>第二：从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。</p>
<p>第三：从库重做中继日志中的事件，将改变反映它自己的数据</p>
<h1 id="Redis相关面试题"><a href="#Redis相关面试题" class="headerlink" title="Redis相关面试题"></a>Redis相关面试题</h1><blockquote>
<h3 id="面试官：什么是缓存穿透-怎么解决"><a href="#面试官：什么是缓存穿透-怎么解决" class="headerlink" title="面试官：什么是缓存穿透 ? 怎么解决 ?"></a><strong>面试官</strong>：什么是缓存穿透 ? 怎么解决 ?</h3><p><strong>候选人</strong>：</p>
<p>嗯~~，我想一下</p>
<p>缓存穿透是指查询一个一定<strong>不存在</strong>的数据，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，可能导致 DB 挂掉。这种情况大概率是遭到了攻击。</p>
<p>解决方案的话，我们通常都会用布隆过滤器来解决它</p>
<h3 id="面试官：好的，你能介绍一下布隆过滤器吗？"><a href="#面试官：好的，你能介绍一下布隆过滤器吗？" class="headerlink" title="面试官：好的，你能介绍一下布隆过滤器吗？"></a><strong>面试官</strong>：好的，你能介绍一下布隆过滤器吗？</h3><p><strong>候选人</strong>：</p>
<p>嗯，是这样~</p>
<p>布隆过滤器主要是用于检索一个元素是否在一个集合中。我们当时使用的是redisson实现的布隆过滤器。</p>
<p>它的底层主要是先去初始化一个比较大数组，里面存放的二进制0或1。在一开始都是0，当一个key来了之后经过3次hash计算，模于数组长度找到数据的下标然后把数组中原来的0改为1，这样的话，三个数组的位置就能标明一个key的存在。查找的过程也是一样的。</p>
<p>当然是有缺点的，布隆过滤器有可能会产生一定的误判，我们一般可以设置这个误判率，大概不会超过5%，其实这个误判是必然存在的，要不就得增加数组的长度，其实已经算是很划分了，5%以内的误判率一般的项目也能接受，不至于高并发下压倒数据库。</p>
<h3 id="面试官：什么是缓存击穿-怎么解决"><a href="#面试官：什么是缓存击穿-怎么解决" class="headerlink" title="面试官：什么是缓存击穿 ? 怎么解决 ?"></a><strong>面试官</strong>：什么是缓存击穿 ? 怎么解决 ?</h3><p><strong>候选人</strong>：</p>
<p>嗯！！</p>
<p>缓存击穿的意思是对于设置了过期时间的key，缓存在某个时间点过期的时候，恰好这时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把 DB 压垮。</p>
<p>解决方案有两种方式：</p>
<p>第一可以使用互斥锁：当缓存失效时，不立即去load db，先使用如 Redis 的 setnx 去设置一个互斥锁，当操作成功返回时再进行 load db的操作并回设缓存，否则重试get缓存的方法</p>
<p>第二种方案可以设置当前key逻辑过期，大概是思路如下：</p>
<p>①：在设置key的时候，设置一个过期时间字段一块存入缓存中，不给当前key设置过期时间</p>
<p>②：当查询的时候，从redis取出数据后判断时间是否过期</p>
<p>③：如果过期则开通另外一个线程进行数据同步，当前线程正常返回数据，这个数据不是最新</p>
<p>当然两种方案各有利弊：</p>
<p>如果选择数据的强一致性，建议使用分布式锁的方案，性能上可能没那么高，锁需要等，也有可能产生死锁的问题</p>
<p>如果选择key的逻辑删除，则优先考虑的高可用性，性能比较高，但是数据同步这块做不到强一致。</p>
<h3 id="面试官：什么是缓存雪崩-怎么解决"><a href="#面试官：什么是缓存雪崩-怎么解决" class="headerlink" title="面试官：什么是缓存雪崩 ? 怎么解决 ?"></a><strong>面试官</strong>：什么是缓存雪崩 ? 怎么解决 ?</h3><p><strong>候选人</strong>：</p>
<p>嗯！！</p>
<p>缓存雪崩意思是设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB 瞬时压力过重雪崩。与缓存击穿的区别：雪崩是很多key，击穿是某一个key缓存。</p>
<p>解决方案主要是可以将缓存失效时间分散开，比如可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<h3 id="面试官：redis做为缓存，mysql的数据如何与redis进行同步呢？（双写一致性）"><a href="#面试官：redis做为缓存，mysql的数据如何与redis进行同步呢？（双写一致性）" class="headerlink" title="面试官：redis做为缓存，mysql的数据如何与redis进行同步呢？（双写一致性）"></a><strong>面试官</strong>：redis做为缓存，mysql的数据如何与redis进行同步呢？（双写一致性）</h3><p><strong>候选人</strong>：嗯！就说我最近做的这个项目，里面有xxxx（<strong>根据自己的简历上写</strong>）的功能，需要让数据库与redis高度保持一致，因为要求时效性比较高，我们当时采用的读写锁保证的强一致性。</p>
<p>我们采用的是redisson实现的读写锁，在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写，读读都互斥，这样就能保证在写数据的同时是不会让其他线程读数据的，避免了脏数据。这里面需要注意的是读方法和写方法上需要使用同一把锁才行。</p>
<h3 id="面试官：那这个排他锁是如何保证读写、读读互斥的呢？"><a href="#面试官：那这个排他锁是如何保证读写、读读互斥的呢？" class="headerlink" title="面试官：那这个排他锁是如何保证读写、读读互斥的呢？"></a><strong>面试官</strong>：那这个排他锁是如何保证读写、读读互斥的呢？</h3><p><strong>候选人</strong>：其实排他锁底层使用也是setnx，保证了同时只能有一个线程操作锁住的方法</p>
<h3 id="面试官：你听说过延时双删吗？为什么不用它呢？"><a href="#面试官：你听说过延时双删吗？为什么不用它呢？" class="headerlink" title="面试官：你听说过延时双删吗？为什么不用它呢？"></a><strong>面试官</strong>：你听说过延时双删吗？为什么不用它呢？</h3><p><strong>候选人</strong>：延迟双删，如果是写操作，我们先把缓存中的数据删除，然后更新数据库，最后再延时删除缓存中的数据，其中这个延时多久不太好确定，在延时的过程中可能会出现脏数据，并不能保证强一致性，所以没有采用它。</p>
<h3 id="面试官：redis做为缓存，数据的持久化是怎么做的？"><a href="#面试官：redis做为缓存，数据的持久化是怎么做的？" class="headerlink" title="面试官：redis做为缓存，数据的持久化是怎么做的？"></a><strong>面试官</strong>：redis做为缓存，数据的持久化是怎么做的？</h3><p><strong>候选人</strong>：在Redis中提供了两种数据持久化的方式：1、RDB  2、AOF</p>
<h3 id="面试官：这两种持久化方式有什么区别呢？"><a href="#面试官：这两种持久化方式有什么区别呢？" class="headerlink" title="面试官：这两种持久化方式有什么区别呢？"></a><strong>面试官</strong>：这两种持久化方式有什么区别呢？</h3><p><strong>候选人</strong>：RDB是一个快照文件，它是把redis内存存储的数据写到磁盘上，当redis实例宕机恢复数据的时候，方便从RDB的快照文件中恢复数据。</p>
<p>AOF的含义是追加文件，当redis操作写命令的时候，都会存储这个文件中，当redis实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据</p>
<h3 id="面试官：这两种方式，哪种恢复的比较快呢？"><a href="#面试官：这两种方式，哪种恢复的比较快呢？" class="headerlink" title="面试官：这两种方式，哪种恢复的比较快呢？"></a><strong>面试官</strong>：这两种方式，哪种恢复的比较快呢？</h3><p><strong>候选人</strong>：RDB因为是二进制文件，在保存的时候体积也是比较小的，它恢复的比较快，但是它有可能会丢数据，我们通常在项目中也会使用AOF来恢复数据，虽然AOF恢复的速度慢一些，但是它丢数据的风险要小很多，在AOF文件中可以设置刷盘策略，我们当时设置的就是每秒批量写入一次命令</p>
<h3 id="面试官：Redis的数据过期策略有哪些"><a href="#面试官：Redis的数据过期策略有哪些" class="headerlink" title="面试官：Redis的数据过期策略有哪些 ?"></a><strong>面试官</strong>：Redis的数据过期策略有哪些 ?</h3><p><strong>候选人</strong>：</p>
<p>嗯~，在redis中提供了两种数据过期删除策略</p>
<p>第一种是惰性删除，在设置该key过期时间后，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该key。</p>
<p>第二种是 定期删除，就是说每隔一段时间，我们就对一些key进行检查，删除里面过期的key</p>
<p>定期清理的两种模式：</p>
<ul>
<li>SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件redis.conf 的 <strong>hz</strong> 选项来调整这个次数</li>
<li>FAST模式执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于2ms，每次耗时不超过1ms</li>
</ul>
<p>Redis的过期删除策略：<strong>惰性删除 + 定期删除</strong>两种策略进行配合使用。</p>
<h3 id="面试官：Redis的数据淘汰策略有哪些"><a href="#面试官：Redis的数据淘汰策略有哪些" class="headerlink" title="面试官：Redis的数据淘汰策略有哪些 ?"></a><strong>面试官</strong>：Redis的数据淘汰策略有哪些 ?</h3><p><strong>候选人</strong>：</p>
<p>嗯，这个在redis中提供了很多种，默认是noeviction，不删除任何数据，内部不足直接报错</p>
<p>是可以在redis的配置文件中进行设置的，里面有两个非常重要的概念，一个是LRU，另外一个是LFU</p>
<p>LRU的意思就是最少最近使用，用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</p>
<p>LFU的意思是最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高</p>
<p>我们在项目设置的allkeys-lru，挑选最近最少使用的数据淘汰，把一些经常访问的key留在redis中</p>
<h3 id="面试官：数据库有1000万数据-Redis只能缓存20w数据-如何保证Redis中的数据都是热点数据"><a href="#面试官：数据库有1000万数据-Redis只能缓存20w数据-如何保证Redis中的数据都是热点数据" class="headerlink" title="面试官：数据库有1000万数据 ,Redis只能缓存20w数据, 如何保证Redis中的数据都是热点数据 ?"></a><strong>面试官</strong>：数据库有1000万数据 ,Redis只能缓存20w数据, 如何保证Redis中的数据都是热点数据 ?</h3><p><strong>候选人</strong>：</p>
<p>嗯，我想一下~~</p>
<p>可以使用 allkeys-lru （挑选最近最少使用的数据淘汰）淘汰策略，那留下来的都是经常访问的热点数据</p>
<h3 id="面试官：Redis的内存用完了会发生什么？"><a href="#面试官：Redis的内存用完了会发生什么？" class="headerlink" title="面试官：Redis的内存用完了会发生什么？"></a><strong>面试官</strong>：Redis的内存用完了会发生什么？</h3><p><strong>候选人</strong>：</p>
<p>嗯~，这个要看redis的数据淘汰策略是什么，如果是默认的配置，redis内存用完以后则直接报错。我们当时设置的 allkeys-lru 策略。把最近最常访问的数据留在缓存中。</p>
<h3 id="面试官：Redis分布式锁如何实现"><a href="#面试官：Redis分布式锁如何实现" class="headerlink" title="面试官：Redis分布式锁如何实现 ?"></a><strong>面试官</strong>：Redis分布式锁如何实现 ?</h3><p><strong>候选人</strong>：<strong>基于SETNX命令的简单分布式锁</strong>：</p>
<ul>
<li>使用SETNX命令（SET if Not eXists）尝试在Redis中设置一个键值对，其中键是唯一标识锁的名称，值是一个随机生成的唯一标识符或者客户端标识符。</li>
<li>如果SETNX成功，表示获取到了锁，可以执行后续操作，并在执行完毕后使用DEL命令释放锁。</li>
<li>如果SETNX失败，表示锁已被其他客户端持有，不能获取到锁，需要等待一段时间后重试。</li>
</ul>
<h3 id="面试官：好的，那你如何控制Redis实现分布式锁有效时长呢？"><a href="#面试官：好的，那你如何控制Redis实现分布式锁有效时长呢？" class="headerlink" title="面试官：好的，那你如何控制Redis实现分布式锁有效时长呢？"></a><strong>面试官</strong>：好的，那你如何控制Redis实现分布式锁有效时长呢？</h3><p><strong>候选人</strong>：嗯，的确，redis的setnx指令不好控制这个问题，我们当时采用的redis的一个框架redisson实现的。</p>
<p>在redisson中需要手动加锁，并且可以控制锁的失效时间和等待时间，当锁住的一个业务还没有执行完成的时候，在redisson中引入了一个看门狗机制，就是说每隔一段时间就检查当前业务是否还持有锁，如果持有就增加加锁的持有时间，当业务执行完成之后需要使用释放锁就可以了</p>
<p>还有一个好处就是，在高并发下，一个业务有可能会执行很快，先客户1持有锁的时候，客户2来了以后并不会马上拒绝，它会自旋不断尝试获取锁，如果客户1释放之后，客户2就可以马上持有锁，性能也得到了提升。</p>
<h3 id="面试官：好的，redisson实现的分布式锁是可重入的吗？"><a href="#面试官：好的，redisson实现的分布式锁是可重入的吗？" class="headerlink" title="面试官：好的，redisson实现的分布式锁是可重入的吗？"></a><strong>面试官</strong>：好的，redisson实现的分布式锁是可重入的吗？</h3><p><strong>候选人</strong>：嗯，是可以重入的。这样做是为了避免死锁的产生。这个重入其实在内部就是判断是否是当前线程持有的锁，如果是当前线程持有的锁就会计数，如果释放锁就会在计算上减一。在存储数据的时候采用的hash结构，大key可以按照自己的业务进行定制，其中小key是当前线程的唯一标识，value是当前线程重入的次数</p>
<h3 id="面试官：redisson实现的分布式锁能解决主从一致性的问题吗"><a href="#面试官：redisson实现的分布式锁能解决主从一致性的问题吗" class="headerlink" title="面试官：redisson实现的分布式锁能解决主从一致性的问题吗"></a><strong>面试官</strong>：redisson实现的分布式锁能解决主从一致性的问题吗</h3><p><strong>候选人</strong>：这个是不能的，比如，当线程1加锁成功后，master节点数据会异步复制到slave节点，此时当前持有Redis锁的master节点宕机，slave节点被提升为新的master节点，假如现在来了一个线程2，再次加锁，会在新的master节点上加锁成功，这个时候就会出现两个节点同时持有一把锁的问题。</p>
<p>我们可以利用redisson提供的红锁来解决这个问题，它的主要作用是，不能只在一个redis实例上创建锁，应该是在多个redis实例上创建锁，并且要求在大多数redis节点上都成功创建锁，红锁中要求是redis的节点数量要过半。这样就能避免线程1加锁成功后master节点宕机导致线程2成功加锁到新的master节点上的问题了。</p>
<p>但是，如果使用了红锁，因为需要同时在多个节点上都添加锁，性能就变的很低了，并且运维维护成本也非常高，所以，我们一般在项目中也不会直接使用红锁，并且官方也暂时废弃了这个红锁</p>
<h3 id="面试官：好的，如果业务非要保证数据的强一致性，这个该怎么解决呢？"><a href="#面试官：好的，如果业务非要保证数据的强一致性，这个该怎么解决呢？" class="headerlink" title="面试官：好的，如果业务非要保证数据的强一致性，这个该怎么解决呢？"></a><strong>面试官</strong>：好的，如果业务非要保证数据的强一致性，这个该怎么解决呢？</h3><p><strong>候选人：</strong>嗯~，redis本身就是支持高可用的，做到强一致性，就非常影响性能，所以，如果有强一致性要求高的业务，建议使用zookeeper实现的分布式锁，它是可以保证强一致性的。</p>
<h3 id="面试官：Redis集群有哪些方案-知道嘛"><a href="#面试官：Redis集群有哪些方案-知道嘛" class="headerlink" title="面试官：Redis集群有哪些方案, 知道嘛 ?"></a><strong>面试官</strong>：Redis集群有哪些方案, 知道嘛 ?</h3><p><strong>候选人</strong>：嗯~~，在Redis中提供的集群方案总共有三种：主从复制、哨兵模式、Redis分片集群</p>
<h3 id="面试官：那你来介绍一下主从同步"><a href="#面试官：那你来介绍一下主从同步" class="headerlink" title="面试官：那你来介绍一下主从同步"></a><strong>面试官</strong>：那你来介绍一下主从同步</h3><p><strong>候选人</strong>：嗯，是这样的，单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，可以搭建主从集群，实现读写分离。一般都是一主多从，主节点负责写数据，从节点负责读数据，主节点写入数据之后，需要把数据同步到从节点中</p>
<h3 id="面试官：能说一下，主从同步数据的流程"><a href="#面试官：能说一下，主从同步数据的流程" class="headerlink" title="面试官：能说一下，主从同步数据的流程"></a><strong>面试官</strong>：能说一下，主从同步数据的流程</h3><p><strong>候选人</strong>：嗯~~，好！主从同步分为了两个阶段，一个是全量同步，一个是增量同步</p>
<p>全量同步是指从节点第一次与主节点建立连接的时候使用全量同步，流程是这样的：</p>
<p>第一：从节点请求主节点同步数据，其中从节点会携带自己的replication id和offset偏移量。</p>
<p>第二：主节点判断是否是第一次请求，主要判断的依据就是，主节点与从节点是否是同一个replication id，如果不是，就说明是第一次同步，那主节点就会把自己的replication id和offset发送给从节点，让从节点与主节点的信息保持一致。</p>
<p>第三：在同时主节点会执行bgsave，生成rdb文件后，发送给从节点去执行，从节点先把自己的数据清空，然后执行主节点发送过来的rdb文件，这样就保持了一致</p>
<p>当然，如果在rdb生成执行期间，依然有请求到了主节点，而主节点会以命令的方式记录到缓冲区，缓冲区是一个日志文件，最后把这个日志文件发送给从节点，这样就能保证主节点与从节点完全一致了，后期再同步数据的时候，都是依赖于这个日志文件，这个就是全量同步</p>
<p>增量同步指的是，当从节点服务重启之后，数据就不一致了，所以这个时候，从节点会请求主节点同步数据，主节点还是判断不是第一次请求，不是第一次就获取从节点的offset值，然后主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步</p>
<h3 id="面试官：怎么保证Redis的高并发高可用"><a href="#面试官：怎么保证Redis的高并发高可用" class="headerlink" title="面试官：怎么保证Redis的高并发高可用"></a><strong>面试官</strong>：怎么保证Redis的高并发高可用</h3><p><strong>候选人</strong>：首先可以搭建主从集群，再加上使用redis中的哨兵模式，哨兵模式可以实现主从集群的自动故障恢复，里面就包含了对主从服务的监控、自动故障恢复、通知；如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主；同时Sentinel也充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端，所以一般项目都会采用哨兵的模式来保证redis的高并发高可用</p>
<h3 id="面试官：你们使用redis是单点还是集群，哪种集群"><a href="#面试官：你们使用redis是单点还是集群，哪种集群" class="headerlink" title="面试官：你们使用redis是单点还是集群，哪种集群"></a><strong>面试官</strong>：你们使用redis是单点还是集群，哪种集群</h3><p><strong>候选人</strong>：嗯！，我们当时使用的是主从（1主1从）加哨兵。一般单节点不超过10G内存，如果Redis内存不足则可以给不同服务分配独立的Redis主从节点。尽量不做分片集群。因为集群维护起来比较麻烦，并且集群之间的心跳检测和数据通信会消耗大量的网络带宽，也没有办法使用lua脚本和事务</p>
<h3 id="面试官：redis集群脑裂，该怎么解决呢？"><a href="#面试官：redis集群脑裂，该怎么解决呢？" class="headerlink" title="面试官：redis集群脑裂，该怎么解决呢？"></a><strong>面试官</strong>：redis集群脑裂，该怎么解决呢？</h3><p><strong>候选人</strong>：嗯！ 这个在项目很少见，不过脑裂的问题是这样的，我们现在用的是redis的哨兵模式集群的</p>
<p>有的时候由于网络等原因可能会出现脑裂的情况，就是说，由于redis master节点和redis salve节点和sentinel处于不同的网络分区，使得sentinel没有能够心跳感知到master，所以通过选举的方式提升了一个salve为master，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在old master那里写入数据，新节点无法同步数据，当网络恢复后，sentinel会将old master降为salve，这时再从新master同步数据，这会导致old master中的大量数据丢失。</p>
<p>关于解决的话，我记得在redis的配置中可以设置：第一可以设置最少的salve节点个数，比如设置至少要有一个从节点才能同步数据，第二个可以设置主从数据复制和同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失</p>
<h3 id="面试官：redis的分片集群有什么作用"><a href="#面试官：redis的分片集群有什么作用" class="headerlink" title="面试官：redis的分片集群有什么作用"></a><strong>面试官</strong>：redis的分片集群有什么作用</h3><p><strong>候选人</strong>：分片集群主要解决的是，海量数据存储的问题，集群中有多个master，每个master保存不同数据，并且还可以给每个master设置多个slave节点，就可以继续增大集群的高并发能力。同时每个master之间通过ping监测彼此健康状态，就类似于哨兵模式了。当客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p>
<h3 id="面试官：Redis分片集群中数据是怎么存储和读取的？"><a href="#面试官：Redis分片集群中数据是怎么存储和读取的？" class="headerlink" title="面试官：Redis分片集群中数据是怎么存储和读取的？"></a><strong>面试官</strong>：Redis分片集群中数据是怎么存储和读取的？</h3><p><strong>候选人</strong>：</p>
<p>嗯~，在redis集群中是这样的</p>
<p>Redis 集群引入了哈希槽的概念，有 16384 个哈希槽，集群中每个主节点绑定了一定范围的哈希槽范围， key通过 CRC16 校验后对 16384 取模来决定放置哪个槽，通过槽找到对应的节点进行存储。</p>
<p>取值的逻辑是一样的</p>
<h3 id="面试官：Redis是单线程的，但是为什么还那么快？"><a href="#面试官：Redis是单线程的，但是为什么还那么快？" class="headerlink" title="面试官：Redis是单线程的，但是为什么还那么快？"></a><strong>面试官</strong>：Redis是单线程的，但是为什么还那么快？</h3><p><strong>候选人</strong>：</p>
<p>嗯，这个有几个原因吧~~~</p>
<p>1、完全基于内存的，C语言编写</p>
<p>2、采用单线程，避免不必要的上下文切换可竞争条件</p>
<p>3、使用多路I&#x2F;O复用模型，非阻塞IO</p>
<p>例如：bgsave 和 bgrewriteaof  都是在<strong>后台</strong>执行操作，不影响主线程的正常使用，不会产生阻塞</p>
<h3 id="面试官：能解释一下I-O多路复用模型？"><a href="#面试官：能解释一下I-O多路复用模型？" class="headerlink" title="面试官：能解释一下I&#x2F;O多路复用模型？"></a><strong>面试官</strong>：能解释一下I&#x2F;O多路复用模型？</h3><p><strong>候选人</strong>：嗯~~，I&#x2F;O多路复用是指利用单个线程来同时监听多个Socket ，并在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。目前的I&#x2F;O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。</p>
<p>其中Redis的网络模型就是使用I&#x2F;O多路复用结合事件的处理器来应对多个Socket请求，比如，提供了连接应答处理器、命令回复处理器，命令请求处理器；</p>
<p>在Redis6.0之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程</p>
<h3 id="如果有大量的-key-需要设置同一时间过期，一般需要注意什么？"><a href="#如果有大量的-key-需要设置同一时间过期，一般需要注意什么？" class="headerlink" title="如果有大量的 key 需要设置同一时间过期，一般需要注意什么？"></a>如果有大量的 key 需要设置同一时间过期，一般需要注意什么？</h3><p>如果大量的 key 过期时间设置的过于集中，到过期的那个时间点，redis 可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使 得过期时间分散一些。 </p>
</blockquote>
<h1 id="spring框架"><a href="#spring框架" class="headerlink" title="spring框架"></a>spring框架</h1><blockquote>
<h5 id="面试官：Spring框架中的单例bean是线程安全的吗？"><a href="#面试官：Spring框架中的单例bean是线程安全的吗？" class="headerlink" title="面试官：Spring框架中的单例bean是线程安全的吗？"></a><strong>面试官</strong>：Spring框架中的单例bean是线程安全的吗？</h5><p><strong>候选人</strong>：</p>
<p>嗯！</p>
<p>不是线程安全的，是这样的</p>
<p>当多用户同时请求一个服务时，容器会给每一个请求分配一个线程，这是多个线程会并发执行该请求对应的业务逻辑（成员方法），如果该处理逻辑中有对该单列状态的修改（体现为该单例的成员属性），则必须考虑线程同步问题。</p>
<p>Spring框架并没有对单例bean进行任何多线程的封装处理。关于单例bean的线程安全和并发问题需要开发者自行去搞定。</p>
<p>比如：我们通常在项目中使用的Spring bean都是不可可变的状态(比如Service类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。</p>
<p>如果你的bean有多种状态的话（比如 View Model对象），就需要自行保证线程安全。最浅显的解决办法就是将多态bean的作用由“<strong>singleton</strong>”变更为“<strong>prototype</strong>”。</p>
<h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><p>Spring的IoC（Inversion of Control，控制反转）是Spring框架的核心概念之一，它是一种设计原则，用于降低组件之间的耦合度。IoC的核心思想是将对象的创建和管理交给容器来负责，而不是在代码中直接创建和管理对象。</p>
<p>在Spring框架中，IoC容器负责创建、管理和装配应用中的各个组件（如bean）。当应用程序需要使用某个组件时，不再由应用程序自己创建该组件，而是由IoC容器来创建并且将其注入到需要的地方。</p>
<p>Spring框架实现IoC的方式主要有两种：</p>
<ol>
<li><strong>依赖注入（Dependency Injection，DI）</strong>：依赖注入是IoC的一种具体实现方式。在依赖注入中，组件之间的依赖关系由容器在运行时动态地注入到组件中。这种方式使得组件之间的耦合度降低，更容易进行单元测试和组件替换。Spring框架支持构造器注入、Setter方法注入、字段注入等多种方式进行依赖注入。</li>
<li><strong>控制反转（Inversion of Control，IoC）</strong>：IoC是一种更广义的设计原则，而依赖注入是IoC的一种具体实现方式。IoC的核心思想是将对象的创建和管理交给容器来负责，这种方式将组件之间的控制权反转给了容器，从而降低了组件之间的耦合度。</li>
</ol>
<p>Spring框架提供了多种IoC容器的实现，其中最常用的是BeanFactory和ApplicationContext。BeanFactory是IoC容器的基础接口，提供了最基本的IoC功能，而ApplicationContext在BeanFactory的基础上提供了更多的企业级特性，如国际化、事件发布、AOP等。</p>
<h3 id="面试官：什么是AOP"><a href="#面试官：什么是AOP" class="headerlink" title="面试官：什么是AOP"></a><strong>面试官</strong>：什么是AOP</h3><p><strong>候选人</strong>：</p>
<p>aop是面向切面编程，在spring中用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取公共模块复用，降低耦合，一般比如可以做为公共日志保存，事务处理等</p>
<h3 id="面试官：你们项目中有没有使用到AOP"><a href="#面试官：你们项目中有没有使用到AOP" class="headerlink" title="面试官：你们项目中有没有使用到AOP"></a><strong>面试官</strong>：你们项目中有没有使用到AOP</h3><p><strong>候选人</strong>：</p>
<p>我们当时在后台管理系统中，就是使用aop来记录了系统的操作日志</p>
<p>主要思路是这样的，使用aop中的环绕通知+切点表达式，这个表达式就是要找到要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，比如类信息、方法信息、注解、请求方式等，获取到这些参数以后，保存到数据库</p>
<h3 id="面试官：Spring中的事务是如何实现的"><a href="#面试官：Spring中的事务是如何实现的" class="headerlink" title="面试官：Spring中的事务是如何实现的"></a><strong>面试官</strong>：Spring中的事务是如何实现的</h3><p><strong>候选人</strong>：</p>
<p>spring实现的事务本质就是aop完成，对方法前后进行拦截，在执行方法之前开启事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>
<h3 id="面试官：Spring中事务失效的场景有哪些"><a href="#面试官：Spring中事务失效的场景有哪些" class="headerlink" title="面试官：Spring中事务失效的场景有哪些"></a><strong>面试官</strong>：Spring中事务失效的场景有哪些</h3><p><strong>候选人</strong>：</p>
<p>嗯！这个在项目中之前遇到过，我想想啊</p>
<p>第一个，如果方法上异常捕获处理，自己处理了异常，没有抛出，就会导致事务失效，所以一般处理了异常以后，别忘了跑出去就行了</p>
<p>第二个，如果方法抛出检查异常，如果报错也会导致事务失效，最后在spring事务的注解上，就是@Transactional上配置rollbackFor属性为Exception，这样别管是什么异常，都会回滚事务</p>
<p>第三，我之前还遇到过一个，如果方法上不是public修饰的，也会导致事务失效</p>
<p>嗯，就能想起来那么多</p>
<h3 id="面试官：Spring的bean的生命周期"><a href="#面试官：Spring的bean的生命周期" class="headerlink" title="面试官：Spring的bean的生命周期"></a><strong>面试官</strong>：Spring的bean的生命周期</h3><p><strong>候选人</strong>：</p>
<p>实例化：为 Bean 分配内存空间。</p>
<p>设置属性：将当前类依赖的 Bean 属性，进行注入和装配。</p>
<p>初始化：</p>
<ol>
<li>​	执行各种通知。</li>
<li>​	执行初始化的前置方法。</li>
<li>​	执行初始化方法。</li>
<li>​	执行初始化的后置方法。</li>
<li>​	使用 Bean：在程序中使用 Bean 对象。</li>
<li>​	销毁 Bean：将 Bean 对象进行销毁操作。</li>
</ol>
<h3 id="面试官：Spring中的循环引用"><a href="#面试官：Spring中的循环引用" class="headerlink" title="面试官：Spring中的循环引用"></a><strong>面试官</strong>：Spring中的循环引用</h3><p><strong>候选人</strong>：</p>
<p>嗯，好的，我来解释一下</p>
<p>循环依赖：循环依赖其实就是循环引用,也就是两个或两个以上的bean互相持有对方,最终形成闭环。比如A依赖于B,B依赖于A</p>
<p>循环依赖在spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖</p>
<p>①一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象</p>
<p>②二级缓存：缓存早期的bean对象（生命周期还没走完）</p>
<p>③三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的</p>
<h3 id="面试官：那具体解决流程清楚吗？"><a href="#面试官：那具体解决流程清楚吗？" class="headerlink" title="面试官：那具体解决流程清楚吗？"></a><strong>面试官</strong>：那具体解决流程清楚吗？</h3><p><strong>候选人</strong>：</p>
<p>第一，先实例A对象，同时会创建ObjectFactory对象存入三级缓存singletonFactories  </p>
<p>第二，A在初始化的时候需要B对象，这个走B的创建的逻辑</p>
<p>第三，B实例化完成，也会创建ObjectFactory对象存入三级缓存singletonFactories  </p>
<p>第四，B需要注入A，通过三级缓存中获取ObjectFactory来生成一个A的对象同时存入二级缓存，这个是有两种情况，一个是可能是A的普通对象，另外一个是A的代理对象，都可以让ObjectFactory来生产对应的对象，这也是三级缓存的关键</p>
<p>第五，B通过从通过二级缓存earlySingletonObjects  获得到A的对象后可以正常注入，B创建成功，存入一级缓存singletonObjects  </p>
<p>第六，回到A对象初始化，因为B对象已经创建完成，则可以直接注入B，A创建成功存入一次缓存singletonObjects </p>
<p>第七，二级缓存中的临时对象A清除 </p>
<h3 id="面试官：构造方法出现了循环依赖怎么解决？"><a href="#面试官：构造方法出现了循环依赖怎么解决？" class="headerlink" title="面试官：构造方法出现了循环依赖怎么解决？"></a><strong>面试官</strong>：构造方法出现了循环依赖怎么解决？</h3><p><strong>候选人</strong>：</p>
<p>由于bean的生命周期中构造函数是第一个执行的，spring框架并不能解决构造函数的的依赖注入，可以使用@Lazy懒加载，什么时候需要对象再进行bean对象的创建</p>
<h3 id="面试官：SpringMVC的执行流程知道嘛"><a href="#面试官：SpringMVC的执行流程知道嘛" class="headerlink" title="面试官：SpringMVC的执行流程知道嘛"></a><strong>面试官</strong>：SpringMVC的执行流程知道嘛</h3><p><strong>候选人</strong>：</p>
<p>嗯，这个知道的，它分了好多步骤</p>
<p>1、用户发送出请求到前端控制器DispatcherServlet，这是一个调度中心</p>
<p>2、DispatcherServlet收到请求调用HandlerMapping（处理器映射器）。</p>
<p>3、HandlerMapping找到具体的处理器(可查找xml配置或注解配置)，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。</p>
<p>4、DispatcherServlet调用HandlerAdapter（处理器适配器）。</p>
<p>5、HandlerAdapter经过适配调用具体的处理器（Handler&#x2F;Controller）。</p>
<p>6、Controller执行完成返回ModelAndView对象。</p>
<p>7、HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet。</p>
<p>8、DispatcherServlet将ModelAndView传给ViewReslover（视图解析器）。</p>
<p>9、ViewReslover解析后返回具体View（视图）。</p>
<p>10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</p>
<p>11、DispatcherServlet响应用户。</p>
<p>当然现在的开发，基本都是前后端分离的开发的，并没有视图这些，一般都是handler中使用Response直接结果返回</p>
<h3 id="面试官：Springboot自动配置原理"><a href="#面试官：Springboot自动配置原理" class="headerlink" title="面试官：Springboot自动配置原理"></a><strong>面试官</strong>：Springboot自动配置原理</h3><p><strong>候选人</strong>：</p>
<p>嗯，好的，它是这样的。</p>
<p>在Spring Boot项目中的引导类上有一个注解@SpringBootApplication，这个注解是对三个注解进行了封装，分别是：</p>
<ul>
<li><p>@SpringBootConfiguration</p>
</li>
<li><p>@EnableAutoConfiguration</p>
</li>
<li><p>@ComponentScan</p>
</li>
</ul>
<p>其中<code>@EnableAutoConfiguration</code>是实现自动化配置的核心注解。 </p>
<p>该注解通过<code>@Import</code>注解导入对应的配置选择器。关键的是内部就是读取了该项目和该项目引用的Jar包的的classpath路径下<strong>META-INF&#x2F;spring.factories</strong>文件中的所配置的类的全类名。 </p>
<p>在这些配置类中所定义的Bean会根据条件注解所<strong>指定的条件来决定</strong>是否需要将其导入到Spring容器中。</p>
<p>一般条件判断会有像<code>@ConditionalOnClass</code>这样的注解，判断是否有对应的class文件，如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。</p>
<h3 id="面试官：Spring-的常见注解有哪些？"><a href="#面试官：Spring-的常见注解有哪些？" class="headerlink" title="面试官：Spring 的常见注解有哪些？"></a><strong>面试官</strong>：Spring 的常见注解有哪些？</h3><p><strong>候选人</strong>：</p>
<p>嗯，这个就很多了</p>
<p>第一类是：声明bean，有@Component、@Service、@Repository、@Controller</p>
<p>第二类是：依赖注入相关的，有@Autowired、@Qualifier、@Resourse</p>
<p>第三类是：设置作用域 @Scope</p>
<p>第四类是：spring配置相关的，比如@Configuration，@ComponentScan 和 @Bean </p>
<p>第五类是：跟aop相关做增强的注解  @Aspect，@Before，@After，@Around，@Pointcut</p>
<h3 id="面试官：SpringMVC常见的注解有哪些？"><a href="#面试官：SpringMVC常见的注解有哪些？" class="headerlink" title="面试官：SpringMVC常见的注解有哪些？"></a><strong>面试官</strong>：SpringMVC常见的注解有哪些？</h3><p><strong>候选人</strong>：</p>
<p>嗯，这个也很多的</p>
<p>有@RequestMapping：用于映射请求路径；</p>
<p>@RequestBody：注解实现接收http请求的json数据，将json转换为java对象；</p>
<p>@RequestParam：指定请求参数的名称；</p>
<p>@PathViriable：从请求路径下中获取请求参数(&#x2F;user&#x2F;{id})，传递给方法的形式参数；@ResponseBody：注解实现将controller方法返回对象转化为json对象响应给客户端。@RequestHeader：获取指定的请求头数据，还有像@PostMapping、@GetMapping这些。</p>
<h3 id="面试官：Springboot常见注解有哪些？"><a href="#面试官：Springboot常见注解有哪些？" class="headerlink" title="面试官：Springboot常见注解有哪些？"></a><strong>面试官</strong>：Springboot常见注解有哪些？</h3><p><strong>候选人</strong>：</p>
<p>嗯~~</p>
<p>Spring Boot的核心注解是@SpringBootApplication , 他由几个注解组成 : </p>
<ul>
<li>@SpringBootConfiguration： 组合了- @Configuration注解，实现配置文件的功能；</li>
<li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项</li>
<li>@ComponentScan：Spring组件扫描</li>
</ul>
<h3 id="面试官：MyBatis执行流程"><a href="#面试官：MyBatis执行流程" class="headerlink" title="面试官：MyBatis执行流程"></a><strong>面试官</strong>：MyBatis执行流程</h3><p><strong>候选人</strong>：</p>
<p>好，这个知道的，不过步骤也很多</p>
<p>①读取MyBatis配置文件：mybatis-config.xml加载运行环境和映射文件</p>
<p>②构造会话工厂SqlSessionFactory，一个项目只需要一个，单例的，一般由spring进行管理</p>
<p>③会话工厂创建SqlSession对象，这里面就含了执行SQL语句的所有方法,在执行 SQL 语句时，MyBatis 会先从映射文件中找到对应的 SQL 语句，并将输入参数传递给 SQL 语句。然后 MyBatis 将 SQL 语句发送到数据库进行执行，并将结果集返回给程序。</p>
<p>④MyBatis 支持将 SQL 查询结果自动映射到 Java 对象上。在映射文件中配置了结果集的映射关系后，MyBatis 会将查询结果自动映射到相应的 Java 对象上，并返回给调用方。</p>
<h3 id="面试官：Mybatis是否支持延迟加载？"><a href="#面试官：Mybatis是否支持延迟加载？" class="headerlink" title="面试官：Mybatis是否支持延迟加载？"></a><strong>面试官</strong>：Mybatis是否支持延迟加载？</h3><p><strong>候选人</strong>：</p>
<p>是支持的~</p>
<p>延迟加载的意思是：就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。</p>
<p>Mybatis支持一对一关联对象和一对多关联集合对象的延迟加载</p>
<p>在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled&#x3D;true|false，默认是关闭的</p>
<h3 id="面试官：延迟加载的底层原理知道吗？"><a href="#面试官：延迟加载的底层原理知道吗？" class="headerlink" title="面试官：延迟加载的底层原理知道吗？"></a><strong>面试官</strong>：延迟加载的底层原理知道吗？</h3><p><strong>候选人</strong>：</p>
<p>嗯，我想想啊</p>
<p>延迟加载在底层主要使用的CGLIB动态代理完成的</p>
<p>第一是，使用CGLIB创建目标对象的代理对象，这里的目标对象就是开启了延迟加载的mapper</p>
<p>第二个是当调用目标方法时，进入拦截器invoke方法，发现目标方法是null值，再执行sql查询</p>
<p>第三个是获取数据以后，调用set方法设置属性值，再继续查询目标方法，就有值了</p>
<h3 id="面试官：Mybatis的一级、二级缓存用过吗？"><a href="#面试官：Mybatis的一级、二级缓存用过吗？" class="headerlink" title="面试官：Mybatis的一级、二级缓存用过吗？"></a><strong>面试官</strong>：Mybatis的一级、二级缓存用过吗？</h3><p><strong>候选人</strong>：</p>
<p>嗯~~，用过的~</p>
<p>mybatis的一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当Session进行flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存</p>
<p>关于二级缓存需要单独开启</p>
<p>二级缓存是基于namespace和mapper的作用域起作用的，不是依赖于SQL session，默认也是采用 PerpetualCache，HashMap 存储。</p>
<p>如果想要开启二级缓存需要在全局配置文件和映射文件中开启配置才行。</p>
<h3 id="面试官：Mybatis的二级缓存什么时候会清理缓存中的数据"><a href="#面试官：Mybatis的二级缓存什么时候会清理缓存中的数据" class="headerlink" title="面试官：Mybatis的二级缓存什么时候会清理缓存中的数据"></a><strong>面试官</strong>：Mybatis的二级缓存什么时候会清理缓存中的数据</h3><p><strong>候选人</strong>：</p>
<p>嗯！！</p>
<p>当某一个作用域(一级缓存 Session&#x2F;二级缓存Namespaces)的进行了新增、修改、删除操作后，默认该作用域下所有 select 中的缓存将被 clear。</p>
</blockquote>
<h1 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h1><h2 id="消息中间件面试题-参考回答"><a href="#消息中间件面试题-参考回答" class="headerlink" title="消息中间件面试题-参考回答"></a>消息中间件面试题-参考回答</h2><blockquote>
<h3 id="面试官：RabbitMQ-如何保证消息不丢失"><a href="#面试官：RabbitMQ-如何保证消息不丢失" class="headerlink" title="面试官：RabbitMQ-如何保证消息不丢失"></a><strong>面试官</strong>：RabbitMQ-如何保证消息不丢失</h3><p><strong>候选人</strong>：</p>
<p>嗯！我们当时MYSQL和Redis的数据双写一致性就是采用RabbitMQ实现同步的，这里面就要求了消息的高可用性，我们要保证消息的不丢失。主要从三个层面考虑</p>
<p>第一个是开启生产者确认机制，确保生产者的消息能到达队列，如果报错可以先记录到日志中，再去修复数据</p>
<p>第二个是开启持久化功能，确保消息未消费前在队列中不会丢失，其中的交换机、队列、和消息都要做持久化</p>
<p>第三个是开启消费者确认机制为auto，由spring确认消息处理成功后完成ack，当然也需要设置一定的重试次数，我们当时设置了3次，如果重试3次还没有收到消息，就将失败后的消息投递到异常交换机，交由人工处理</p>
<h3 id="面试官：RabbitMQ消息的重复消费问题如何解决的"><a href="#面试官：RabbitMQ消息的重复消费问题如何解决的" class="headerlink" title="面试官：RabbitMQ消息的重复消费问题如何解决的"></a><strong>面试官</strong>：RabbitMQ消息的重复消费问题如何解决的</h3><p><strong>候选人</strong>：</p>
<p>嗯，这个我们还真遇到过，是这样的，我们当时消费者是设置了自动确认机制，当服务还没来得及给MQ确认的时候，服务宕机了，导致服务重启之后，又消费了一次消息。这样就重复消费了</p>
<p>因为我们当时处理的支付（订单|业务唯一标识），它有一个业务的唯一标识，我们再处理消息时，先到数据库查询一下，这个数据是否存在，如果不存在，说明没有处理过，这个时候就可以正常处理这个消息了。如果已经存在这个数据了，就说明消息重复消费了，我们就不需要再消费了</p>
<h3 id="面试官：那你还知道其他的解决方案吗？"><a href="#面试官：那你还知道其他的解决方案吗？" class="headerlink" title="面试官：那你还知道其他的解决方案吗？"></a><strong>面试官</strong>：那你还知道其他的解决方案吗？</h3><p><strong>候选人</strong>：</p>
<p>嗯，我想想~</p>
<p>其实这个就是典型的幂等的问题，比如，redis分布式锁、数据库的锁都是可以的</p>
<h3 id="面试官：RabbitMQ中死信交换机-（RabbitMQ延迟队列有了解过嘛）"><a href="#面试官：RabbitMQ中死信交换机-（RabbitMQ延迟队列有了解过嘛）" class="headerlink" title="面试官：RabbitMQ中死信交换机 ? （RabbitMQ延迟队列有了解过嘛）"></a><strong>面试官</strong>：RabbitMQ中死信交换机 ? （RabbitMQ延迟队列有了解过嘛）</h3><p><strong>候选人</strong>：</p>
<p>嗯！了解过！</p>
<p>我们当时的xx项目有一个xx业务，需要用到延迟队列，其中就是使用RabbitMQ来实现的。</p>
<p>延迟队列就是用到了死信交换机和TTL（消息存活时间）实现的。</p>
<p>如果消息超时未消费就会变成死信，在RabbitMQ中如果消息成为死信，队列可以绑定一个死信交换机，在死信交换机上可以绑定其他队列，在我们发消息的时候可以按照需求指定TTL的时间，这样就实现了延迟队列的功能了。</p>
<p>我记得RabbitMQ还有一种方式可以实现延迟队列，在RabbitMQ中安装一个死信插件，这样更方便一些，我们只需要在声明交互机的时候，指定这个就是死信交换机，然后在发送消息的时候直接指定超时时间就行了，相对于死信交换机+TTL要省略了一些步骤</p>
<h3 id="面试官：如果有100万消息堆积在MQ-如何解决"><a href="#面试官：如果有100万消息堆积在MQ-如何解决" class="headerlink" title="面试官：如果有100万消息堆积在MQ , 如何解决 ?"></a><strong>面试官</strong>：如果有100万消息堆积在MQ , 如何解决 ?</h3><p><strong>候选人</strong>：</p>
<p>我在实际的开发中，没遇到过这种情况，不过，如果发生了堆积的问题，解决方案也所有很多的</p>
<p>第一:提高消费者的消费能力 ,可以使用多线程消费任务</p>
<p>第二：增加更多消费者，提高消费速度 </p>
<p>​			 使用工作队列模式, 设置多个消费者消费消费同一个队列中的消息</p>
<p>第三：扩大队列容积，提高堆积上限 </p>
<p>可以使用RabbitMQ惰性队列，惰性队列的好处主要是</p>
<p>①接收到消息后直接存入磁盘而非内存</p>
<p>②消费者要消费消息时才会从磁盘中读取并加载到内存</p>
<p>③支持数百万条的消息存储</p>
<h3 id="面试官：RabbitMQ的高可用机制有了解过嘛"><a href="#面试官：RabbitMQ的高可用机制有了解过嘛" class="headerlink" title="面试官：RabbitMQ的高可用机制有了解过嘛"></a><strong>面试官</strong>：RabbitMQ的高可用机制有了解过嘛</h3><p><strong>候选人</strong>：</p>
<p>嗯，熟悉的~</p>
<p>我们当时项目在生产环境下，使用的集群，当时搭建是镜像模式集群，使用了3台机器。</p>
<p>镜像队列结构是一主多从，所有操作都是主节点完成，然后同步给镜像节点，如果主节点宕机后，镜像节点会替代成新的主节点，不过在主从同步完成前，主节点就已经宕机，可能出现数据丢失</p>
<h3 id="面试官：那出现丢数据怎么解决呢？"><a href="#面试官：那出现丢数据怎么解决呢？" class="headerlink" title="面试官：那出现丢数据怎么解决呢？"></a><strong>面试官</strong>：那出现丢数据怎么解决呢？</h3><p><strong>候选人</strong>：</p>
<p>我们可以采用仲裁队列，与镜像队列一样，都是主从模式，支持主从数据同步，主从同步基于Raft协议，强一致。</p>
<p>并且使用起来也非常简单，不需要额外的配置，在声明队列的时候只要指定这个是仲裁队列即可</p>
<h3 id="面试官：Kafka是如何保证消息不丢失"><a href="#面试官：Kafka是如何保证消息不丢失" class="headerlink" title="面试官：Kafka是如何保证消息不丢失"></a><strong>面试官</strong>：Kafka是如何保证消息不丢失</h3><p><strong>候选人</strong>：</p>
<p>嗯，这个保证机制很多，在发送消息到消费者接收消息，在每个阶段都有可能会丢失消息，所以我们解决的话也是从多个方面考虑</p>
<p>第一个是生产者发送消息的时候，可以使用异步回调发送，如果消息发送失败，我们可以通过回调获取失败后的消息信息，可以考虑重试或记录日志，后边再做补偿都是可以的。同时在生产者这边还可以设置消息重试，有的时候是由于网络抖动的原因导致发送不成功，就可以使用重试机制来解决</p>
<p>第二个在broker中消息有可能会丢失，我们可以通过kafka的复制机制来确保消息不丢失，在生产者发送消息的时候，可以设置一个acks，就是确认机制。我们可以设置参数为all，这样的话，当生产者发送消息到了分区之后，不仅仅只在leader分区保存确认，在follwer分区也会保存确认，只有当所有的副本都保存确认以后才算是成功发送了消息，所以，这样设置就很大程度了保证了消息不会在broker丢失</p>
<p>第三个有可能是在消费者端丢失消息，kafka消费消息都是按照offset进行标记消费的，消费者默认是自动按期提交已经消费的偏移量，默认是每隔5s提交一次，如果出现重平衡的情况，可能会重复消费或丢失数据。我们一般都会禁用掉自动提价偏移量，改为手动提交，当消费成功以后再报告给broker消费的位置，这样就可以避免消息丢失和重复消费了</p>
<h3 id="面试官：Kafka中消息的重复消费问题如何解决的"><a href="#面试官：Kafka中消息的重复消费问题如何解决的" class="headerlink" title="面试官：Kafka中消息的重复消费问题如何解决的"></a><strong>面试官</strong>：Kafka中消息的重复消费问题如何解决的</h3><p><strong>候选人</strong>：</p>
<p>kafka消费消息都是按照offset进行标记消费的，消费者默认是自动按期提交已经消费的偏移量，默认是每隔5s提交一次，如果出现重平衡的情况，可能会重复消费或丢失数据。我们一般都会禁用掉自动提价偏移量，改为手动提交，当消费成功以后再报告给broker消费的位置，这样就可以避免消息丢失和重复消费了</p>
<p>为了消息的幂等，我们也可以设置唯一主键来进行区分，或者是加锁，数据库的锁，或者是redis分布式锁，都能解决幂等的问题</p>
<h3 id="面试官：Kafka是如何保证消费的顺序性"><a href="#面试官：Kafka是如何保证消费的顺序性" class="headerlink" title="面试官：Kafka是如何保证消费的顺序性"></a><strong>面试官</strong>：Kafka是如何保证消费的顺序性</h3><p><strong>候选人</strong>：</p>
<p>kafka默认存储和消费消息，是不能保证顺序性的，因为一个topic数据可能存储在不同的分区中，每个分区都有一个按照顺序的存储的偏移量，如果消费者关联了多个分区不能保证顺序性</p>
<p>如果有这样的需求的话，我们是可以解决的，把消息都存储同一个分区下就行了，有两种方式都可以进行设置，第一个是发送消息时指定分区号，第二个是发送消息时按照相同的业务设置相同的key，因为默认情况下分区也是通过key的hashcode值来选择分区的，hash值如果一样的话，分区肯定也是一样的</p>
<h3 id="面试官：Kafka的高可用机制有了解过嘛"><a href="#面试官：Kafka的高可用机制有了解过嘛" class="headerlink" title="面试官：Kafka的高可用机制有了解过嘛"></a><strong>面试官</strong>：Kafka的高可用机制有了解过嘛</h3><p><strong>候选人</strong>：</p>
<p>嗯，主要是有两个层面，第一个是集群，第二个是提供了复制机制</p>
<p>kafka集群指的是由多个broker实例组成，即使某一台宕机，也不耽误其他broker继续对外提供服务</p>
<p>复制机制是可以保证kafka的高可用的，一个topic有多个分区，每个分区有多个副本，有一个leader，其余的是follower，副本存储在不同的broker中；所有的分区副本的内容是都是相同的，如果leader发生故障时，会自动将其中一个follower提升为leader，保证了系统的容错性、高可用性</p>
<h3 id="面试官：解释一下复制机制中的ISR"><a href="#面试官：解释一下复制机制中的ISR" class="headerlink" title="面试官：解释一下复制机制中的ISR"></a><strong>面试官</strong>：解释一下复制机制中的ISR</h3><p><strong>候选人</strong>：</p>
<p>ISR的意思是in-sync replica，就是需要同步复制保存的follower</p>
<p>其中分区副本有很多的follower，分为了两类，一个是ISR，与leader副本同步保存数据，另外一个普通的副本，是异步同步数据，当leader挂掉之后，会优先从ISR副本列表中选取一个作为leader，因为ISR是同步保存数据，数据更加的完整一些，所以优先选择ISR副本列表</p>
<h3 id="面试官：Kafka数据清理机制了解过嘛"><a href="#面试官：Kafka数据清理机制了解过嘛" class="headerlink" title="面试官：Kafka数据清理机制了解过嘛"></a><strong>面试官</strong>：Kafka数据清理机制了解过嘛</h3><p><strong>候选人</strong>：</p>
<p>嗯，了解过~~</p>
<p>Kafka中topic的数据存储在分区上，分区如果文件过大会分段存储segment</p>
<p>每个分段都在磁盘上以索引(xxxx.index)和日志文件(xxxx.log)的形式存储，这样分段的好处是，第一能够减少单个文件内容的大小，查找数据方便，第二方便kafka进行日志清理。</p>
<p>在kafka中提供了两个日志的清理策略：</p>
<p>第一，根据消息的保留时间，当消息保存的时间超过了指定的时间，就会触发清理，默认是168小时（ 7天）</p>
<p>第二是根据topic存储的数据大小，当topic所占的日志文件大小大于一定的阈值，则开始删除最久的消息。这个默认是关闭的</p>
<p>这两个策略都可以通过kafka的broker中的配置文件进行设置</p>
<h3 id="面试官：Kafka中实现高性能的设计有了解过嘛"><a href="#面试官：Kafka中实现高性能的设计有了解过嘛" class="headerlink" title="面试官：Kafka中实现高性能的设计有了解过嘛"></a><strong>面试官</strong>：Kafka中实现高性能的设计有了解过嘛</h3><p><strong>候选人</strong>：</p>
<p>Kafka 高性能，是多方面协同的结果，包括宏观架构、分布式存储、ISR 数据同步、以及高效的利用磁盘、操作系统特性等。主要体现有这么几点：</p>
<p>消息分区：不受单台服务器的限制，可以不受限的处理更多的数据</p>
<p>顺序读写：磁盘顺序读写，提升读写效率</p>
<p>页缓存：把磁盘中的数据缓存到内存中，把对磁盘的访问变为对内存的访问</p>
<p>零拷贝：减少上下文切换及数据拷贝</p>
<p>消息压缩：减少磁盘IO和网络IO</p>
<p>分批发送：将消息打包批量发送，减少网络开销</p>
</blockquote>
<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h3 id="JVM组成"><a href="#JVM组成" class="headerlink" title="JVM组成"></a>JVM组成</h3><blockquote>
<h3 id="面试官：JVM由那些部分组成，运行流程是什么？"><a href="#面试官：JVM由那些部分组成，运行流程是什么？" class="headerlink" title="面试官：JVM由那些部分组成，运行流程是什么？"></a><strong>面试官</strong>：JVM由那些部分组成，运行流程是什么？</h3><p><strong>候选人:</strong></p>
<p>嗯，好的~~</p>
<p>在JVM中共有四大部分，分别是ClassLoader（类加载器）、Runtime Data Area（运行时数据区，内存分区）、Execution Engine（执行引擎）、Native Method Library（本地库接口）</p>
<p>它们的运行流程是：</p>
<p>第一，类加载器（ClassLoader）把Java代码转换为字节码</p>
<p>第二，运行时数据区（Runtime Data Area）把字节码加载到内存中，而字节码文件只是JVM的一套指令集规范，并不能直接交给底层系统去执行，而是有执行引擎运行</p>
<p>第三，执行引擎（Execution Engine）将字节码翻译为底层系统指令，再交由CPU执行去执行，此时需要调用其他语言的本地库接口（Native Method Library）来实现整个程序的功能。</p>
<h3 id="面试官：好的，你能详细说一下-JVM-运行时数据区吗？"><a href="#面试官：好的，你能详细说一下-JVM-运行时数据区吗？" class="headerlink" title="面试官：好的，你能详细说一下 JVM 运行时数据区吗？"></a><strong>面试官</strong>：好的，你能详细说一下 JVM 运行时数据区吗？</h3><p><strong>候选人:</strong></p>
<p>嗯，好~</p>
<p>运行时数据区包含了堆、方法区、栈、本地方法栈、程序计数器这几部分，每个功能作用不一样。</p>
<ul>
<li>堆解决的是对象实例存储的问题，垃圾回收器管理的主要区域。</li>
<li>方法区可以认为是堆的一部分，用于存储已被虚拟机加载的信息，常量、静态变量、即时编译器编译后的代码。</li>
<li>栈解决的是程序运行的问题，栈里面存的是栈帧，栈帧里面存的是局部变量表、操作数栈、动态链接、方法出口等信息。</li>
<li>本地方法栈与栈功能相同，本地方法栈执行的是本地方法，一个Java调用非Java代码的接口。</li>
<li>程序计数器（PC寄存器）程序计数器中存放的是当前线程所执行的字节码的行数。JVM工作时就是通过改变这个计数器的值来选取下一个需要执行的字节码指令。</li>
</ul>
<h3 id="面试官：好的，你再详细介绍一下程序计数器的作用？"><a href="#面试官：好的，你再详细介绍一下程序计数器的作用？" class="headerlink" title="面试官：好的，你再详细介绍一下程序计数器的作用？"></a><strong>面试官</strong>：好的，你再详细介绍一下程序计数器的作用？</h3><p><strong>候选人:</strong></p>
<p>嗯，是这样~~</p>
<p>java虚拟机对于多线程是通过线程轮流切换并且分配线程执行时间。在任何的一个时间点上，一个处理器只会处理执行一个线程，如果当前被执行的这个线程它所分配的执行时间用完了【挂起】。处理器会切换到另外的一个线程上来进行执行。并且这个线程的执行时间用完了，接着处理器就会又来执行被挂起的这个线程。这时候程序计数器就起到了关键作用，程序计数器在来回切换的线程中记录他上一次执行的行号，然后接着继续向下执行。</p>
<h3 id="面试官：你能给我详细的介绍Java堆吗"><a href="#面试官：你能给我详细的介绍Java堆吗" class="headerlink" title="面试官：你能给我详细的介绍Java堆吗?"></a><strong>面试官</strong>：你能给我详细的介绍Java堆吗?</h3><p><strong>候选人:</strong></p>
<p>好的~</p>
<p>Java中的堆术语线程共享的区域。主要用来保存<strong>对象实例，数组</strong>等，当堆中没有内存空间可分配给实例，也无法再扩展时，则抛出OutOfMemoryError异常。</p>
<p>​	在JAVA8中堆内会存在年轻代、老年代</p>
<p>​	1）Young区被划分为三部分，Eden区和两个大小严格相同的Survivor区，其中，Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用。在Eden区变满的时候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到Tenured区间。</p>
<p>​	2）Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区。</p>
<h3 id="面试官：能不能解释一下方法区？"><a href="#面试官：能不能解释一下方法区？" class="headerlink" title="面试官：能不能解释一下方法区？"></a><strong>面试官</strong>：能不能解释一下方法区？</h3><p><strong>候选人:</strong></p>
<p>好的~</p>
<p>与虚拟机栈类似。本地方法栈是为虚拟机<strong>执行本地方法时提供服务的</strong>。不需要进行GC。本地方法一般是由其他语言编写。</p>
<h3 id="面试官：你听过直接内存吗？"><a href="#面试官：你听过直接内存吗？" class="headerlink" title="面试官：你听过直接内存吗？"></a><strong>面试官</strong>：你听过直接内存吗？</h3><p><strong>候选人:</strong></p>
<p>嗯~~</p>
<p>它又叫做<strong>堆外内存</strong>，<strong>线程共享的区域</strong>，在 Java 8 之前有个<strong>永久代</strong>的概念，实际上指的是 HotSpot 虚拟机上的永久代，它用永久代实现了 JVM 规范定义的方法区功能，<strong>主要存储类的信息，常量，静态变量</strong>，即时编译器编译后代码等，这部分由于是在堆中实现的，受 GC 的管理，不过由于永久代有 -XX:MaxPermSize 的上限，所以如果大量动态生成类（将类信息放入永久代），很容易造成 OOM，有人说可以把永久代设置得足够大，但很难确定一个合适的大小，受类数量，常量数量的多少影响很大。</p>
<p>​	所以在 Java 8 中就把方法区的实现移到了本地内存中的元空间中，这样方法区就不受 JVM 的控制了,也就不会进行 GC，也因此提升了性能。</p>
<h3 id="面试官：什么是虚拟机栈"><a href="#面试官：什么是虚拟机栈" class="headerlink" title="面试官：什么是虚拟机栈"></a><strong>面试官</strong>：什么是虚拟机栈</h3><p><strong>候选人:</strong></p>
<p>虚拟机栈是描述的是方法执行时的内存模型,是线程私有的，生命周期与线程相同,每个方法被执行的同时会创建<strong>栈桢</strong>。保存执行方法时的<strong>局部变量、动态连接信息、方法返回地址信息</strong>等等。方法开始执行的时候会进栈，方法执行完会出栈【相当于清空了数据】，所以这块区域<strong>不需要进行 GC</strong>。</p>
<h3 id="面试官：能说一下堆栈的区别是什么吗？"><a href="#面试官：能说一下堆栈的区别是什么吗？" class="headerlink" title="面试官：能说一下堆栈的区别是什么吗？"></a><strong>面试官</strong>：能说一下堆栈的区别是什么吗？</h3><p><strong>候选人:</strong></p>
<p>嗯，好的，有这几个区别</p>
<p>第一，栈内存一般会用来存储局部变量和方法调用，但堆内存是用来存储Java对象和数组的的。堆会GC垃圾回收，而栈不会。</p>
<p>第二、栈内存是线程私有的，而堆内存是线程共有的。</p>
<p>第三、两者异常错误不同，但如果栈内存或者堆内存不足都会抛出异常。</p>
<p>栈空间不足：java.lang.StackOverFlowError。</p>
<p>堆空间不足：java.lang.OutOfMemoryError。</p>
</blockquote>
<h3 id="5-2-类加载器"><a href="#5-2-类加载器" class="headerlink" title="5.2 类加载器"></a>5.2 类加载器</h3><blockquote>
<h3 id="面试官：什么是类加载器，类加载器有哪些"><a href="#面试官：什么是类加载器，类加载器有哪些" class="headerlink" title="面试官：什么是类加载器，类加载器有哪些?"></a><strong>面试官</strong>：什么是类加载器，类加载器有哪些?</h3><p><strong>候选人:</strong></p>
<p>嗯，是这样的</p>
<p>JVM只会运行二进制文件，而类加载器（ClassLoader）的主要作用就是将<strong>字节码文件加载到JVM中</strong>，从而让Java程序能够启动起来。</p>
<p>常见的类加载器有4个</p>
<p>第一个是启动类加载器(BootStrap ClassLoader)：其是由C++编写实现。用于加载JAVA_HOME&#x2F;jre&#x2F;lib目录下的类库。</p>
<p>第二个是扩展类加载器(ExtClassLoader)：该类是ClassLoader的子类，主要加载JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext目录中的类库。</p>
<p>第三个是应用类加载器(AppClassLoader)：该类是ClassLoader的子类，主要用于加载classPath下的类，也就是加载开发者自己编写的Java类。</p>
<p>第四个是自定义类加载器：开发者自定义类继承ClassLoader，实现自定义类加载规则。</p>
<h3 id="面试官：说一下类装载的执行过程？"><a href="#面试官：说一下类装载的执行过程？" class="headerlink" title="面试官：说一下类装载的执行过程？"></a><strong>面试官</strong>：说一下类装载的执行过程？</h3><p><strong>候选人:</strong></p>
<p>嗯，这个过程还是挺多的。</p>
<p>类从加载到虚拟机中开始，直到卸载为止，它的整个生命周期包括了：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。其中，验证、准备和解析这三个部分统称为连接（linking）</p>
<p>1.加载：查找和导入class文件</p>
<p>2.验证：保证加载类的准确性</p>
<p>3.准备：为类变量分配内存并设置类变量初始值</p>
<p>4.解析：把类中的符号引用转换为直接引用</p>
<p>5.初始化：对类的静态变量，静态代码块执行初始化操作</p>
<p>6.使用：JVM 开始从入口方法开始执行用户的程序代码</p>
<p>7.卸载：当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存</p>
<h3 id="面试官：什么是双亲委派模型？"><a href="#面试官：什么是双亲委派模型？" class="headerlink" title="面试官：什么是双亲委派模型？"></a><strong>面试官</strong>：什么是双亲委派模型？</h3><p><strong>候选人:</strong></p>
<p>嗯，它是是这样的。</p>
<p>如果一个类加载器收到了类加载的请求，它首先不会自己尝试加载这个类，而是把这请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传说到顶层的启动类加载器中，只有当父类加载器返回自己无法完成这个加载请求（它的搜索返回中没有找到所需的类）时，子类加载器才会尝试自己去加载</p>
<h3 id="面试官：JVM为什么采用双亲委派机制"><a href="#面试官：JVM为什么采用双亲委派机制" class="headerlink" title="面试官：JVM为什么采用双亲委派机制"></a><strong>面试官</strong>：JVM为什么采用双亲委派机制</h3><p><strong>候选人:</strong></p>
<p>主要有两个原因。</p>
<p>第一、通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。</p>
<p>第二、为了安全，保证类库API不会被修改</p>
</blockquote>
<h3 id="5-3-垃圾回收"><a href="#5-3-垃圾回收" class="headerlink" title="5.3 垃圾回收"></a>5.3 垃圾回收</h3><blockquote>
<h3 id="面试官：简述Java垃圾回收机制？（GC是什么？为什么要GC）"><a href="#面试官：简述Java垃圾回收机制？（GC是什么？为什么要GC）" class="headerlink" title="面试官：简述Java垃圾回收机制？（GC是什么？为什么要GC）"></a><strong>面试官</strong>：简述Java垃圾回收机制？（GC是什么？为什么要GC）</h3><p><strong>候选人:</strong></p>
<p>嗯，是这样~~</p>
<p>为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回收机制，也就是我们熟悉的GC(Garbage Collection)。</p>
<p>有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。</p>
<p>在进行垃圾回收时，不同的对象引用类型，GC会采用不同的回收时机</p>
<h3 id="面试官：强引用、软引用、弱引用、虚引用的区别？"><a href="#面试官：强引用、软引用、弱引用、虚引用的区别？" class="headerlink" title="面试官：强引用、软引用、弱引用、虚引用的区别？"></a><strong>面试官</strong>：强引用、软引用、弱引用、虚引用的区别？</h3><p><strong>候选人:</strong></p>
<p>嗯嗯~</p>
<p>强引用最为普通的引用方式，表示一个对象处于<strong>有用且必须</strong>的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收</p>
<p>软引用表示一个对象处于<strong>有用且非必须</strong>状态，如果一个对象处于软引用，在内存空间足够的情况下，GC机制并不会回收它，而在内存空间不足时，则会在OOM异常出现之间对其进行回收。但值得注意的是，因为GC线程优先级较低，软引用并不会立即被回收。</p>
<p>弱引用表示一个对象处于<strong>可能有用且非必须</strong>的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收。同样的，因为GC线程优先级较低，所以弱引用也并不是会被立刻回收。</p>
<p>虚引用表示一个对象处于<strong>无用</strong>的状态。在任何时候都有可能被垃圾回收。虚引用的使用必须和引用队列Reference Queue联合使用</p>
<h3 id="面试官：对象什么时候可以被垃圾器回收"><a href="#面试官：对象什么时候可以被垃圾器回收" class="headerlink" title="面试官：对象什么时候可以被垃圾器回收"></a><strong>面试官</strong>：对象什么时候可以被垃圾器回收</h3><p><strong>候选人:</strong></p>
<p>思考一会~~</p>
<p>如果一个或多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾，如果定位了垃圾，则有可能会被垃圾回收器回收。</p>
<p>如果要定位什么是垃圾，有两种方式来确定，第一个是引用计数法，第二个是可达性分析算法</p>
<p>通常都使用可达性分析算法来确定是不是垃圾</p>
<h3 id="面试官：-JVM-垃圾回收算法有哪些？"><a href="#面试官：-JVM-垃圾回收算法有哪些？" class="headerlink" title="面试官： JVM 垃圾回收算法有哪些？"></a><strong>面试官</strong>： JVM 垃圾回收算法有哪些？</h3><p><strong>候选人:</strong></p>
<p>我记得一共有四种，分别是标记清除算法、复制算法、标记整理算法、分代回收</p>
<h3 id="面试官：-你能详细聊一下分代回收吗？"><a href="#面试官：-你能详细聊一下分代回收吗？" class="headerlink" title="面试官： 你能详细聊一下分代回收吗？"></a><strong>面试官</strong>： 你能详细聊一下分代回收吗？</h3><p><strong>候选人:</strong></p>
<p>关于分代回收是这样的</p>
<p>在java8时，堆被分为了两份：新生代和老年代，它们默认空间占用比例是1:2</p>
<p>对于新生代，内部又被分为了三个区域。Eden区，S0区，S1区默认空间占用比例是8:1:1</p>
<p>具体的工作机制是有些情况：</p>
<p>1）当创建一个对象的时候，那么这个对象会被分配在新生代的Eden区。当Eden区要满了时候，触发YoungGC。</p>
<p>2）当进行YoungGC后，此时在Eden区存活的对象被移动到S0区，并且<strong>当前对象的年龄会加1</strong>，清空Eden区。</p>
<p>3）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S0中的对象，移动到S1区中，这些对象的年龄会加1，清空Eden区和S0区。</p>
<p>4）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S1中的对象，移动到S0区中，这些对象的年龄会加1，清空Eden区和S1区。</p>
<p>5）对象的年龄达到了某一个限定的值（<strong>默认15岁</strong>  ），那么这个对象就会进入到老年代中。</p>
<p>当然也有特殊情况，如果进入Eden区的是一个大对象，在触发YoungGC的时候，会直接存放到老年代</p>
<p>当老年代满了之后，<strong>触发FullGC</strong>。<strong>FullGC同时回收新生代和老年代</strong>，当前只会存在一个FullGC的线程进行执行，其他的线程全部会被挂起。  我们在程序中要尽量避免FullGC的出现。</p>
<h3 id="面试官：讲一下新生代、老年代、永久代的区别？"><a href="#面试官：讲一下新生代、老年代、永久代的区别？" class="headerlink" title="面试官：讲一下新生代、老年代、永久代的区别？"></a><strong>面试官</strong>：讲一下新生代、老年代、永久代的区别？</h3><p><strong>候选人:</strong></p>
<p>嗯！是这样的，简单说就是</p>
<p><strong>新生代</strong>主要用来存放新生的对象。</p>
<p><strong>老年代</strong>主要存放应用中生命周期长的内存对象。</p>
<p><strong>永久代</strong>指的是永久保存区域。主要存放Class和Meta（元数据）的信息。在Java8中，永久代已经被移除，取而代之的是一个称之为“元数据区”（<strong>元空间</strong>）的区域。元空间和永久代类似，不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存的限制。</p>
<h3 id="面试官：说一下-JVM-有哪些垃圾回收器？"><a href="#面试官：说一下-JVM-有哪些垃圾回收器？" class="headerlink" title="面试官：说一下 JVM 有哪些垃圾回收器？"></a><strong>面试官</strong>：说一下 JVM 有哪些垃圾回收器？</h3><p><strong>候选人:</strong></p>
<p>在jvm中，实现了多种垃圾收集器，包括：串行垃圾收集器、并行垃圾收集器（JDK8默认）、CMS（并发）垃圾收集器、G1垃圾收集器（JDK9默认）</p>
<h3 id="面试官：Minor-GC、Major-GC、Full-GC是什么"><a href="#面试官：Minor-GC、Major-GC、Full-GC是什么" class="headerlink" title="面试官：Minor GC、Major GC、Full GC是什么"></a><strong>面试官</strong>：Minor GC、Major GC、Full GC是什么</h3><p><strong>候选人:</strong></p>
<p>嗯，其实它们指的是不同代之间的垃圾回收</p>
<p>Minor GC 发生在新生代的垃圾回收，暂停时间短</p>
<p>Major GC 老年代区域的垃圾回收，老年代空间不足时，会先尝试触发Minor GC。Minor GC之后空间还不足，则会触发Major GC，Major GC速度比较慢，暂停时间长</p>
<p>Full GC 新生代 + 老年代完整垃圾回收，暂停时间长，<strong>应尽力避免</strong></p>
</blockquote>
<h3 id="5-4-JVM实践（调优）"><a href="#5-4-JVM实践（调优）" class="headerlink" title="5.4 JVM实践（调优）"></a>5.4 JVM实践（调优）</h3><blockquote>
<h3 id="面试官：JVM-调优的参数可以在哪里设置参数值？"><a href="#面试官：JVM-调优的参数可以在哪里设置参数值？" class="headerlink" title="面试官：JVM 调优的参数可以在哪里设置参数值？"></a><strong>面试官</strong>：JVM 调优的参数可以在哪里设置参数值？</h3><p><strong>候选人:</strong></p>
<p>我们当时的项目是springboot项目，可以在项目启动的时候，java -jar中加入参数就行了</p>
<h3 id="面试官：用的-JVM-调优的参数都有哪些？"><a href="#面试官：用的-JVM-调优的参数都有哪些？" class="headerlink" title="面试官：用的 JVM 调优的参数都有哪些？"></a><strong>面试官</strong>：用的 JVM 调优的参数都有哪些？</h3><p><strong>候选人:</strong></p>
<p>嗯，这些参数是比较多的</p>
<p>我记得当时我们设置过堆的大小，像-Xms和-Xmx</p>
<p>还有就是可以设置年轻代中Eden区和两个Survivor区的大小比例</p>
<p>还有就是可以设置使用哪种垃圾回收器等等。具体的指令还真记不太清楚。</p>
<h3 id="面试官：嗯，好的，你们平时调试-JVM都用了哪些工具呢？"><a href="#面试官：嗯，好的，你们平时调试-JVM都用了哪些工具呢？" class="headerlink" title="面试官：嗯，好的，你们平时调试 JVM都用了哪些工具呢？"></a><strong>面试官</strong>：嗯，好的，你们平时调试 JVM都用了哪些工具呢？</h3><p><strong>候选人:</strong></p>
<p>嗯，我们一般都是使用jdk自带的一些工具，比如</p>
<p>jps 输出JVM中运行的进程状态信息</p>
<p>jstack查看java进程内<strong>线程的堆栈</strong>信息。</p>
<p>jmap 用于生成堆转存快照</p>
<p>jstat用于JVM统计监测工具</p>
<p>还有一些可视化工具，像jconsole和VisualVM等</p>
<h3 id="面试官：假如项目中产生了java内存泄露，你说一下你的排查思路？"><a href="#面试官：假如项目中产生了java内存泄露，你说一下你的排查思路？" class="headerlink" title="面试官：假如项目中产生了java内存泄露，你说一下你的排查思路？"></a><strong>面试官</strong>：假如项目中产生了java内存泄露，你说一下你的排查思路？</h3><p><strong>候选人:</strong></p>
<p>嗯，这个我在之前项目排查过</p>
<p>第一呢可以通过jmap指定打印他的内存快照 dump文件，不过有的情况打印不了，我们会设置vm参数让程序自动生成dump文件</p>
<p>第二，可以通过工具去分析 dump文件，jdk自带的VisualVM就可以分析</p>
<p>第三，通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题</p>
<p>第四，找到对应的代码，通过阅读上下文的情况，进行修复即可</p>
<h3 id="面试官：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？"><a href="#面试官：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？" class="headerlink" title="面试官：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？"></a><strong>面试官</strong>：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？</h3><p><strong>候选人:</strong></p>
<p>嗯，我思考一下~~</p>
<p>可以这么做~~</p>
<p>第一可以使用使用top命令查看占用cpu的情况</p>
<p>第二通过top命令查看后，可以查看是哪一个进程占用cpu较高，记录这个进程id</p>
<p>第三可以通过ps 查看当前进程中的线程信息，看看哪个线程的cpu占用较高</p>
<p>第四可以jstack命令打印进行的id，找到这个线程，就可以进一步定位问题代码的行号</p>
</blockquote>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">【单例模式】</span><br><span class="line">确保一个类只有一个实例，并提供全局访问点</span><br><span class="line"></span><br><span class="line">【工厂方法模式】</span><br><span class="line">定义一个用于创建对象的接口，让子类决定实例化哪个类</span><br><span class="line"></span><br><span class="line">【抽象工厂模式】</span><br><span class="line">定义一个用于创建对象的接口，让子类决定实例化哪一个类，常用于对象的创建和解耦</span><br><span class="line"></span><br><span class="line">【建造者模式】</span><br><span class="line">提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们的具体类，</span><br><span class="line">常用于系统的构建和产品族的创建</span><br><span class="line"></span><br><span class="line">【原型模式】</span><br><span class="line">用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">【适配器模式】</span><br><span class="line">将一个类的接口转换成客户希望的另一个接口，使得原本不兼容的类可以合作无间</span><br><span class="line"></span><br><span class="line">【桥接模式】</span><br><span class="line">将抽象部分与实现部分分离，使它们都可以独立地变化</span><br><span class="line"></span><br><span class="line">【组合模式】</span><br><span class="line">将对象组合成树形结构来表示“部分-整体”的层次结构，使得客户端对单个对象</span><br><span class="line">和组合对象的使用具有一致性</span><br><span class="line"></span><br><span class="line">【装饰器模式】</span><br><span class="line">动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活</span><br><span class="line"></span><br><span class="line">【外观模式】</span><br><span class="line">为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，</span><br><span class="line">这个接口使得这一子系统更加容易使用</span><br><span class="line"></span><br><span class="line">【享元模式】</span><br><span class="line">运用共享技术有效地支持大量细粒度的对象</span><br><span class="line"></span><br><span class="line">【代理模式】</span><br><span class="line">由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，</span><br><span class="line">访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">【模板方法模式】</span><br><span class="line">定义一个操作中的算法骨架，而将一些步骤延迟到子类中</span><br><span class="line"></span><br><span class="line">【策略模式】</span><br><span class="line">定义一系列算法，将每个算法封装起来，并且使它们之间可以互换</span><br><span class="line"></span><br><span class="line">【命令模式】</span><br><span class="line">将请求封装成一个对象，从而使你可以用不同的请求对客户进行参数化</span><br><span class="line"></span><br><span class="line">【责任链模式】</span><br><span class="line">为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求</span><br><span class="line"></span><br><span class="line">【状态模式】</span><br><span class="line">允许一个对象在其内部状态改变时改变其行为</span><br><span class="line"></span><br><span class="line">【观察者模式】</span><br><span class="line">定义对象间的一种一对多的依赖关系，以便当一个对象状态改变时，</span><br><span class="line">所有依赖于它的对象都得到通知并自动刷新</span><br><span class="line"></span><br><span class="line">【中介者模式】</span><br><span class="line">用一个中介对象来封装一系列的对象交互。</span><br><span class="line">中介者使各个对象不需要显式地相互作用，从而使其松耦合</span><br><span class="line"></span><br><span class="line">【迭代器模式】</span><br><span class="line">提供一种方法来访问聚合对象中的各个元素，而又不暴露其内部的表示</span><br><span class="line"></span><br><span class="line">【访问者模式】</span><br><span class="line">封装一些施加于某种数据结构之上的操作。一旦这些操作需要修改，</span><br><span class="line">接受这个操作的数据结构可以保持不变</span><br><span class="line"></span><br><span class="line">【备忘录模式】</span><br><span class="line">在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态</span><br><span class="line"></span><br><span class="line">【解释器模式】</span><br><span class="line">给定一个语言，定义它的文法的一种表示，并定义一个解释器，</span><br><span class="line">该解释器使用该表示来解释语言中的句子</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>hth云盘</title>
    <url>/2024/04/12/%E4%BA%91%E7%9B%98%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="云盘项目"><a href="#云盘项目" class="headerlink" title="云盘项目"></a>云盘项目</h1><ol>
<li>Easypan 架构图 <a href="https://docs.qq.com/mind/DY1hlelRXQU10U0hG">https://docs.qq.com/mind/DY1hlelRXQU10U0hG</a></li>
<li>Easypan后端项目构建 <a href="https://docs.qq.com/doc/DY1JTbU9kSkRPUUVY">https://docs.qq.com/doc/DY1JTbU9kSkRPUUVY</a></li>
<li>Easypan前端程序部署 <a href="https://docs.qq.com/doc/DY3l1a0ppWFZsWkdS">https://docs.qq.com/doc/DY3l1a0ppWFZsWkdS</a></li>
<li>Easypan接口文档 <a href="https://console-docs.apipost.cn/preview/eb06c2b023fec08c/637c25bea0ba82bb">https://console-docs.apipost.cn/preview/eb06c2b023fec08c/637c25bea0ba82bb</a></li>
<li>Easypan前端资料 <a href="https://docs.qq.com/doc/DY0VtdnhTVWpVdGxr">https://docs.qq.com/doc/DY0VtdnhTVWpVdGxr</a></li>
</ol>
<p>前端需要后端支撑，调用后端的接口</p>
<h1 id="前端-项目搭建"><a href="#前端-项目搭建" class="headerlink" title="前端-项目搭建"></a>前端-项目搭建</h1><h2 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1.安装nodejs"></a>1.安装nodejs</h2><h3 id="node-版本"><a href="#node-版本" class="headerlink" title="node 版本"></a><strong>node 版本</strong></h3><p>v16.20.2</p>
<h3 id="历史版本下载"><a href="#历史版本下载" class="headerlink" title="历史版本下载"></a><strong>历史版本下载</strong></h3><p><a href="https://nodejs.org/download/release/v16.20.2/">https://nodejs.org/download/release/v16.20.2/</a></p>
<p>v16.20.2 下载地址：</p>
<p>32位操作系统  <a href="https://nodejs.org/download/release/v16.20.2/node-v16.20.2-x86.msi">https://nodejs.org/download/release/v16.20.2/node-v16.20.2-x86.msi</a></p>
<p>64位操作系统  <a href="https://nodejs.org/download/release/v16.20.2/node-v16.20.2-x64.msi">https://nodejs.org/download/release/v16.20.2/node-v16.20.2-x64.msi</a></p>
<h3 id="node镜像"><a href="#node镜像" class="headerlink" title="node镜像"></a><strong>node镜像</strong></h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure>

<p>如果不是这个镜像改成：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>

<h2 id="2-构建项目"><a href="#2-构建项目" class="headerlink" title="2.构建项目"></a><strong>2.构建项目</strong></h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.<strong>创建项目</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vite@latest easypan-front</span><br></pre></td></tr></table></figure>

<p>![image-20240504163611749](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240504163611749.png)</p>
<p>![image-20240504163634032](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240504163634032.png)</p>
<p>![image-20240504163647899](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240504163647899.png)</p>
<h3 id="2-安装所有依赖"><a href="#2-安装所有依赖" class="headerlink" title="2.安装所有依赖"></a>2.安装所有依赖</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install @highlightjs/vue-plugin @moefe/vue-aplayer aplayer axios docx-preview dplayer element-plus highlight.js js-md5 sass sass-loader spark-md5 vue-clipboard3 vue-cookies vue-pdf-embed vue-router vue3-pdfjs xlsx --save</span><br></pre></td></tr></table></figure>

<h3 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h3><p>修改vite.config.js文件如下：</p>
<p>![image-20240504163842689](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240504163842689.png)</p>
<p>启动项目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>![image-20240504163746552](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240504163746552.png)</p>
]]></content>
      <categories>
        <category>Java SpringBoot Vue</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>云盘项目</title>
    <url>/2024/06/02/hthPan/</url>
    <content><![CDATA[<h1 id="hthPan"><a href="#hthPan" class="headerlink" title="hthPan"></a>hthPan</h1><h3 id="切面实现原理"><a href="#切面实现原理" class="headerlink" title="切面实现原理"></a>切面实现原理</h3><ol>
<li><strong>切点定义</strong>： 切点 <code>requestInterceptor</code> 定义了哪些方法需要被拦截，这里是所有带有 <code>@GlobalInterceptor</code> 注解的方法。</li>
<li><strong>前置通知</strong>： <code>@Before(&quot;requestInterceptor()&quot;)</code> 注解表示 <code>interceptorDo</code> 方法会在目标方法执行之前执行。它会获取方法的参数和注解，并根据注解的配置决定是否需要进行参数验证。</li>
<li><strong>参数验证</strong>： <code>validateParams</code> 方法对方法的每个参数进行检查。如果参数上有 <code>@VerifyParam</code> 注解，则根据注解的规则进行验证。对基本类型的参数直接验证，对对象类型的参数则递归验证其字段。</li>
<li><strong>对象字段验证</strong>： <code>checkObjValue</code> 方法通过反射获取对象的所有字段，并对带有 <code>@VerifyParam</code> 注解的字段进行验证。</li>
<li><strong>具体值检查</strong>： <code>checkValue</code> 方法进行具体的验证逻辑，检查值是否为空、长度是否符合要求、是否匹配正则表达式。</li>
</ol>
<h2 id="对于Spring-Boot项目，在一个类中如何拿到session信息？"><a href="#对于Spring-Boot项目，在一个类中如何拿到session信息？" class="headerlink" title="对于Spring Boot项目，在一个类中如何拿到session信息？"></a>对于Spring Boot项目，在一个类中如何拿到session信息？</h2><ol>
<li><p>使用 <code>HttpSession</code> 注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpSession session;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取session属性</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;attributeName&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置session属性</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;attributeName&quot;</span>, attribute);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
<li><p>使用 <code>HttpServletRequest</code></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">// 获取session属性</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;attributeName&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置session属性</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;attributeName&quot;</span>, attribute);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p> 3.使用 <code>RequestContextHolder</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attr</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attr.getRequest();</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取session属性</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;attributeName&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置session属性</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;attributeName&quot;</span>, attribute);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="如果不配置-RedisTemplate会怎么样"><a href="#如果不配置-RedisTemplate会怎么样" class="headerlink" title="如果不配置 RedisTemplate会怎么样"></a>如果不配置 <code>RedisTemplate</code>会怎么样</h2><p>如果你不配置 <code>RedisTemplate</code>，Spring Boot 会自动使用默认的配置。这可能导致以下几种情况：</p>
<h3 id="1-默认的序列化器"><a href="#1-默认的序列化器" class="headerlink" title="1. 默认的序列化器"></a>1. 默认的序列化器</h3><ul>
<li>键的序列化方式：<ul>
<li>默认情况下，Spring Boot 使用 <code>JdkSerializationRedisSerializer</code> 对键进行序列化。这意味着键会被序列化为二进制数据，而不是人类可读的字符串。</li>
</ul>
</li>
<li>值的序列化方式：<ul>
<li>默认情况下，值的序列化器也是 <code>JdkSerializationRedisSerializer</code>，这意味着所有存储在 Redis 中的对象都必须实现 <code>Serializable</code> 接口。</li>
</ul>
</li>
</ul>
<h3 id="2-潜在的问题"><a href="#2-潜在的问题" class="headerlink" title="2. 潜在的问题"></a>2. 潜在的问题</h3><ul>
<li><strong>可读性差</strong>：<ul>
<li>使用 <code>JdkSerializationRedisSerializer</code> 序列化后的键和值在 Redis 中是二进制形式的，这对于调试和手动查看数据非常不方便。</li>
</ul>
</li>
<li><strong>兼容性问题</strong>：<ul>
<li>如果应用程序需要与其他系统共享 Redis 数据，其他系统可能无法理解 <code>JdkSerializationRedisSerializer</code> 的二进制格式。相比之下，使用 <code>StringRedisSerializer</code> 和 <code>JacksonJsonRedisSerializer</code> 更具有通用性。</li>
</ul>
</li>
<li><strong>性能影响</strong>：<ul>
<li>JDK 序列化的性能通常比字符串和 JSON 序列化差。如果存储和读取大量数据，这种性能差异可能会变得明显。</li>
</ul>
</li>
</ul>
<h2 id="秒传"><a href="#秒传" class="headerlink" title="秒传"></a>秒传</h2><p>“秒传”是指在文件上传过程中，通过对比文件的唯一标识（通常是文件的哈希值，如MD5），来判断服务器上是否已经存在相同的文件。如果文件已经存在，则无需再次上传文件数据，只需更新或创建相关的元数据记录即可。这种方式可以极大地提高上传速度和效率。</p>
<h2 id="为什么不能直接调用transferFile方法"><a href="#为什么不能直接调用transferFile方法" class="headerlink" title="为什么不能直接调用transferFile方法"></a>为什么不能直接调用<code>transferFile</code>方法</h2><ol>
<li><strong>事务一致性</strong>：<ul>
<li>如果在事务提交之前调用<code>transferFile</code>方法，方法内部所执行的操作将会受到当前事务的影响。若当前事务回滚，<code>transferFile</code>方法的操作也可能需要回滚。但这并不能自动实现，需要复杂的补偿机制。</li>
<li><code>TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronization() &#123;...&#125;)</code>提供了一个在事务提交后执行代码的机制。这意味着只有在事务成功提交后，才会执行<code>afterCommit()</code>中的代码，确保<code>transferFile</code>方法只在数据一致性保证的情况下执行。</li>
</ul>
</li>
<li><strong>事务状态</strong>：<ul>
<li>直接调用<code>transferFile</code>方法，方法内部如果尝试进行数据库操作，会在当前事务上下文中执行。这可能导致意外的事务传播行为，尤其是在<code>transferFile</code>方法本身可能也需要事务管理的情况下。</li>
<li>使用<code>TransactionSynchronization</code>保证了<code>transferFile</code>在一个新的事务上下文中执行，不会受到当前事务的影响，确保事务隔离性。</li>
</ul>
</li>
</ol>
<h4 id="为什么使用fileInfoService-transferFile而不是直接调用this-transferFile"><a href="#为什么使用fileInfoService-transferFile而不是直接调用this-transferFile" class="headerlink" title="为什么使用fileInfoService.transferFile而不是直接调用this.transferFile"></a>为什么使用<code>fileInfoService.transferFile</code>而不是直接调用<code>this.transferFile</code></h4><ol>
<li><strong>代理对象</strong>：<ul>
<li>Spring AOP（面向切面编程）通常通过代理对象实现事务管理。如果直接调用<code>this.transferFile</code>，不会经过Spring AOP代理，事务管理等AOP增强功能无法应用。</li>
<li>使用<code>fileInfoService.transferFile</code>保证调用的是代理对象的方法，从而确保事务管理等增强功能的正常应用。</li>
</ul>
</li>
<li><strong>延迟加载（Lazy）</strong>：<ul>
<li><code>@Lazy</code>注解用于防止循环依赖，确保在使用时才进行初始化。使用代理对象进行延迟加载避免了在构造时立即初始化，解决了循环依赖问题。</li>
<li>延迟加载还可以优化资源利用，只有在需要使用时才创建相关对象。</li>
</ul>
</li>
</ol>
<h2 id="为什么要用异步方法"><a href="#为什么要用异步方法" class="headerlink" title="为什么要用异步方法"></a>为什么要用异步方法</h2><p><strong>非阻塞调用</strong>：通过异步方法，程序可以在调用该方法后立即返回，而不必等待该方法的执行完成。这意味着主线程在调用异步方法后，不会阻塞等待异步方法执行完成，而是继续执行后续的代码或任务。这样可以避免阻塞调用，提高系统的并发能力和响应速度。</p>
<p><strong>资源利用</strong>：在文件传输这类耗时的操作中，主线程不必等待文件传输完成，而是可以继续处理其他请求或任务，充分利用系统资源，提高系统的吞吐量和并发性能。</p>
<p><strong>提高用户体验</strong>：通过异步处理文件传输，用户可以更快地得到响应，降低了等待时间，提高了用户体验。</p>
<p><strong>降低延迟</strong>：在并发量较高的情况下，采用异步方式处理文件传输可以减少请求的排队等待时间，降低系统的整体延迟。</p>
<p><strong>避免长时间占用资源</strong>：文件传输通常是耗时的操作，如果在主线程中进行同步处理，会导致主线程长时间被占用，影响系统的响应速度和吞吐量。通过异步方式处理文件传输，可以避免长时间占用主线程资源，提高系统的稳定性和可用性。</p>
<h1 id="hth云盘"><a href="#hth云盘" class="headerlink" title="hth云盘"></a><strong>hth云盘</strong></h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a><strong>前端</strong></h2><p>项目名称：Easy云盘</p>
<p>项目描述: 一个仿百度云盘面向C端用户的网盘项目，包括用户注册，QQ快捷登录，文件上传，分片上传，断点续传，秒传，文件在线预览，包括文本，图片，视频，音频，excel，word ，pdf 等文件在线预览，文件分享等功能。</p>
<p>技术选型：Vue3 +  vite3 + vuex</p>
<p>负责内容：</p>
<ul>
<li>用户注册，登录，QQ快捷登录，发送邮箱验证码，找回密码。</li>
<li>文件分片上传，断点续传，秒传，上传进度展示，文件预览，新建目录，文件重命名，文件移动，文件分享，删除，下载 等功能。</li>
<li>文件分享列表，取消分享。</li>
<li>回收站功能，还原文件，彻底删除。</li>
<li>设置模块  1、超级管理员可以看到所有用户上传的文件，可以对文件下载，删除。 2、超级管理员可以对用户进行管理，给用户分配空间，禁用、启用用户3、超级管理员可以对系统进行设置，设置邮箱模板，设置用户注册初始化空间大小。</li>
<li>用户通过分享链接和分享码预览下载其他人分享的文件，同时也可以将文件保存到自己的网盘。</li>
<li>项目难点：</li>
<li>为了实现秒传，在文件上传前需要对文件进行MD5，避免文件过大，浏览器内存溢出，采用SparkMD5对文件分片MD5，文件分片上传，使用Promise 完成多文件同时上传，文件开始上传，暂停上传。</li>
<li>多级目录线性展示，结合路由，刷新后任保持目录层级。</li>
<li>文件预览，根据不同的文件类型，接受不同的数据类型，包括arraybuffer,blob,json类型的数据。</li>
<li>文件分享，用户打开链接后需要输入分享码才可以读取文件，输入后，在一个会话内状态一直保持，session会话结束后，需要再次输入分享码。</li>
</ul>
<p>项目收获：</p>
<p>熟悉了第三方登录接入流程，比如QQ登录。云盘项目不是简单的增删改查，对大文件采用递归调用完成分片MD5处理，大文件分片上传，解决了实际项目开发中对大文件的上传处理。根据不同的文件类型，使用不同的插件完成文件的在线预览。比如视频的分片播放，pdf,excel,word 在线预览。通过这个项目让我对vue的相关知识点，比如数据双向绑定，组合式Api,生命周期函数，状态管理，路由，watch，父子组件，组件封装，表单校验，页面布局，css编写等有了更加深刻的认识，此项目将所学的前端知识进行了综合运用。</p>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a><strong>后端</strong></h2><p>项目名称：Easy云盘</p>
<p>项目描述: 一个仿百度云盘面向C端用户的网盘项目，包括用户注册，QQ快捷登录，文件上传，分片上传，断点续传，秒传，文件在线预览，包括文本，图片，视频，音频，excel，word ，pdf 等文件在线预览，文件分享等功能。</p>
<p>技术选型：Springboot + mybatis + mysql+redis+ffmpeg</p>
<p>负责内容：</p>
<ul>
<li>用户注册，登录，QQ快捷登录，发送邮箱验证码，找回密码。</li>
<li>文件分片上传，秒传，新建目录，预览，文件重命名，文件移动，文件分享，删除，下载 等功能。</li>
<li>文件分享列表，取消分享。</li>
<li>回收站功能，还原文件，彻底删除。</li>
<li>设置模块  （1）超级管理员角色查询所有用户上传的文件，可以对文件下载，删除。 （2）超级管理员可以对用户进行管理，给用户分配空间，禁用、启用用户（3）超级管理员可以对系统进行设置，设置邮箱模板，设置用户注册初始化空间大小。</li>
<li>用户通过分享链接和分享码预览下载其他人分享的文件，同时也可以将文件保存到自己的网盘。</li>
<li>项目难点：</li>
<li>文件分片上传，通过文件MD5实现文件秒传，文件分片上传后，异步对文件进行合并处理，视频文件，调用ffmpeg生成视频缩略图，将文件分片成ts文件。</li>
<li>通过redis缓存实时计算用户上传过程中空间占用情况。</li>
<li>多级目录线性展示，通过递归查询，查询目录的所有父级目录。</li>
<li>用户上传文件，同一级目录重名文件自动重命名，文件移动，同名文件重命名。</li>
</ul>
<p>项目收获：</p>
<p>熟悉了第三方登录接入流程，比如QQ登录。让我熟练使用Springboot，采用spring的aop 的注解方式 实现了不同的接口权限不一样，比如普通用户和超级管理员权限的区别，同时使用aop和java反射实现了后端参数校验。使用redis缓存了一些系统设置，用户上传过程中空间使用实时计算，避免反复查询数据库。项目中解决了如何实现异步调用事务的问题，解决循环依赖的问题，如何调用第三方插件比如ffmpeg来实现对文件的分片处理，合并处理。 云盘项目让我学习到如何从功能点去设计数据库，在数据库设计的时候考虑到后续的扩展，比如文件数据的分表处理，可以根据用户id hash 取模的方式对文件数据进行分表处理，在开发过程中，通过spring的核心 aop来实现与业务的解耦。 该项目让我对java，数据库 所学知识进行了综合运用，让我能够使用java从0开发一个完整的项目。</p>
<ol>
<li>分割文件ID字符串并查询对应文件信息。</li>
<li>查找选中文件的子文件夹及其文件的ID。</li>
<li>根据用户身份（是否为管理员）批量删除选中的文件及其子文件夹中的文件。</li>
<li>重新计算并更新用户的已用存储空间。</li>
<li>更新缓存中的用户空间使用信息。</li>
</ol>
<p>该方法通过递归查找子文件夹及其文件，确保所有相关文件都被正确处理，同时区分管理员和普通用户的操作权限。</p>
<h1 id="后端项目描述"><a href="#后端项目描述" class="headerlink" title="后端项目描述"></a>后端项目描述</h1><p>表结构：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 邮箱验证码 </span></span><br><span class="line"><span class="comment">-- auto-generated definition</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> email_code</span><br><span class="line">(</span><br><span class="line">    email       <span class="type">varchar</span>(<span class="number">150</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    code        <span class="type">varchar</span>(<span class="number">5</span>)   <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    create_time datetime     <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    status      tinyint(<span class="number">1</span>)   <span class="keyword">null</span> comment <span class="string">&#x27;0:未使用  1:已使用&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (email, code)</span><br><span class="line">)</span><br><span class="line">    comment <span class="string">&#x27;邮箱验证码&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 用户信息 </span></span><br><span class="line"><span class="comment">-- auto-generated definition</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_info</span><br><span class="line">(</span><br><span class="line">    user_id         <span class="type">varchar</span>(<span class="number">10</span>)      <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户ID&#x27;</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    nick_name       <span class="type">varchar</span>(<span class="number">20</span>)      <span class="keyword">null</span> comment <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">    email           <span class="type">varchar</span>(<span class="number">150</span>)     <span class="keyword">null</span> comment <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    qq_open_id      <span class="type">varchar</span>(<span class="number">35</span>)      <span class="keyword">null</span> comment <span class="string">&#x27;qqOpenID&#x27;</span>,</span><br><span class="line">    qq_avatar       <span class="type">varchar</span>(<span class="number">150</span>)     <span class="keyword">null</span> comment <span class="string">&#x27;qq头像&#x27;</span>,</span><br><span class="line">    password        <span class="type">varchar</span>(<span class="number">50</span>)      <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    join_time       datetime         <span class="keyword">null</span> comment <span class="string">&#x27;加入时间&#x27;</span>,</span><br><span class="line">    last_login_time datetime         <span class="keyword">null</span> comment <span class="string">&#x27;最后登录时间&#x27;</span>,</span><br><span class="line">    status          tinyint          <span class="keyword">null</span> comment <span class="string">&#x27;0:禁用 1:正常&#x27;</span>,</span><br><span class="line">    use_space       <span class="type">bigint</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">null</span> comment <span class="string">&#x27;使用空间单位byte&#x27;</span>,</span><br><span class="line">    total_space     <span class="type">bigint</span>           <span class="keyword">null</span> comment <span class="string">&#x27;总空间&#x27;</span>,</span><br><span class="line">    <span class="keyword">constraint</span> key_email</span><br><span class="line">        <span class="keyword">unique</span> (email),</span><br><span class="line">    <span class="keyword">constraint</span> key_nick_name</span><br><span class="line">        <span class="keyword">unique</span> (nick_name),</span><br><span class="line">    <span class="keyword">constraint</span> key_qq_open_id</span><br><span class="line">        <span class="keyword">unique</span> (qq_open_id)</span><br><span class="line">)</span><br><span class="line">    comment <span class="string">&#x27;用户信息&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="1-生成验证码图像"><a href="#1-生成验证码图像" class="headerlink" title="1.生成验证码图像"></a>1.生成验证码图像</h2><ol>
<li><strong>映射请求</strong>：将HTTP请求<code>/checkCode</code>映射到<code>checkCode</code>方法。</li>
<li><strong>创建验证码对象</strong>：使用<code>CreateImageCode</code>生成指定尺寸和特征的验证码图像。</li>
<li><strong>设置响应头</strong>：禁止缓存，设置响应内容类型为JPEG图片。</li>
<li><strong>获取验证码字符串</strong>：从验证码对象中获取生成的验证码字符串。</li>
<li><strong>存储验证码</strong>：根据<code>type</code>参数的值，将验证码字符串存储在会话中的不同属性中。</li>
<li><strong>输出验证码图像</strong>：将生成的验证码图像写入HTTP响应的输出流。</li>
</ol>
<p>这样，客户端在访问<code>/checkCode</code>时会接收到一张验证码图片，并在会话中保存了对应的验证码字符串以供后续验证。</p>
<h2 id="2-发送邮箱验证码"><a href="#2-发送邮箱验证码" class="headerlink" title="2.发送邮箱验证码"></a>2.发送邮箱验证码</h2><p>验证用户输入的图形验证码是否正确。</p>
<p>如果图形验证码正确，控制层调用服务层发送电子邮件验证码。</p>
<p>验证用户邮箱是否已存在（仅针对注册类型）。如果存在，抛出异常。</p>
<p>生成随机的电子邮件验证码。</p>
<p>发送验证码到指定邮箱。</p>
<p>禁用旧的验证码。</p>
<p>将新的验证码存储到数据库中。</p>
<p>移除会话中的图形验证码，确保安全性。</p>
<p>返回一个成功的响应对象给客户端。</p>
<h2 id="3-AOP参数校验"><a href="#3-AOP参数校验" class="headerlink" title="3.AOP参数校验"></a>3.AOP参数校验</h2><h3 id="checkObjValue方法："><a href="#checkObjValue方法：" class="headerlink" title="checkObjValue方法："></a>checkObjValue方法：</h3><p>通过反射机制获取对象的所有字段，并根据字段上的 <code>@VerifyParam</code> 注解进行验证。它首先检查字段是否包含 <code>@VerifyParam</code> 注解，然后获取字段的值并进行验证。如果验证失败，会抛出 <code>BusinessException</code> 异常。在整个过程中，如果发生异常，会记录日志并抛出适当的异常。</p>
<h3 id="checkValue方法："><a href="#checkValue方法：" class="headerlink" title="checkValue方法："></a>checkValue方法：</h3><ol>
<li>检查值是否为空，并根据 <code>required</code> 属性进行验证。</li>
<li>检查值的长度是否在 <code>min</code> 和 <code>max</code> 指定的范围内。</li>
<li>使用正则表达式验证值的格式。</li>
</ol>
<p>如果任一验证失败，都会抛出 <code>SystemException</code> 异常</p>
<p>如果不使用AOP切面注解，然后使用空参数或错参数去请求后端接口，后端拿到的是空对象，在后续的执行中就会导致空指针，使用了AOP注解，再次用非法参数去请求，就不会出现空指针，被AOP层进行了处理</p>
<h3 id="综合作用"><a href="#综合作用" class="headerlink" title="综合作用"></a>综合作用</h3><ol>
<li><strong>自动参数验证</strong>：在请求处理之前，参数会根据 <code>@VerifyParam</code> 注解中的规则进行自动验证。如果参数无效，将会抛出异常，阻止请求继续处理。这种机制确保了输入参数的有效性，提高了代码的健壮性和安全性。</li>
<li><strong>全局拦截</strong>：<code>@GlobalInterceptor</code> 注解启用全局拦截器，可以在方法执行之前进行额外的检查和处理，比如参数验证、日志记录、权限检查等。它将特定的拦截逻辑从业务逻辑中分离出来，使代码更加清晰和模块化。</li>
</ol>
<h2 id="4-用户注册"><a href="#4-用户注册" class="headerlink" title="4.用户注册"></a>4.用户注册</h2><p>验证请求参数的有效性。</p>
<p>验证用户输入的图形验证码是否正确。</p>
<p>调用用户服务进行注册操作。</p>
<ul>
<li>验证邮箱和昵称的唯一性。</li>
<li>验证邮箱验证码的正确性。</li>
<li>生成新的用户ID。</li>
<li>创建新的用户信息并进行初始化设置。</li>
<li>将用户信息保存到数据库中。</li>
</ul>
<p>通过使用事务管理注解，确保方法在执行过程中如果出现任何异常，所有的数据库操作将被回滚，以保证数据的一致性和完整性。</p>
<p>注册成功后返回成功的响应信息。</p>
<p>确保会话中的图形验证码在使用后被清除。</p>
<h2 id="5-用户登录"><a href="#5-用户登录" class="headerlink" title="5.用户登录"></a>5.用户登录</h2><p>验证请求参数的有效性。</p>
<p>验证用户输入的图形验证码是否正确。</p>
<p>调用用户服务进行登录操作。</p>
<ul>
<li>根据邮箱查询用户信息，验证用户的存在性和密码的正确性。</li>
<li>检查用户账号状态，防止禁用的账号登录。</li>
<li>更新用户的最后登录时间。</li>
<li>创建包含用户信息的会话对象<code>SessionWebUserDto</code>。</li>
<li>检查用户是否为管理员，并设置相应的属性。</li>
<li>设置用户的空间使用信息并保存到Redis中。</li>
<li>返回会话用户对象。</li>
</ul>
<p>将用户会话信息存储到Redis中。</p>
<p>登录成功后返回成功的响应信息。</p>
<p>确保会话中的图形验证码在使用后被清除。</p>
<h2 id="6-根据邮箱找回密码"><a href="#6-根据邮箱找回密码" class="headerlink" title="6.根据邮箱找回密码"></a>6.根据邮箱找回密码</h2><p>根据邮箱查询用户信息,  如果用户不存在则抛出 <code>SystemException</code> 异常，提示“邮箱账号不存在”。</p>
<p>校验邮箱验证码</p>
<p>更新用户密码 ,使用 <code>MD5</code> 加密密码并更新用户信息到数据库中。</p>
<h2 id="7-用户头像"><a href="#7-用户头像" class="headerlink" title="7. 用户头像"></a>7. 用户头像</h2><h3 id="获取用户头像"><a href="#获取用户头像" class="headerlink" title="获取用户头像"></a>获取用户头像</h3><p>通过 <code>@RequestMapping(&quot;/getAvatar/&#123;userId&#125;&quot;)</code> 注解标识的 <code>getAvatar</code> 方法，用于获取指定用户的头像。具体步骤如下：</p>
<ol>
<li><strong>检查头像文件夹是否存在</strong>：<ul>
<li>通过 <code>appConfig.getProjectFolder()</code> 获取项目根目录，并结合常量路径构建头像文件夹路径。</li>
<li>如果文件夹不存在，则创建文件夹。</li>
</ul>
</li>
<li><strong>构建用户头像路径</strong>：<ul>
<li>使用用户ID构建用户头像的完整路径。</li>
<li>检查该路径下的文件是否存在。如果不存在，则检查默认头像文件是否存在。</li>
<li>如果默认头像文件也不存在，调用 <code>printNoDefaultImage</code> 方法返回提示信息。</li>
</ul>
</li>
<li><strong>设置响应内容类型并读取头像文件</strong>：<ul>
<li>设置响应类型为 <code>image/jpg</code>。</li>
<li>使用 <code>FileUtils.readFile</code> 方法将头像文件写入响应。</li>
</ul>
</li>
</ol>
<h3 id="更新用户头像"><a href="#更新用户头像" class="headerlink" title="更新用户头像"></a>更新用户头像</h3><p>通过 <code>@RequestMapping(&quot;/updateUserAvatar&quot;)</code> 注解标识的 <code>updateUserAvatar</code> 方法，用于更新用户的头像。具体步骤如下：</p>
<ol>
<li><strong>获取当前会话中的用户信息</strong>：<ul>
<li>从会话中获取 <code>SessionWebUserDto</code> 对象，该对象包含用户的基本信息。</li>
</ul>
</li>
<li><strong>检查并创建目标文件夹</strong>：<ul>
<li>构建保存头像的文件夹路径，如果文件夹不存在，则创建文件夹。</li>
</ul>
</li>
<li><strong>保存上传的头像文件</strong>：<ul>
<li>使用 <code>MultipartFile</code> 对象的 <code>transferTo</code> 方法将上传的头像文件保存到目标路径。</li>
</ul>
</li>
<li><strong>更新用户头像信息</strong>：<ul>
<li>创建一个新的 <code>UserInfo</code> 对象并清空QQ头像字段。</li>
<li>调用 <code>userInfoMapper.updateAvatarByUserId</code> 方法更新数据库中的用户头像信息。</li>
</ul>
</li>
<li><strong>更新会话中的用户信息</strong>：<ul>
<li>将用户的头像信息设置为null。</li>
<li>更新会话中的用户信息。</li>
</ul>
</li>
<li><strong>返回成功响应</strong>：<ul>
<li>返回一个成功的响应对象。</li>
</ul>
</li>
</ol>
<h2 id="8-修改密码"><a href="#8-修改密码" class="headerlink" title="8.修改密码"></a>8.修改密码</h2><p><strong>从会话中获取当前用户信息</strong>。</p>
<p><strong>验证并获取新的密码</strong>。</p>
<p><strong>对密码进行加密</strong>。</p>
<p><strong>更新数据库中的用户密码</strong>。</p>
<p><strong>返回成功响应</strong>。</p>
<h2 id="9-文件管理"><a href="#9-文件管理" class="headerlink" title="9.文件管理"></a>9.文件管理</h2><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构:"></a>表结构:</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> file_info</span><br><span class="line">(</span><br><span class="line">    file_id          <span class="type">varchar</span>(<span class="number">10</span>)          <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;文件ID&#x27;</span>,</span><br><span class="line">    user_id          <span class="type">varchar</span>(<span class="number">10</span>)          <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">    file_md5         <span class="type">varchar</span>(<span class="number">32</span>)          <span class="keyword">null</span> comment <span class="string">&#x27;md5值，第一次上传记录&#x27;</span>,</span><br><span class="line">    file_pid         <span class="type">varchar</span>(<span class="number">10</span>)          <span class="keyword">null</span> comment <span class="string">&#x27;父级ID&#x27;</span>,</span><br><span class="line">    file_size        <span class="type">bigint</span>               <span class="keyword">null</span> comment <span class="string">&#x27;文件大小&#x27;</span>,</span><br><span class="line">    file_name        <span class="type">varchar</span>(<span class="number">200</span>)         <span class="keyword">null</span> comment <span class="string">&#x27;文件名称&#x27;</span>,</span><br><span class="line">    file_cover       <span class="type">varchar</span>(<span class="number">100</span>)         <span class="keyword">null</span> comment <span class="string">&#x27;封面&#x27;</span>,</span><br><span class="line">    file_path        <span class="type">varchar</span>(<span class="number">100</span>)         <span class="keyword">null</span> comment <span class="string">&#x27;文件路径&#x27;</span>,</span><br><span class="line">    create_time      datetime             <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    last_update_time datetime             <span class="keyword">null</span> comment <span class="string">&#x27;最后更新时间&#x27;</span>,</span><br><span class="line">    folder_type      tinyint(<span class="number">1</span>)           <span class="keyword">null</span> comment <span class="string">&#x27;0:文件 1:目录&#x27;</span>,</span><br><span class="line">    file_category    tinyint(<span class="number">1</span>)           <span class="keyword">null</span> comment <span class="string">&#x27;1:视频 2:音频  3:图片 4:文档 5:其他&#x27;</span>,</span><br><span class="line">    file_type        tinyint(<span class="number">1</span>)           <span class="keyword">null</span> comment <span class="string">&#x27;1:视频 2:音频  3:图片 4:pdf 5:doc 6:excel 7:txt 8:code 9:zip 10:其他&#x27;</span>,</span><br><span class="line">    status           tinyint(<span class="number">1</span>)           <span class="keyword">null</span> comment <span class="string">&#x27;0:转码中 1:转码失败 2:转码成功&#x27;</span>,</span><br><span class="line">    recovery_time    datetime             <span class="keyword">null</span> comment <span class="string">&#x27;回收站时间&#x27;</span>,</span><br><span class="line">    del_flag         tinyint(<span class="number">1</span>) <span class="keyword">default</span> <span class="number">2</span> <span class="keyword">null</span> comment <span class="string">&#x27;删除标记 0:删除  1:回收站  2:正常&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (file_id, user_id)</span><br><span class="line">)</span><br><span class="line">comment <span class="string">&#x27;文件信息&#x27;</span>;</span><br><span class="line"></span><br><span class="line">索引:</span><br><span class="line"><span class="keyword">create</span> index idx_create_time</span><br><span class="line">    <span class="keyword">on</span> file_info (create_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_del_flag</span><br><span class="line">    <span class="keyword">on</span> file_info (del_flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_file_pid</span><br><span class="line">    <span class="keyword">on</span> file_info (file_pid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_md5</span><br><span class="line">    <span class="keyword">on</span> file_info (file_md5);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_recovery_time</span><br><span class="line">    <span class="keyword">on</span> file_info (recovery_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_user_id</span><br><span class="line">    <span class="keyword">on</span> file_info (user_id);</span><br><span class="line">索引解释:</span><br><span class="line">idx_create_time：在 create_time 列上创建索引，便于按创建时间查询和排序。</span><br><span class="line">idx_del_flag：在 del_flag 列上创建索引，便于按删除状态查询。</span><br><span class="line">idx_file_pid：在 file_pid 列上创建索引，便于按父级ID查询，支持文件夹结构的快速查找。</span><br><span class="line">idx_md5：在 file_md5 列上创建索引，便于通过MD5值快速查找文件，防止重复上传。</span><br><span class="line">idx_recovery_time：在 recovery_time 列上创建索引，便于按回收站时间查询和管理。</span><br><span class="line">idx_user_id：在 user_id 列上创建索引，便于按用户ID查询文件。</span><br></pre></td></tr></table></figure>

<h3 id="索引的作用"><a href="#索引的作用" class="headerlink" title="索引的作用"></a>索引的作用</h3><p>索引主要用于加速查询。数据库在查询数据时，如果查询条件涉及到了索引字段，数据库引擎会自动使用索引来查找数据，从而减少数据扫描的范围，提高查询速度。例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> file_info <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;12345&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>如果 <code>user_id</code> 字段上有索引，数据库引擎会使用这个索引来快速定位 <code>user_id</code> 为 <code>12345</code> 的记录，而不是扫描整个表。</p>
<h3 id="分页查询文件信息"><a href="#分页查询文件信息" class="headerlink" title="分页查询文件信息"></a>分页查询文件信息</h3><p>包含一个控制器方法<code>loadDataList</code>和一个分页查询方法<code>findListByPage</code></p>
<p><code>loadDataList</code>：</p>
<p>用于处理HTTP请求，通过会话获取用户信息。</p>
<p><code>findListByPage</code>：</p>
<p>实现分页查询的逻辑，包括计算记录总数、设置分页信息、查询数据以及返回结果。</p>
]]></content>
      <categories>
        <category>SpringBoot Vue</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式存储系统</title>
    <url>/2024/06/20/SpringBoot+Vue3%20+Element%20Plus%20%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="SpringBoot-Vue3-Element-Plus-的分布式存储系统"><a href="#SpringBoot-Vue3-Element-Plus-的分布式存储系统" class="headerlink" title="SpringBoot+Vue3 +Element Plus 的分布式存储系统"></a>SpringBoot+Vue3 +Element Plus 的分布式存储系统</h1><h1 id="为什么要做这个项目"><a href="#为什么要做这个项目" class="headerlink" title="为什么要做这个项目"></a>为什么要做这个项目</h1><h3 id="数据存取与安全是数据时代的基石，个人隐私现在愈发重要，拥有属于自己的高安全性存储系统迫在眉睫。本项目从项目设计、实现、优化、压力与并发安全测试、部署上线全流程实现业务俱全的网盘系统，并解决数据存储安全问题。"><a href="#数据存取与安全是数据时代的基石，个人隐私现在愈发重要，拥有属于自己的高安全性存储系统迫在眉睫。本项目从项目设计、实现、优化、压力与并发安全测试、部署上线全流程实现业务俱全的网盘系统，并解决数据存储安全问题。" class="headerlink" title="数据存取与安全是数据时代的基石，个人隐私现在愈发重要，拥有属于自己的高安全性存储系统迫在眉睫。本项目从项目设计、实现、优化、压力与并发安全测试、部署上线全流程实现业务俱全的网盘系统，并解决数据存储安全问题。"></a>数据存取与安全是数据时代的基石，个人隐私现在愈发重要，拥有属于自己的高安全性存储系统迫在眉睫。本项目从项目设计、实现、优化、压力与并发安全测试、部署上线全流程实现业务俱全的网盘系统，并解决数据存储安全问题。</h3><h1 id="使用到的技术"><a href="#使用到的技术" class="headerlink" title="使用到的技术"></a>使用到的技术</h1><p>Web端：VUE 3      Eelment Plus     pinia</p>
<p>后端框架：Spring Boot   SpringMVC  Mybatis-Plus</p>
<p>中间件：RocketMQ   ZooKeeper  Caffeine</p>
<p>存储：Redis   Mysql   FastDFS&#x2F;OSS</p>
<p>持续集成：Git  Maven  Spug</p>
<p>maven版本3.6.3   RocketMQ版本2.0.3</p>
<p>RocketMQ  jar包导入:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -Dfile=rocketmq-spring-boot-starter.jar -DgroupId=org.apache.rocketmq -DartifactId=rocketmq-spring-boot-starter -Dversion=2.0.3 -Dpackaging=jar</span><br></pre></td></tr></table></figure>

<h2 id="亮点技术概要"><a href="#亮点技术概要" class="headerlink" title="亮点技术概要"></a>亮点技术概要</h2><ul>
<li>采用最新的VUE3.0+Element-Plus等技术搭建前端工程</li>
<li>利用Spring Event和RocketMQ来异步解耦关联业务</li>
<li>利用Caffeine、Redis等缓存技术解决高并发的业务痛点</li>
<li>利用Redis组件布隆过滤器，解决缅存穿透问题</li>
<li>利用“零拷贝”技术搭建本地文件高性能存储引擎，并集成FastDFS和OSS文件存储方案</li>
<li>利用Redis和ZooKeeper搭建分布式锁方案，解决多实例部署的数据—致性问题</li>
<li>利用Spug.Git、Maven等持续集成工具组建短小精悍的持续集成框架</li>
</ul>
<h1 id="项目业务模块划分"><a href="#项目业务模块划分" class="headerlink" title="项目业务模块划分"></a>项目业务模块划分</h1><h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><ul>
<li>登录</li>
<li>注册</li>
<li>忘记密码</li>
<li>在线修改密码</li>
<li>登出</li>
<li>用户搜索历史</li>
</ul>
<h2 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h2><ul>
<li>创建文件夹</li>
<li>上传文件</li>
<li>重命名文件</li>
<li>下载文件</li>
<li>删除文件</li>
<li>移动文件</li>
<li>复制文件</li>
<li>查询和搜索文件</li>
</ul>
<h2 id="回收站模块"><a href="#回收站模块" class="headerlink" title="回收站模块"></a>回收站模块</h2><ul>
<li>查询回收站文件</li>
<li>清空回收站</li>
<li>还原文件</li>
</ul>
<h2 id="分享模块"><a href="#分享模块" class="headerlink" title="分享模块"></a>分享模块</h2><ul>
<li>创建分享</li>
<li>查看分享</li>
<li>取消分享</li>
<li>保存到Pan</li>
<li>文件下载</li>
</ul>
<h2 id="用户模块技术点"><a href="#用户模块技术点" class="headerlink" title="用户模块技术点"></a>用户模块技术点</h2><ul>
<li>全局唯一用户名称唯一索引+特定异常处理</li>
<li>全局用户信息上下文的搭建拦截器+JWT全局token+ThreadLocal</li>
</ul>
<h2 id="文件模块技术点"><a href="#文件模块技术点" class="headerlink" title="文件模块技术点"></a>文件模块技术点</h2><ul>
<li>优化文件上传下载sendfile零拷贝、文件软连接</li>
<li>文件分片上传、断点续传、秒传文件唯一ID+缓存文件分片</li>
<li>文件快速移动、复制|文件软连接</li>
<li>文件系统对接第三方存储|策略模式抽象</li>
</ul>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="开发环境配置："><a href="#开发环境配置：" class="headerlink" title="开发环境配置："></a>开发环境配置：</h2><ul>
<li>SpringBoot ：2.1.9.RELEASE</li>
<li>Swagger2：2.8.0</li>
<li>Mybatis-Plus：3.3.2</li>
</ul>
<h2 id="中间件环境配置："><a href="#中间件环境配置：" class="headerlink" title="中间件环境配置："></a>中间件环境配置：</h2><ul>
<li>Redis: 6.2.6</li>
<li>ZooKeeper: 8.0</li>
<li>RocketMQ: 4.5.1</li>
</ul>
<h2 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hth-hthpan-server</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">    <span class="attr">ansi:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">load-on-startup:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">3072MB</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">3072MB</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="string">env,beans</span></span><br><span class="line"></span><br><span class="line"><span class="attr">swagger2:</span></span><br><span class="line">  <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">group-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">  <span class="attr">base-package:</span> <span class="string">com.hth.hthpan</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">hth-pan-server</span> <span class="string">docs</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">hth-pan-server</span> <span class="string">docs</span></span><br><span class="line">  <span class="attr">terms-of-service-url:</span> <span class="string">http://127.0.0.1:$&#123;server.port&#125;</span></span><br><span class="line">  <span class="attr">contact-name:</span> <span class="string">slowfever</span></span><br><span class="line">  <span class="attr">contact-url:</span> <span class="string">https://www.slowfever01.top</span></span><br><span class="line">  <span class="attr">contact-email:</span> <span class="number">2093913128</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure>

<h1 id="创建模块架构"><a href="#创建模块架构" class="headerlink" title="创建模块架构"></a>创建模块架构</h1><p>![image-20240625163821709](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240625163821709.png)</p>
<p>![image-20240625165105434](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240625165105434.png)</p>
<p>![image-20240625165133979](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240625165133979.png)</p>
<h1 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h1><h2 id="常量类"><a href="#常量类" class="headerlink" title="常量类"></a>常量类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hthpan公用基础常量类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="comment">//公用字符串分隔符</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">COMMON_SEPARATOR</span> <span class="operator">=</span> <span class="string">&quot;__,__&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">EMPTY_STR</span> <span class="operator">=</span> StringUtils.EMPTY;</span><br><span class="line">    <span class="type">String</span> <span class="variable">POINT_STR</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">SLASH_STR</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">ZERO_LONG</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ZERO_INT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ONE_INT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">TWO_INT</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">MINUS_ONE_INT</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">TRUE_STR</span> <span class="operator">=</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">FALSE_STR</span> <span class="operator">=</span> <span class="string">&quot;false&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">BASE_COMPONENT_SCAN_PATH</span> <span class="operator">=</span> <span class="string">&quot;com.hth.hthpan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="公用业务异常类"><a href="#公用业务异常类" class="headerlink" title="公用业务异常类"></a>公用业务异常类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="comment">//错误码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ResponseCode responseCode)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = responseCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = responseCode.getDesc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code,String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ResponseCode.ERROR_PARAM.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = ResponseCode.ERROR_PARAM.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = ResponseCode.ERROR_PARAM.getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="响应类"><a href="#响应类" class="headerlink" title="响应类"></a>响应类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公共返回对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="comment">//// 保证json序列化的时候，如果属性为null，key也就一起消失</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Integer code, String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">        <span class="built_in">this</span>.msg=msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Integer code, String msg,T data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">        <span class="built_in">this</span>.msg=msg;</span><br><span class="line">        <span class="built_in">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="built_in">this</span>.code,ResponseCode.SUCCESS.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;(ResponseCode.SUCCESS.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;(ResponseCode.SUCCESS.getCode(), message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">data</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;(ResponseCode.SUCCESS.getCode(), ResponseCode.SUCCESS.getDesc(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;(ResponseCode.ERROR.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">fail</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;(ResponseCode.ERROR.getCode(), message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义状态码和msg</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;(code, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">fail</span><span class="params">(ResponseCode responseCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;(responseCode.getCode(), responseCode.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="响应枚举类"><a href="#响应枚举类" class="headerlink" title="响应枚举类"></a>响应枚举类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResponseCode</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">&quot;SUCCESS&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ERROR(<span class="number">1</span>, <span class="string">&quot;ERROR&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TOKEN_EXPIRE(<span class="number">2</span>, <span class="string">&quot;TOKEN_EXPIRE&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ERROR_PARAM(<span class="number">3</span>, <span class="string">&quot;ERROR_PARAM&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无权限访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ACCESS_DENIED(<span class="number">4</span>, <span class="string">&quot;ACCESS_DENIED&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分享的文件丢失</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SHARE_FILE_MISS(<span class="number">5</span>, <span class="string">&quot;分享的文件丢失&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分享已经被取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SHARE_CANCELLED(<span class="number">6</span>, <span class="string">&quot;分享已经被取消&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分享已过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SHARE_EXPIRE(<span class="number">7</span>, <span class="string">&quot;分享已过期&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEED_LOGIN(<span class="number">10</span>, <span class="string">&quot;NEED_LOGIN&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AES128Util</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认向量常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IV</span> <span class="operator">=</span> <span class="string">&quot;akjsfakjshf@#!~&amp;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">P_KEY</span> <span class="operator">=</span> StringUtils.reverse(IV);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AES_STR</span> <span class="operator">=</span> <span class="string">&quot;AES&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INSTANCE_STR</span> <span class="operator">=</span> <span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密 128位</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 需要加密的原内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] aesEncrypt(<span class="type">byte</span>[] content) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SecretKeySpec</span> <span class="variable">secretKeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(P_KEY.getBytes(), AES_STR);</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(INSTANCE_STR);</span><br><span class="line">            <span class="type">IvParameterSpec</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(IV.getBytes());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, iv);</span><br><span class="line">            <span class="type">byte</span>[] encrypted = cipher.doFinal(content);</span><br><span class="line">            <span class="keyword">return</span> encrypted;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 解密前的byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> result  解密后的byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] aesDecode(<span class="type">byte</span>[] content) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SecretKeySpec</span> <span class="variable">secretKeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(P_KEY.getBytes(), AES_STR);</span><br><span class="line">            <span class="type">IvParameterSpec</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(IV.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(INSTANCE_STR);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, iv);</span><br><span class="line">            <span class="type">byte</span>[] result = cipher.doFinal(content);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密字符串 128位</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 需要加密的原内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">aesEncryptString</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(content)) &#123;</span><br><span class="line">            <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SecretKeySpec</span> <span class="variable">secretKeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(P_KEY.getBytes(), AES_STR);</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(INSTANCE_STR);</span><br><span class="line">            <span class="type">IvParameterSpec</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(IV.getBytes());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, iv);</span><br><span class="line">            <span class="type">byte</span>[] encrypted = cipher.doFinal(content.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">return</span> Base64.encode(encrypted);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 解密前的byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> result  解密后的byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">aesDecodeString</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(content)) &#123;</span><br><span class="line">            <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SecretKeySpec</span> <span class="variable">secretKeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(P_KEY.getBytes(), AES_STR);</span><br><span class="line">            <span class="type">IvParameterSpec</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(IV.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(INSTANCE_STR);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, iv);</span><br><span class="line">            <span class="type">byte</span>[] result = cipher.doFinal(Base64.decode(content));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(result, <span class="number">0</span>, result.length, StandardCharsets.UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公用的文件工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件的后缀</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFileSuffix</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(filename) || filename.lastIndexOf(Constants.POINT_STR) == Constants.MINUS_ONE_INT) &#123;</span><br><span class="line">            <span class="keyword">return</span> Constants.EMPTY_STR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename.substring(filename.lastIndexOf(Constants.POINT_STR)).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件的类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFileExtName</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(filename) || filename.lastIndexOf(Constants.POINT_STR) == Constants.MINUS_ONE_INT) &#123;</span><br><span class="line">            <span class="keyword">return</span> Constants.EMPTY_STR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename.substring(filename.lastIndexOf(Constants.POINT_STR) + Constants.ONE_INT).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过文件大小转化文件大小的展示名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalSize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">byteCountToDisplaySize</span><span class="params">(Long totalSize)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(totalSize)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Constants.EMPTY_STR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> org.apache.commons.io.FileUtils.byteCountToDisplaySize(totalSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除物理文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> realFilePathList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteFiles</span><span class="params">(List&lt;String&gt; realFilePathList)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(realFilePathList)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String realFilePath : realFilePathList) &#123;</span><br><span class="line">            org.apache.commons.io.FileUtils.forceDelete(<span class="keyword">new</span> <span class="title class_">File</span>(realFilePath));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成文件的存储路径</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 生成规则：基础路径 + 年 + 月 + 日 + 随机的文件名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateStoreFileRealPath</span><span class="params">(String basePath, String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(basePath)</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(DateUtil.thisYear())</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(DateUtil.thisMonth() + <span class="number">1</span>)</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(DateUtil.thisDayOfMonth())</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(com.hth.hthpan.core.utils.UUIDUtil.getUUID())</span><br><span class="line">                .append(getFileSuffix(filename))</span><br><span class="line">                .toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将文件的输入流写入到文件中</span></span><br><span class="line"><span class="comment">     * 使用底层的sendfile零拷贝来提高传输效率</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeStream2File</span><span class="params">(InputStream inputStream, File targetFile, Long totalSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        createFile(targetFile);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(targetFile, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">outputChannel</span> <span class="operator">=</span> randomAccessFile.getChannel();</span><br><span class="line">        <span class="type">ReadableByteChannel</span> <span class="variable">inputChannel</span> <span class="operator">=</span> Channels.newChannel(inputStream);</span><br><span class="line">        outputChannel.transferFrom(inputChannel, <span class="number">0L</span>, totalSize);</span><br><span class="line">        inputChannel.close();</span><br><span class="line">        outputChannel.close();</span><br><span class="line">        randomAccessFile.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件</span></span><br><span class="line"><span class="comment">     * 包含父文件一起视情况去创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetFile</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createFile</span><span class="params">(File targetFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!targetFile.getParentFile().exists()) &#123;</span><br><span class="line">            targetFile.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        targetFile.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成默认的文件存储路径</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 生成规则：当前登录用户的文件目录 + rpan</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateDefaultStoreFileRealPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(System.getProperty(<span class="string">&quot;user.home&quot;</span>))</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(<span class="string">&quot;rpan&quot;</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成默认的文件分片的存储路径前缀</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateDefaultStoreFileChunkRealPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(System.getProperty(<span class="string">&quot;user.home&quot;</span>))</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(<span class="string">&quot;rpan&quot;</span>)</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(<span class="string">&quot;chunks&quot;</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成文件分片的存储路径</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 生成规则：基础路径 + 年 + 月 + 日 + 唯一标识 + 随机的文件名称 + __,__ + 文件分片的下标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> identifier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chunkNumber</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateStoreFileChunkRealPath</span><span class="params">(String basePath, String identifier, Integer chunkNumber)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(basePath)</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(DateUtil.thisYear())</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(DateUtil.thisMonth() + <span class="number">1</span>)</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(DateUtil.thisDayOfMonth())</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(identifier)</span><br><span class="line">                .append(File.separator)</span><br><span class="line">                .append(com.hth.hthpan.core.utils.UUIDUtil.getUUID())</span><br><span class="line">                .append(Constants.COMMON_SEPARATOR)</span><br><span class="line">                .append(chunkNumber)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 追加写文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">appendWrite</span><span class="params">(Path target, Path source)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Files.write(target, Files.readAllBytes(source), StandardOpenOption.APPEND);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用零拷贝技术读取文件内容并写入到文件的输出流中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileInputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeFile2OutputStream</span><span class="params">(FileInputStream fileInputStream, OutputStream outputStream, <span class="type">long</span> length)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> fileInputStream.getChannel();</span><br><span class="line">        <span class="type">WritableByteChannel</span> <span class="variable">writableByteChannel</span> <span class="operator">=</span> Channels.newChannel(outputStream);</span><br><span class="line">        fileChannel.transferTo(Constants.ZERO_LONG, length, writableByteChannel);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileChannel.close();</span><br><span class="line">        writableByteChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通的流对流数据传输</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeStream2StreamNormal</span><span class="params">(InputStream inputStream, OutputStream outputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer)) != Constants.MINUS_ONE_INT) &#123;</span><br><span class="line">            outputStream.write(buffer, Constants.ZERO_INT, len);</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 雪花算法id生成器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作id 也就是机器id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> dataCenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> sequence;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">startTimestamp</span> <span class="operator">=</span> <span class="number">1288834974657L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作id长度为5位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">workerIdBits</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心id长度为5位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">dataCenterIdBits</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作id最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">maxWorkerId</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心id最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">maxDataCenterId</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; dataCenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">sequenceBits</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">sequenceMask</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作id需要左移的位数，12位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">workerIdShift</span> <span class="operator">=</span> sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据id需要左移位数 12+5=17位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">dataCenterIdShift</span> <span class="operator">=</span> sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间戳需要左移位数 12+5+5=22位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">timestampLeftShift</span> <span class="operator">=</span> sequenceBits + workerIdBits + dataCenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次时间戳，初始值为负数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">lastTimestamp</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        workerId = getMachineNum() &amp; maxWorkerId;</span><br><span class="line">        dataCenterId = getMachineNum() &amp; maxDataCenterId;</span><br><span class="line">        sequence = <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取机器编号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getMachineNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> machinePiece;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; e = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            e = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">NetworkInterface</span> <span class="variable">ni</span> <span class="operator">=</span> e.nextElement();</span><br><span class="line">            sb.append(ni.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        machinePiece = sb.toString().hashCode();</span><br><span class="line">        <span class="keyword">return</span> machinePiece;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取时间戳，并与上次时间戳比较</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">tilNextMillis</span><span class="params">(<span class="type">long</span> lastTimestamp)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取系统时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">timeGen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Long <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> timeGen();</span><br><span class="line">        <span class="comment">// 获取当前时间戳如果小于上次时间戳，则表示时间戳获取出现异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            System.err.printf(<span class="string">&quot;clock is moving backwards.  Rejecting requests until %d.&quot;</span>, lastTimestamp);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前时间戳如果等于上次时间戳</span></span><br><span class="line">        <span class="comment">// 说明：还处在同一毫秒内，则在序列号加1；否则序列号赋值为0，从0开始。</span></span><br><span class="line">        <span class="comment">// 0 - 4095</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将上次时间戳值刷新</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回结果：</span></span><br><span class="line"><span class="comment">         * (timestamp - twepoch) &lt;&lt; timestampLeftShift) 表示将时间戳减去初始时间戳，再左移相应位数</span></span><br><span class="line"><span class="comment">         * (datacenterId &lt;&lt; datacenterIdShift) 表示将数据id左移相应位数</span></span><br><span class="line"><span class="comment">         * (workerId &lt;&lt; workerIdShift) 表示将工作id左移相应位数</span></span><br><span class="line"><span class="comment">         * | 是按位或运算符，例如：x | y，只有当x，y都为0的时候结果才为0，其它情况结果都为1。</span></span><br><span class="line"><span class="comment">         * 因为个部分只有相应位上的值有意义，其它位上都是0，所以将各部分的值进行 | 运算就能得到最终拼接好的id</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - startTimestamp) &lt;&lt; timestampLeftShift) |</span><br><span class="line">                (dataCenterId &lt;&lt; dataCenterIdShift) |</span><br><span class="line">                (workerId &lt;&lt; workerIdShift) |</span><br><span class="line">                sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(id)) &#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">8</span>);</span><br><span class="line">            byteBuffer.putLong(<span class="number">0</span>, id);</span><br><span class="line">            <span class="type">byte</span>[] content = byteBuffer.array();</span><br><span class="line">            <span class="type">byte</span>[] encrypt = com.hth.hthpan.core.utils.AES128Util.aesEncrypt(content);</span><br><span class="line">            <span class="keyword">return</span> Base64.encode(encrypt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密ID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> decryptId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">decrypt</span><span class="params">(String decryptId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(decryptId)) &#123;</span><br><span class="line">            <span class="type">byte</span>[] encrypt = Base64.decode(decryptId);</span><br><span class="line">            <span class="type">byte</span>[] content = com.hth.hthpan.core.utils.AES128Util.aesDecode(encrypt);</span><br><span class="line">            <span class="keyword">if</span> (ArrayUtil.isNotEmpty(content)) &#123;</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.wrap(content);</span><br><span class="line">                <span class="keyword">return</span> byteBuffer.getLong();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;AES128Util.aesDecode fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;the decryptId can not be empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密多个加密ID拼接的字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> decryptIdStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; <span class="title function_">decryptIdList</span><span class="params">(String decryptIdStr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(decryptIdStr)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Lists.newArrayList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; decryptIdList = Splitter.on(Constants.COMMON_SEPARATOR).splitToList(decryptIdStr);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(decryptIdList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Lists.newArrayList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Long&gt; result = decryptIdList.stream().map(IdUtil::decrypt).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jwt工具类</span></span><br><span class="line"><span class="comment"> * Created by RubinChu on 2021/1/22 下午 4:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">TWO_LONG</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">JWT_PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;0CB16040A41140E48F2F93A7BE222C46&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">RENEWAL_TIME</span> <span class="operator">=</span> <span class="string">&quot;RENEWAL_TIME&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claimKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claimValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String subject, String claimKey, Object claimValue, Long expire)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .claim(claimKey, claimValue)</span><br><span class="line">                .claim(RENEWAL_TIME, <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expire / TWO_LONG))</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expire))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, JWT_PRIVATE_KEY)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">analyzeToken</span><span class="params">(String token, String claimKey)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(JWT_PRIVATE_KEY)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">            <span class="keyword">return</span> claims.get(claimKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MessageDigest加密工具类</span></span><br><span class="line"><span class="comment"> * Created by RubinChu on 2021/1/22 下午 4:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageDigestUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MD5_STR</span> <span class="operator">=</span> <span class="string">&quot;MD5&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHA1_STR</span> <span class="operator">=</span> <span class="string">&quot;SHA1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHA256_STR</span> <span class="operator">=</span> <span class="string">&quot;SHA-256&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ZERO_STR</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用指定的单向散列模式加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originBytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] originBytes, String mode) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtils.isEmpty(originBytes) || StringUtils.isBlank(mode)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ArrayUtils.EMPTY_BYTE_ARRAY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(mode);</span><br><span class="line">        <span class="type">byte</span>[] digestBytes = md.digest(originBytes);</span><br><span class="line">        <span class="keyword">return</span> digestBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单向散列指定模式的字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] encrypt(String originContent, String mode) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(originContent)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ArrayUtils.EMPTY_BYTE_ARRAY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encrypt(originContent.getBytes(StandardCharsets.UTF_8), mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用指定模式散列字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptString</span><span class="params">(String originContent, String mode)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> StringUtils.EMPTY;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] encryptBytes = encrypt(originContent, mode);</span><br><span class="line">            <span class="keyword">if</span> (ArrayUtils.isEmpty(encryptBytes)) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            result = Base64.encode(encryptBytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取md5加密串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String originContent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encryptString(originContent, MD5_STR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取sha1加密串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sha1</span><span class="params">(String originContent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encryptString(originContent, SHA1_STR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取sha256加密串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sha256</span><span class="params">(String originContent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encryptString(originContent, SHA256_STR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码工具类</span></span><br><span class="line"><span class="comment"> * Created by RubinChu on 2021/1/22 下午 4:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成盐值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSalt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> com.hth.hthpan.core.utils.MessageDigestUtil.md5(com.hth.hthpan.core.utils.UUIDUtil.getUUID());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputPassword</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptPassword</span><span class="params">(String salt, String inputPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> com.hth.hthpan.core.utils.MessageDigestUtil.sha256(com.hth.hthpan.core.utils.MessageDigestUtil.sha1(inputPassword) + salt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析SpEl表达式解析器工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpElUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RPanExpressionEvaluator</span> <span class="variable">expressionEvaluator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RPanExpressionEvaluator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析SpEl表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spElExpression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getCustomerValue</span><span class="params">(String spElExpression,</span></span><br><span class="line"><span class="params">                                         Class&lt;T&gt; returnType,</span></span><br><span class="line"><span class="params">                                         String className,</span></span><br><span class="line"><span class="params">                                         String methodName,</span></span><br><span class="line"><span class="params">                                         Class classType,</span></span><br><span class="line"><span class="params">                                         Method method,</span></span><br><span class="line"><span class="params">                                         Object[] args,</span></span><br><span class="line"><span class="params">                                         Class[] parameterTypes,</span></span><br><span class="line"><span class="params">                                         Object target)</span> &#123;</span><br><span class="line">        <span class="type">EvaluationContext</span> <span class="variable">evaluationContext</span> <span class="operator">=</span> expressionEvaluator.createEvaluationContext(className, methodName, classType, method, args, parameterTypes, target);</span><br><span class="line">        <span class="type">AnnotatedElementKey</span> <span class="variable">methodKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedElementKey</span>(method, classType);</span><br><span class="line">        <span class="keyword">return</span> expressionEvaluator.getValueWithCustomerType(spElExpression, methodKey, evaluationContext, returnType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析SpEll表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spElExpression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(String spElExpression,</span></span><br><span class="line"><span class="params">                                  String className,</span></span><br><span class="line"><span class="params">                                  String methodName,</span></span><br><span class="line"><span class="params">                                  Class classType,</span></span><br><span class="line"><span class="params">                                  Method method,</span></span><br><span class="line"><span class="params">                                  Object[] args,</span></span><br><span class="line"><span class="params">                                  Class[] parameterTypes,</span></span><br><span class="line"><span class="params">                                  Object target)</span> &#123;</span><br><span class="line">        <span class="type">EvaluationContext</span> <span class="variable">evaluationContext</span> <span class="operator">=</span> expressionEvaluator.createEvaluationContext(className, methodName, classType, method, args, parameterTypes, target);</span><br><span class="line">        <span class="type">AnnotatedElementKey</span> <span class="variable">methodKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedElementKey</span>(method, classType);</span><br><span class="line">        <span class="keyword">return</span> expressionEvaluator.getValue(spElExpression, methodKey, evaluationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析SpEl表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spElExpression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getStringValue</span><span class="params">(String spElExpression,</span></span><br><span class="line"><span class="params">                                        String className,</span></span><br><span class="line"><span class="params">                                        String methodName,</span></span><br><span class="line"><span class="params">                                        Class classType,</span></span><br><span class="line"><span class="params">                                        Method method,</span></span><br><span class="line"><span class="params">                                        Object[] args,</span></span><br><span class="line"><span class="params">                                        Class[] parameterTypes,</span></span><br><span class="line"><span class="params">                                        Object target)</span> &#123;</span><br><span class="line">        <span class="type">EvaluationContext</span> <span class="variable">evaluationContext</span> <span class="operator">=</span> expressionEvaluator.createEvaluationContext(className, methodName, classType, method, args, parameterTypes, target);</span><br><span class="line">        <span class="type">AnnotatedElementKey</span> <span class="variable">methodKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedElementKey</span>(method, classType);</span><br><span class="line">        <span class="keyword">return</span> expressionEvaluator.getValueWithStringType(spElExpression, methodKey, evaluationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表达式根对象</span></span><br><span class="line"><span class="comment">     * 该对象主要支持以下表达式格式：</span></span><br><span class="line"><span class="comment">     * #root.className</span></span><br><span class="line"><span class="comment">     * #root.methodName</span></span><br><span class="line"><span class="comment">     * #root.classType</span></span><br><span class="line"><span class="comment">     * #root.method</span></span><br><span class="line"><span class="comment">     * #root.args</span></span><br><span class="line"><span class="comment">     * #root.parameterTypes</span></span><br><span class="line"><span class="comment">     * #root.target</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RPanExpressionRootObject</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 切点方法所属类名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 切点方法名称</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 类的Class</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Class classType;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 代理方法实体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 切点方法传参</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Object[] args;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 切点方法传参类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Class[] parameterTypes;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 代理对象实体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表达式执行器对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RPanExpressionEvaluator</span> <span class="keyword">extends</span> <span class="title class_">CachedExpressionEvaluator</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ParameterNameDiscoverer</span> <span class="variable">paramNameDiscoverer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultParameterNameDiscoverer</span>();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ExpressionKey, Expression&gt; conditionCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;AnnotatedElementKey, Method&gt; targetMethodCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建表达式执行器上下文对象</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> classType</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> parameterTypes</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> EvaluationContext <span class="title function_">createEvaluationContext</span><span class="params">(String className,</span></span><br><span class="line"><span class="params">                                                          String methodName,</span></span><br><span class="line"><span class="params">                                                          Class classType,</span></span><br><span class="line"><span class="params">                                                          Method method,</span></span><br><span class="line"><span class="params">                                                          Object[] args,</span></span><br><span class="line"><span class="params">                                                          Class[] parameterTypes,</span></span><br><span class="line"><span class="params">                                                          Object target)</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> getTargetMethod(classType, method);</span><br><span class="line">            <span class="type">RPanExpressionRootObject</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RPanExpressionRootObject</span>(className, methodName, classType, method, args, parameterTypes, target);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodBasedEvaluationContext</span>(root, targetMethod, args, <span class="built_in">this</span>.paramNameDiscoverer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 表达式解析，解析结果自动转化成指定类型</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> conditionExpression</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> elementKey</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> evalContext</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getValueWithCustomerType</span><span class="params">(String conditionExpression, AnnotatedElementKey elementKey, EvaluationContext evalContext, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getExpression(<span class="built_in">this</span>.conditionCache, elementKey, conditionExpression).getValue(evalContext, clazz);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 表达式解析，解析结果不自动转化</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> conditionExpression</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> elementKey</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> evalContext</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">(String conditionExpression, AnnotatedElementKey elementKey, EvaluationContext evalContext)</span> &#123;</span><br><span class="line">            <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> getExpression(<span class="built_in">this</span>.conditionCache, elementKey, conditionExpression);</span><br><span class="line">            <span class="keyword">return</span> expression.getValue(evalContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 表达式解析，解析结果自动转化成String</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> conditionExpression</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> elementKey</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> evalContext</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getValueWithStringType</span><span class="params">(String conditionExpression, AnnotatedElementKey elementKey, EvaluationContext evalContext)</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue(conditionExpression, elementKey, evalContext);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> value.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取缓存的目标方法</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> targetClass</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Method <span class="title function_">getTargetMethod</span><span class="params">(Class&lt;?&gt; targetClass, Method method)</span> &#123;</span><br><span class="line">            <span class="type">AnnotatedElementKey</span> <span class="variable">methodKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedElementKey</span>(method, targetClass);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> <span class="built_in">this</span>.targetMethodCache.get(methodKey);</span><br><span class="line">            <span class="keyword">if</span> (targetMethod == <span class="literal">null</span>) &#123;</span><br><span class="line">                targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);</span><br><span class="line">                <span class="keyword">if</span> (targetMethod == <span class="literal">null</span>) &#123;</span><br><span class="line">                    targetMethod = method;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.targetMethodCache.put(methodKey, targetMethod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> targetMethod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跨域全局过滤器"><a href="#跨域全局过滤器" class="headerlink" title="跨域全局过滤器"></a>跨域全局过滤器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支持跨域全局过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;corsFilter&quot;)</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        addCorsResponseHeader(response);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加跨域的响应头</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addCorsResponseHeader</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        response.setHeader(CorsConfigEnum.CORS_ORIGIN.getKey(), CorsConfigEnum.CORS_ORIGIN.getValue());</span><br><span class="line">        response.setHeader(CorsConfigEnum.CORS_CREDENTIALS.getKey(), CorsConfigEnum.CORS_CREDENTIALS.getValue());</span><br><span class="line">        response.setHeader(CorsConfigEnum.CORS_METHODS.getKey(), CorsConfigEnum.CORS_METHODS.getValue());</span><br><span class="line">        response.setHeader(CorsConfigEnum.CORS_MAX_AGE.getKey(), CorsConfigEnum.CORS_MAX_AGE.getValue());</span><br><span class="line">        response.setHeader(CorsConfigEnum.CORS_HEADERS.getKey(), CorsConfigEnum.CORS_HEADERS.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨域设置枚举类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CorsConfigEnum</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 允许所有远程访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CORS_ORIGIN(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>),</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 允许认证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CORS_CREDENTIALS(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>),</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 允许远程调用的请求类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CORS_METHODS(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, PATCH, DELETE, PUT&quot;</span>),</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 指定本次预检请求的有效期，单位是秒</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CORS_MAX_AGE(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>),</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 允许所有请求头</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CORS_HEADERS(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String key;</span><br><span class="line">        <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日志过滤器"><a href="#日志过滤器" class="headerlink" title="日志过滤器"></a>日志过滤器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * http调用日志实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpLogEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String requestUri;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被调方法(get, post ...)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用者地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remoteAddr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用的IP地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; requestHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String requestParams;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; responseHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String responseData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口耗时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String resolveTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;====================HTTP CALL START====================&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;callTime: &#123;&#125;&quot;</span>, DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        log.info(<span class="string">&quot;requestUri: &#123;&#125;&quot;</span>, getRequestUri());</span><br><span class="line">        log.info(<span class="string">&quot;method: &#123;&#125;&quot;</span>, getMethod());</span><br><span class="line">        log.info(<span class="string">&quot;remoteAddr: &#123;&#125;&quot;</span>, getRemoteAddr());</span><br><span class="line">        log.info(<span class="string">&quot;ip: &#123;&#125;&quot;</span>, getIp());</span><br><span class="line">        log.info(<span class="string">&quot;requestHeaders: &#123;&#125;&quot;</span>, getRequestHeaders());</span><br><span class="line">        log.info(<span class="string">&quot;requestParams: &#123;&#125;&quot;</span>, getRequestParams());</span><br><span class="line">        log.info(<span class="string">&quot;status: &#123;&#125;&quot;</span>, getStatus());</span><br><span class="line">        log.info(<span class="string">&quot;responseHeaders: &#123;&#125;&quot;</span>, getResponseHeaders());</span><br><span class="line">        log.info(<span class="string">&quot;responseData: &#123;&#125;&quot;</span>, getResponseData());</span><br><span class="line">        log.info(<span class="string">&quot;resolveTime: &#123;&#125;&quot;</span>, getResolveTime());</span><br><span class="line">        log.info(<span class="string">&quot;====================HTTP CALL FINISH====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;====================HTTP CALL START====================&quot;</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;callTime: &quot;</span>);</span><br><span class="line">        stringBuilder.append(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_FORMAT.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;requestUri: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getRequestUri());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;method: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getMethod());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;remoteAddr: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getRemoteAddr());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;ip: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getIp());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;requestHeaders: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getRequestHeaders());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;requestParams: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getRequestParams());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;status: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getStatus());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;responseHeaders: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getResponseHeaders());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;responseData: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getResponseData());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;resolveTime: &quot;</span>);</span><br><span class="line">        stringBuilder.append(getResolveTime());</span><br><span class="line">        stringBuilder.append(System.lineSeparator());</span><br><span class="line"></span><br><span class="line">        stringBuilder.append(<span class="string">&quot;====================HTTP CALL FINISH====================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpLogEntity构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpLogEntityBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建HTTP日志对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestWrapper</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> responseWrapper</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stopWatch</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//通过ContentCachingRequestWrapper 和 ContentCachingResponseWrapper 包装类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpLogEntity <span class="title function_">build</span><span class="params">(ContentCachingRequestWrapper requestWrapper, ContentCachingResponseWrapper responseWrapper, StopWatch stopWatch)</span> &#123;</span><br><span class="line">        <span class="type">HttpLogEntity</span> <span class="variable">httpLogEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpLogEntity</span>();</span><br><span class="line">        httpLogEntity.setRequestUri(requestWrapper.getRequestURI())</span><br><span class="line">                .setMethod(requestWrapper.getMethod())</span><br><span class="line">                .setRemoteAddr(requestWrapper.getRemoteAddr())</span><br><span class="line">                .setIp(getIpAddress(requestWrapper))</span><br><span class="line">                .setRequestHeaders(getRequestHeaderMap(requestWrapper));</span><br><span class="line">        <span class="keyword">if</span> (requestWrapper.getMethod().equals(RequestMethod.GET.name())) &#123;</span><br><span class="line">            httpLogEntity.setRequestParams(JSON.toJSONString(requestWrapper.getParameterMap()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            httpLogEntity.setRequestParams(<span class="keyword">new</span> <span class="title class_">String</span>(requestWrapper.getContentAsByteArray()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">responseContentType</span> <span class="operator">=</span> responseWrapper.getContentType();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>, responseContentType)) &#123;</span><br><span class="line">            httpLogEntity.setResponseData(<span class="keyword">new</span> <span class="title class_">String</span>(responseWrapper.getContentAsByteArray()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            httpLogEntity.setResponseData(<span class="string">&quot;Stream Body...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        httpLogEntity.setStatus(responseWrapper.getStatusCode())</span><br><span class="line">                .setResponseHeaders(getResponseHeaderMap(responseWrapper))</span><br><span class="line">                .setResolveTime(stopWatch.toString());</span><br><span class="line">        <span class="keyword">return</span> httpLogEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取IP地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getIpAddress</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;x-forwarded-for&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;X-Forwarded-For&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip) ? <span class="string">&quot;127.0.0.1&quot;</span> : ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求头MAP</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">getRequestHeaderMap</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; result = Maps.newHashMap();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(request)) &#123;</span><br><span class="line">            Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(request)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">headerName</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">headerValue</span> <span class="operator">=</span> request.getHeader(headerName);</span><br><span class="line">                    result.put(headerName, headerValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取响应头MAP</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">getResponseHeaderMap</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; result = Maps.newHashMap();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(response)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> response.getContentType();</span><br><span class="line">            result.put(<span class="string">&quot;contentType&quot;</span>, contentType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印HTTP调用日志过滤器，使用者可以按需将其注入到过滤器容器中使用</span></span><br><span class="line"><span class="comment"> * 这里只提供基础的过滤实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;httpLogFilter&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(Integer.MAX_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpLogFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> StopWatch.createStarted();</span><br><span class="line">        <span class="type">ContentCachingRequestWrapper</span> <span class="variable">requestWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentCachingRequestWrapper</span>(request);</span><br><span class="line">        <span class="type">ContentCachingResponseWrapper</span> <span class="variable">responseWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentCachingResponseWrapper</span>(response);</span><br><span class="line">        filterChain.doFilter(requestWrapper, responseWrapper);</span><br><span class="line">        <span class="type">HttpLogEntity</span> <span class="variable">httpLogEntity</span> <span class="operator">=</span> HttpLogEntityBuilder.build(requestWrapper, responseWrapper, stopWatch);</span><br><span class="line">        httpLogEntity.print();</span><br><span class="line">        <span class="comment">//让上游请求端拿到内容</span></span><br><span class="line">        responseWrapper.copyBodyToResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON序列化器"><a href="#JSON序列化器" class="headerlink" title="JSON序列化器"></a>JSON序列化器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Id自动加密的JSON序列化器</span></span><br><span class="line"><span class="comment"> * 用于返回实体Long类型ID字段的自动序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdEncryptSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;Long&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method that can be called to ask implementation to serialize</span></span><br><span class="line"><span class="comment">     * values of type this serializer handles.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value       Value to serialize; can &lt;b&gt;not&lt;/b&gt; be null.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gen         Generator used to output resulting Json content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serializers Provider that can be used to get serializers for</span></span><br><span class="line"><span class="comment">     *                    serializing Objects value contains, if any.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Long value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(value)) &#123;</span><br><span class="line">            gen.writeString(StringUtils.EMPTY);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            gen.writeString(IdUtil.encrypt(value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Date转String的JSON序列化器</span></span><br><span class="line"><span class="comment"> * 用于返回实体Date类型字段的自动序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date2StringSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;Date&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Date date, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(date)) &#123;</span><br><span class="line">            jsonGenerator.writeString(StringUtils.EMPTY);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            jsonGenerator.writeString(DateUtil.formatDateTime(date));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="集成Swagger2"><a href="#集成Swagger2" class="headerlink" title="集成Swagger2"></a>集成Swagger2</h2><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="接口文档配置类"><a href="#接口文档配置类" class="headerlink" title="接口文档配置类"></a>接口文档配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableSwaggerBootstrapUI</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Swagger2ConfigProperties properties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">panServerApi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(properties.isShow())</span><br><span class="line">                .groupName(properties.getGroupName())</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .useDefaultResponseMessages(<span class="literal">false</span>)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(properties.getBasePackage()))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        log.info(<span class="string">&quot;The swagger2 have been loaded successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(properties.getTitle())</span><br><span class="line">                .description(properties.getDescription())</span><br><span class="line">                .termsOfServiceUrl(properties.getTermsOfServiceUrl())</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(properties.getContactName(),properties.getContactUrl(),properties.getContactEmail()))</span><br><span class="line">                .version(properties.getVersion())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="swagger2配置属性实体"><a href="#swagger2配置属性实体" class="headerlink" title="swagger2配置属性实体"></a>swagger2配置属性实体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;swagger2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2ConfigProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">show</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">groupName</span> <span class="operator">=</span> <span class="string">&quot;hth-pan&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> Constants.BASE_COMPONENT_SCAN_PATH;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;hth-pan-server&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;hth-pan-server&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">termsOfServiceUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:$&#123;server.port&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">contactName</span> <span class="operator">=</span> <span class="string">&quot;slowfever&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">contactUrl</span> <span class="operator">=</span> <span class="string">&quot;https://www.slowfever01.top/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">contactEmail</span> <span class="operator">=</span> <span class="string">&quot;2093913128@qq.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在resource包下创建META-INF包，在META-INF包下新建additional-spring-configuration-metadata.json文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.show&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;是否展示接口文档&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.group-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;组名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hth-pan&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.title&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;接口文档标题&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hth-pan-server&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.description&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;接口文档描述&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hth-pan-server&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.terms-of-service-url&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;接口文档基础请求路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:$&#123;server.port&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.base-package&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;接口文档基础接口扫描路径&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.hth.hthpan&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.contact-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;联系人名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;slowfever&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.contact-url&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;联系人地址&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.slowfever01.top&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.contact-email&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;联系人邮箱&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2093913128@qq.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swagger2.version&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项目版本&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="启动类测试"><a href="#启动类测试" class="headerlink" title="启动类测试"></a>启动类测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = Constants.BASE_COMPONENT_SCAN_PATH)</span></span><br><span class="line"><span class="meta">@ServletComponentScan(basePackages = Constants.BASE_COMPONENT_SCAN_PATH)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(&quot;测试接口类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hthPanServerLauncher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(hthPanServerLauncher.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">hello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;hello&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>![image-20240625165352965](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240625165352965.png)</p>
<h2 id="日志打印监听器"><a href="#日志打印监听器" class="headerlink" title="日志打印监听器"></a>日志打印监听器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 项目启动成功日志打印监听器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartedListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationReadyEvent applicationReadyEvent)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serverPort</span> <span class="operator">=</span> applicationReadyEvent.getApplicationContext().getEnvironment().getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">serverUrl</span> <span class="operator">=</span> String.format(<span class="string">&quot;http://%s:%s&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, serverPort);</span><br><span class="line">        log.info(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, <span class="string">&quot;hth pan server started at: &quot;</span>, serverUrl));</span><br><span class="line">        <span class="keyword">if</span> (checkShowServerDoc(applicationReadyEvent.getApplicationContext())) &#123;</span><br><span class="line">            log.info(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, <span class="string">&quot;hth pan server&#x27;s doc started at:&quot;</span>, serverUrl + <span class="string">&quot;/doc.html&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(AnsiOutput.toString(AnsiColor.BRIGHT_YELLOW, <span class="string">&quot;hth pan server has started successfully!&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验是否开启了接口文档</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkShowServerDoc</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getEnvironment().getProperty(<span class="string">&quot;swagger2.show&quot;</span>, Boolean.class, <span class="literal">true</span>) &amp;&amp; applicationContext.containsBean(<span class="string">&quot;swagger2Config&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行效果图</p>
<p>![image-20240625210905035](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240625210905035.png)</p>
<h2 id="集成参数校验器（Validator）"><a href="#集成参数校验器（Validator）" class="headerlink" title="集成参数校验器（Validator）"></a>集成参数校验器（Validator）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一的参数校验器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebValidatorConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FAIL_FAST_KEY</span> <span class="operator">=</span> <span class="string">&quot;hibernate.validator.fail_fast&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">methodValidationPostProcessor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MethodValidationPostProcessor</span> <span class="variable">postProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">        postProcessor.setValidator(hthPanValidator());</span><br><span class="line">        log.info(<span class="string">&quot;The hibernate validator is loading successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> postProcessor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造项目的方法参数校验器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Validator <span class="title function_">hthPanValidator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ValidatorFactory</span> <span class="variable">validatorFactory</span> <span class="operator">=</span> Validation.byProvider(HibernateValidator.class)</span><br><span class="line">                .configure()</span><br><span class="line">                .addProperty(FAIL_FAST_KEY, Constants.TRUE_STR)</span><br><span class="line">                .buildValidatorFactory();</span><br><span class="line">        <span class="type">Validator</span> <span class="variable">validator</span> <span class="operator">=</span> validatorFactory.getValidator();</span><br><span class="line">        <span class="keyword">return</span> validator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改启动类，加上@Validated注解，测试类的name为字符串，所以用@NotBlank注解打印消息不能为空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = Constants.BASE_COMPONENT_SCAN_PATH)</span></span><br><span class="line"><span class="meta">@ServletComponentScan(basePackages = Constants.BASE_COMPONENT_SCAN_PATH)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(&quot;测试接口类&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hthPanServerLauncher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(hthPanServerLauncher.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">hello</span><span class="params">(<span class="meta">@NotBlank(message = &quot;名称不能为空&quot;)</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;hello&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>![image-20240625212313880](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240625212313880.png)</p>
<h2 id="自定义异常和全局处理"><a href="#自定义异常和全局处理" class="headerlink" title="自定义异常和全局处理"></a>自定义异常和全局处理</h2><p>在web模块下新建exception包，包下创建WebExceptionHandler类</p>
<p>这个类使用了 Spring 的 <code>@RestControllerAdvice</code> 注解来拦截和处理控制器中的异常。每个方法使用 <code>@ExceptionHandler</code> 注解来指定处理的异常类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义业务异常处理。</span></span><br><span class="line">    <span class="comment">//返回自定义错误码和错误信息。</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">hthPanBusinessExceptionHandler</span><span class="params">(BusinessException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.fail(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理方法参数校验失败的异常。</span></span><br><span class="line">    <span class="comment">//从异常中获取第一个校验错误并返回错误码和错误信息。</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">methodArgumentNotValidExceptionHandler</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">        <span class="type">ObjectError</span> <span class="variable">objectError</span> <span class="operator">=</span> e.getBindingResult().getAllErrors().stream().findFirst().get();</span><br><span class="line">        <span class="keyword">return</span> R.fail(ResponseCode.ERROR_PARAM.getCode(), objectError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理违反约束条件的异常（例如，Bean Validation注解的校验失败）。</span></span><br><span class="line">    <span class="comment">//从异常中获取第一个违反约束的信息并返回错误码和错误信息。</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = ConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">constraintDeclarationExceptionHandler</span><span class="params">(ConstraintViolationException e)</span> &#123;</span><br><span class="line">        ConstraintViolation&lt;?&gt; constraintViolation = e.getConstraintViolations().stream().findFirst().get();</span><br><span class="line">        <span class="keyword">return</span> R.fail(ResponseCode.ERROR_PARAM.getCode(), constraintViolation.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理请求缺少参数的异常。</span></span><br><span class="line">    <span class="comment">//返回参数错误码。</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">missingServletRequestParameterExceptionHandler</span><span class="params">(MissingServletRequestParameterException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.fail(ResponseCode.ERROR_PARAM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理非法状态异常。</span></span><br><span class="line">    <span class="comment">//返回参数错误码。</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = IllegalStateException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">illegalStateExceptionHandler</span><span class="params">(IllegalStateException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.fail(ResponseCode.ERROR_PARAM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理绑定异常。</span></span><br><span class="line">    <span class="comment">//从异常中获取第一个字段错误并返回错误码和错误信息。</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BindException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">bindExceptionHandler</span><span class="params">(BindException e)</span> &#123;</span><br><span class="line">        <span class="type">FieldError</span> <span class="variable">fieldError</span> <span class="operator">=</span> e.getBindingResult().getFieldErrors().stream().findFirst().get();</span><br><span class="line">        <span class="keyword">return</span> R.fail(ResponseCode.ERROR_PARAM.getCode(), fieldError.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理所有运行时异常。</span></span><br><span class="line">    <span class="comment">//返回一般错误码和异常消息。</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">runtimeExceptionHandler</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.fail(ResponseCode.ERROR.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目配置打包模块"><a href="#项目配置打包模块" class="headerlink" title="项目配置打包模块"></a>项目配置打包模块</h2><p>新建模块distribution,导入pom文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;hth-pan-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.hth.hthpan&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;distribution&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.hth.hthpan&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hth-pan-server&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;hth-pan-server&lt;/finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;descriptors&gt;</span><br><span class="line">                        &lt;descriptor&gt;assembly.xml&lt;/descriptor&gt;</span><br><span class="line">                    &lt;/descriptors&gt;</span><br><span class="line">                    &lt;tarLongFileMode&gt;posix&lt;/tarLongFileMode&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;install&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>新建bin包和conf包，并在包下创建一下 文件</p>
<p>![image-20240626174731588](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626174731588.png)</p>
<p>shutdown.cmd</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist <span class="string">&quot;%JAVA_HOME%\bin\jps.exe&quot;</span> echo Please set the JAVA_HOME variable in your environment, We need <span class="title function_">java</span><span class="params">(x64)</span>! jdk8 or later is better! &amp; EXIT /B <span class="number">1</span></span><br><span class="line"></span><br><span class="line">setlocal</span><br><span class="line"></span><br><span class="line">set <span class="string">&quot;PATH=%JAVA_HOME%\bin;%PATH%&quot;</span></span><br><span class="line"></span><br><span class="line">echo killing pan server</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;tokens=1&quot;</span> %%i <span class="title function_">in</span> <span class="params">(<span class="string">&#x27;jps -m ^| find &quot;pan.server&quot;&#x27;</span>)</span> <span class="keyword">do</span> ( taskkill /F /PID %%i )</span><br><span class="line"></span><br><span class="line">echo Done!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>startup.cmd</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not exist <span class="string">&quot;%JAVA_HOME%\bin\java.exe&quot;</span> echo Please set the JAVA_HOME variable in your environment, We need <span class="title function_">java</span><span class="params">(x64)</span>! jdk8 or later is better! &amp; EXIT /B <span class="number">1</span></span><br><span class="line">set <span class="string">&quot;JAVA=%JAVA_HOME%\bin\java.exe&quot;</span></span><br><span class="line"></span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">set BASE_DIR=%~dp0</span><br><span class="line">rem added <span class="type">double</span> quotation marks to avoid the issue caused by the folder names containing spaces.</span><br><span class="line">rem removed the last <span class="number">5</span> chars(which means \bin\) to get the base DIR.</span><br><span class="line">set BASE_DIR=<span class="string">&quot;%BASE_DIR:~0,-5%&quot;</span></span><br><span class="line"></span><br><span class="line">set CUSTOM_SEARCH_LOCATIONS=file:%BASE_DIR%/conf/</span><br><span class="line"></span><br><span class="line">set SERVER=hth-pan-server</span><br><span class="line"></span><br><span class="line">set <span class="string">&quot;PAN_JVM_OPTS=-Xms512m -Xmx512m -Xmn256m&quot;</span></span><br><span class="line"></span><br><span class="line">rem set pan server options</span><br><span class="line">set <span class="string">&quot;PAN_OPTS=%PAN_OPTS% -jar %BASE_DIR%\target\%SERVER%.jar&quot;</span></span><br><span class="line"></span><br><span class="line">rem set pan server spring config location</span><br><span class="line">set <span class="string">&quot;PAN_CONFIG_OPTS=--spring.config.additional-location=%CUSTOM_SEARCH_LOCATIONS%&quot;</span></span><br><span class="line"></span><br><span class="line">rem set pan server log4j file location</span><br><span class="line">set <span class="string">&quot;PAN_LOG4J_OPTS=--logging.config=%BASE_DIR%/conf/r-pan-server-logback.xml&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set COMMAND=<span class="string">&quot;%JAVA%&quot;</span> %PAN_JVM_OPTS% %PAN_OPTS% %PAN_CONFIG_OPTS% %PAN_LOG4J_OPTS% pan.server %*</span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;pan server is starting...&quot;</span></span><br><span class="line">rem start pan server command</span><br><span class="line">%COMMAND%</span><br><span class="line">echo <span class="string">&quot;pan server is started!&quot;</span></span><br></pre></td></tr></table></figure>

<p>application.yml和server包下的配置类一样</p>
<p>db.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_file</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_file`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_file`</span><br><span class="line">(</span><br><span class="line">    `file_id`                   <span class="type">bigint</span>                                                 <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件id&#x27;</span>,</span><br><span class="line">    `filename`                  <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件名称&#x27;</span>,</span><br><span class="line">    `real_path`                 <span class="type">varchar</span>(<span class="number">700</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件物理路径&#x27;</span>,</span><br><span class="line">    `file_size`                 <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件实际大小&#x27;</span>,</span><br><span class="line">    `file_size_desc`            <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件大小展示字符&#x27;</span>,</span><br><span class="line">    `file_suffix`               <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件后缀&#x27;</span>,</span><br><span class="line">    `file_preview_content_type` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件预览的响应头Content-Type的值&#x27;</span>,</span><br><span class="line">    `identifier`                <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件唯一标识&#x27;</span>,</span><br><span class="line">    `create_user`               <span class="type">bigint</span>                                                 <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `create_time`               datetime                                               <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`file_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin</span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span> COMMENT <span class="operator">=</span><span class="string">&#x27;物理文件信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_share</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_share`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_share`</span><br><span class="line">(</span><br><span class="line">    `share_id`       <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分享id&#x27;</span>,</span><br><span class="line">    `share_name`     <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;分享名称&#x27;</span>,</span><br><span class="line">    `share_type`     tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;分享类型（0 有提取码）&#x27;</span>,</span><br><span class="line">    `share_day_type` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;分享类型（0 永久有效；1 7天有效；2 30天有效）&#x27;</span>,</span><br><span class="line">    `share_day`      tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;分享有效天数（永久有效为0）&#x27;</span>,</span><br><span class="line">    `share_end_time` datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;分享结束时间&#x27;</span>,</span><br><span class="line">    `share_url`      <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;分享链接地址&#x27;</span>,</span><br><span class="line">    `share_code`     <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;分享提取码&#x27;</span>,</span><br><span class="line">    `share_status`   tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;分享状态（0 正常；1 有文件被删除）&#x27;</span>,</span><br><span class="line">    `create_user`    <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分享创建人&#x27;</span>,</span><br><span class="line">    `create_time`    datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`share_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_create_user_time` (`create_user`, `create_time`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;创建人、创建时间唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span> <span class="string">&#x27;用户分享表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_share_file</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_share_file`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_share_file`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `share_id`    <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分享id&#x27;</span>,</span><br><span class="line">    `file_id`     <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件记录ID&#x27;</span>,</span><br><span class="line">    `create_user` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分享创建人&#x27;</span>,</span><br><span class="line">    `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_share_id_file_id` (`share_id`, `file_id`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;分享ID、文件ID联合唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span> <span class="string">&#x27;用户分享文件表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_user`</span><br><span class="line">(</span><br><span class="line">    `user_id`     <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    `username`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    `password`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `salt`        <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;随机盐值&#x27;</span>,</span><br><span class="line">    `question`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密保问题&#x27;</span>,</span><br><span class="line">    `answer`      <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密保答案&#x27;</span>,</span><br><span class="line">    `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time` datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`user_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_username` (`username`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用户名唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span> <span class="string">&#x27;用户信息表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_user_file</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_user_file`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_user_file`</span><br><span class="line">(</span><br><span class="line">    `file_id`        <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件记录ID&#x27;</span>,</span><br><span class="line">    `user_id`        <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">    `parent_id`      <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;上级文件夹ID,顶级文件夹为0&#x27;</span>,</span><br><span class="line">    `real_file_id`   <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;真实文件id&#x27;</span>,</span><br><span class="line">    `filename`       <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件名&#x27;</span>,</span><br><span class="line">    `folder_flag`    tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否是文件夹 （0 否 1 是）&#x27;</span>,</span><br><span class="line">    `file_size_desc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;--&#x27;</span> COMMENT <span class="string">&#x27;文件大小展示字符&#x27;</span>,</span><br><span class="line">    `file_type`      tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;文件类型（1 普通文件 2 压缩文件 3 excel 4 word 5 pdf 6 txt 7 图片 8 音频 9 视频 10 ppt 11 源码文件 12 csv）&#x27;</span>,</span><br><span class="line">    `del_flag`       tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;删除标识（0 否 1 是）&#x27;</span>,</span><br><span class="line">    `create_user`    <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `create_time`    datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_user`    <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`    datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`file_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    KEY              `index_file_list` (`user_id`, `del_flag`, `parent_id`, `file_type`, `file_id`, `filename`, `folder_flag`,</span><br><span class="line">        `file_size_desc`, `create_time`, `update_time`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;查询文件列表索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin</span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span> COMMENT <span class="operator">=</span><span class="string">&#x27;用户文件信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_user_search_history</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_user_search_history`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_user_search_history`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `user_id`        <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    `search_content` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;搜索文案&#x27;</span>,</span><br><span class="line">    `create_time`    datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time`    datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_user_id_search_content_update_time` (`user_id`, `search_content`, `update_time`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用户id、搜索内容和更新时间唯一索引&#x27;</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_user_id_search_content` (`user_id`, `search_content`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用户id和搜索内容唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span> <span class="string">&#x27;用户搜索历史表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_file_chunk</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_file_chunk`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_file_chunk`</span><br><span class="line">(</span><br><span class="line">    `id`              <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `identifier`      <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件唯一标识&#x27;</span>,</span><br><span class="line">    `real_path`       <span class="type">varchar</span>(<span class="number">700</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;分片真实的存储路径&#x27;</span>,</span><br><span class="line">    `chunk_number`    <span class="type">int</span>                              <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;分片编号&#x27;</span>,</span><br><span class="line">    `expiration_time` datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;过期时间&#x27;</span>,</span><br><span class="line">    `create_user`     <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `create_time`     datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY `uk_identifier_chunk_number_create_user` (`identifier`, `chunk_number`, `create_user`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;文件唯一标识、分片编号和用户ID的唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span><span class="string">&#x27;文件分片信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_error_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_error_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_error_log`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `log_content` <span class="type">varchar</span>(<span class="number">900</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;日志内容&#x27;</span>,</span><br><span class="line">    `log_status`  tinyint                                   <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;日志状态：0 未处理 1 已处理&#x27;</span>,</span><br><span class="line">    `create_user` <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `create_time` datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_user` <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time` datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span><span class="string">&#x27;错误日志表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<p>warmup.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;SELECT &#x27;</span>, ndxcollist, <span class="string">&#x27; FROM &#x27;</span>, db, <span class="string">&#x27;.&#x27;</span>, tb, <span class="string">&#x27; ORDER BY &#x27;</span>, ndxcollist,</span><br><span class="line">                       <span class="string">&#x27;;&#x27;</span>) SelectQueryToLoadCache</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ENGINE,</span><br><span class="line">             table_schema                                    db,</span><br><span class="line">             table_name                                      tb,</span><br><span class="line">             index_name,</span><br><span class="line">             GROUP_CONCAT(column_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> seq_in_index) ndxcollist</span><br><span class="line">      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> B.ENGINE,</span><br><span class="line">                   A.table_schema,</span><br><span class="line">                   A.table_name,</span><br><span class="line">                   A.index_name,</span><br><span class="line">                   A.column_name,</span><br><span class="line">                   A.seq_in_index</span><br><span class="line">            <span class="keyword">FROM</span> information_schema.statistics A</span><br><span class="line">                     <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> ENGINE, table_schema, table_name</span><br><span class="line">                                 <span class="keyword">FROM</span> information_schema.TABLES</span><br><span class="line">                                 <span class="keyword">WHERE</span> ENGINE <span class="operator">=</span> <span class="string">&#x27;InnoDB&#x27;</span>) B <span class="keyword">USING</span> (table_schema, table_name)</span><br><span class="line">            <span class="keyword">WHERE</span> B.table_schema <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;information_schema&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> table_schema,</span><br><span class="line">                     table_name,</span><br><span class="line">                     index_name,</span><br><span class="line">                     seq_in_index) A</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> table_schema,</span><br><span class="line">               table_name,</span><br><span class="line">               index_name) AA</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> db,</span><br><span class="line">         tb;</span><br></pre></td></tr></table></figure>



<p>r-pan-server-logback.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logFile&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logging.file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;logFile&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志打印级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logLevel&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logging.level.root&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_LEVEL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;logLevel&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 打印日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;$&#123;FILE_LOG_PATTERN:-%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- appender是configuration的子节点，是负责写日志的组件。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ConsoleAppender：把日志输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %magenta(%-5level) %green([%-50.50class]) : %cyan(%msg) %n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是sys.log --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;SYSLOG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件名：log/sys.2018-09-13.0.log --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每产生一个日志文件，该日志文件的保存期限为30天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maxFileSize:这是活动文件的大小，默认值是10MB --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>64MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- pattern节点，用来设置日志的输入格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span> <span class="comment">&lt;!-- 记录日志的编码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只用保存输出error级别的日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERRLOG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_FILE&#125;_err.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;_err.%d.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maxFileSize:这是活动文件的大小，默认值是10MB --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>64MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- pattern节点，用来设置日志的输入格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span> <span class="comment">&lt;!-- 记录日志的编码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 下面为配置只输出error级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;$&#123;LOG_LEVEL&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;SYSLOG&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERRLOG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在distribution模块下引入assembly.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>dir<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>conf/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>bin/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">files</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--打好的jar包名称和放置目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>../server/target/hth-pan-server.jar<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">files</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">moduleSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">moduleSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useAllReactorProjects</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useAllReactorProjects</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>com.hth.hthpan:hth-pan-server<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">moduleSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">moduleSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在终端输入mvn clean install</p>
<p>会在distribution包下生成target目录</p>
<p>![image-20240626175956097](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626175956097.png)</p>
<p>点击startup.cmd文件运行，运行后会在bin目录下生成log日志文件</p>
<p>![image-20240626180223869](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626180223869.png)</p>
<p>访问<a href="http://127.0.0.1:8080/doc.html%EF%BC%8C%E6%88%90%E5%8A%9F%E8%AE%BF%E9%97%AE%E9%A1%B5%E9%9D%A2">http://127.0.0.1:8080/doc.html，成功访问页面</a></p>
<p>点击shutdow.cmd文件终止，再次访问<a href="http://127.0.0.1:8080/doc.html%EF%BC%8C%E4%BC%9A%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5%E3%80%82">http://127.0.0.1:8080/doc.html，会访问失败。</a></p>
<h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p><strong>1 修改Settings里Compiler选项下的配置</strong></p>
<p>![image-20240626182700162](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626182700162.png)</p>
<p>2 修改Advanced Settings里的配置</p>
<p>![image-20240626182749018](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626182749018.png)</p>
<p>IDEA 2021.2 版本将Registry里的compiler.automake.allow.when.app.running的选项放到了Advanced Settings里,所以像旧版本的解决方案就不适用了。如果使用的是IDEA 2021.2之前版本的话还是使用快捷键shift+Ctrl+Alt+&#x2F;，选择Registry…，将compiler.automake.allow.when.app.running选项勾上。</p>
<h2 id="数据库预热"><a href="#数据库预热" class="headerlink" title="数据库预热"></a>数据库预热</h2><h3 id="预热脚本"><a href="#预热脚本" class="headerlink" title="预热脚本"></a>预热脚本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;SELECT &#x27;</span>, ndxcollist, <span class="string">&#x27; FROM &#x27;</span>, db, <span class="string">&#x27;.&#x27;</span>, tb, <span class="string">&#x27; ORDER BY &#x27;</span>, ndxcollist,</span><br><span class="line">                       <span class="string">&#x27;;&#x27;</span>) SelectQueryToLoadCache</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ENGINE,</span><br><span class="line">             table_schema                                    db,</span><br><span class="line">             table_name                                      tb,</span><br><span class="line">             index_name,</span><br><span class="line">             GROUP_CONCAT(column_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> seq_in_index) ndxcollist</span><br><span class="line">      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> B.ENGINE,</span><br><span class="line">                   A.table_schema,</span><br><span class="line">                   A.table_name,</span><br><span class="line">                   A.index_name,</span><br><span class="line">                   A.column_name,</span><br><span class="line">                   A.seq_in_index</span><br><span class="line">            <span class="keyword">FROM</span> information_schema.statistics A</span><br><span class="line">                     <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> ENGINE, table_schema, table_name</span><br><span class="line">                                 <span class="keyword">FROM</span> information_schema.TABLES</span><br><span class="line">                                 <span class="keyword">WHERE</span> ENGINE <span class="operator">=</span> <span class="string">&#x27;InnoDB&#x27;</span>) B <span class="keyword">USING</span> (table_schema, table_name)</span><br><span class="line">            <span class="keyword">WHERE</span> B.table_schema <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;information_schema&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> table_schema,</span><br><span class="line">                     table_name,</span><br><span class="line">                     index_name,</span><br><span class="line">                     seq_in_index) A</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> table_schema,</span><br><span class="line">               table_name,</span><br><span class="line">               index_name) AA</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> db,</span><br><span class="line">         tb;</span><br></pre></td></tr></table></figure>

<p>![image-20240626184608280](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626184608280.png)</p>
<p>![image-20240626184621407](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626184621407.png)</p>
<p>![image-20240626184637996](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626184637996.png)</p>
<h3 id="lnnoDB内存结构"><a href="#lnnoDB内存结构" class="headerlink" title="lnnoDB内存结构"></a>lnnoDB内存结构</h3><p>内存结构主要包括Buffer Pool、Change Buffer、Adaptive Hash index和Log Buffer四大组件。</p>
<ul>
<li><p><strong>Buffer Pool缓冲池</strong>，简称BP。BP以Page页为单位，默认大小16K，BP的底层采用链表数据结构管理Page。在innoDB访问表记录和索引时会在Page页中缓存,以后使用可以减少磁盘|O操作,提升效率,</p>
</li>
<li><p><strong>Change Buffer</strong></p>
<p>写缓冲区，简称CB。在进行DML操作时，如果BP没有其相应的Page数据，并不会立刻将磁盘页加载到缓冲池，而是在CB记录缓冲变更，等未来数据被读取时．再将数据合并恢复到BP中。ChangeBuffer占用BufferPool空间，默认占25%，最大允许占50%，可以根据读写业务量来进行调整。参数innodb_change_buffer_max_size。当更新一条记录时，该记录在BufferPool存在，直接在BufferPool修改，一次内存操作。如果该记录在BufferPool不存在(没有命中)，会直接在ChangeBuffer进行一次内存操作，不用再去磁盘查询数据,避免一次磁盘IO，当下次查询记录时，会先进行磁盘读取，然后再从ChangeBuffer中读致信息合并，最终载入BufferPool中。但是，<strong>写缓冲区仅适用于非唯一普通索引页</strong>，这是因为:如果在索引设置唯一性.在进行修改时，innoDB必需要做唯一性校验，因此必须查询磁盘。做一次IO操作。会直接将记录查询到BufferPool中，然后在缓冲池修改,不会在ChangeBuffer操作</p>
</li>
<li><p><strong>Adaptive Hash Index</strong></p>
<p>自适应哈希索引，用于优化对BP数据的查询。lnnoDB存储引擎会监控对表索引的查找，如果观察到建立哈希索引可以带来速度的提升，则建立哈希索引.所以称之为自适应,InnoDB存储引擎会自动根据访问的频率和模式来为某些页建立哈希索引</p>
</li>
<li><p><strong>Log Buffer</strong></p>
<p>日志缓冲区，用来保存要写入磁盘上log文件(Redo&#x2F;Undo)的数据，日志缓冲区的内容定期刷新到磁盘log文件中。日志缓冲区满时会自动将其刷新到磁盘，当遇到BLOB或多行更新的大事务操作时，增加日志缓冲区可以节省磁盘&#x2F;O，LogBuffer主要用于记录InnoDB引擎日志,在DML操作时会产生Redo和Undo志。l ogBuffer空间满了，会自动写入磁盘。可以通过将:innodb_Iog_buffer_size参数调大，减少磁盘IO频率。innodb_flush_log _at_trx_conmit 参数控制日志刷新行为，默认为1，其设置项详情为:0;每隔1秒写日志文件和刷盘操作写日志文件LogBuffer:&gt;0s cache，利盘OScache-&gt;磁盘文件)，最多丢失1秒数据;1∶事务提交，立刻写日志文件和刷盘，数据不丢失，但是会频繁lD操作;2:事务提交，立刻写日志文件，每隔1秒钟进行刷盘操作</p>
</li>
</ul>
<h3 id="BP-Page管理机制"><a href="#BP-Page管理机制" class="headerlink" title="BP Page管理机制"></a>BP Page管理机制</h3><p>Page数据状态可以分为三种类型：</p>
<ul>
<li><strong>free page</strong>: 空闲page，未被使用。</li>
<li><strong>clean page</strong>: 被使用page，数据没有被修改过。</li>
<li><strong>dirty page</strong>: 脏页，被使用page，数据被修改过，页中数据和磁盘的数据产生了不一致。</li>
</ul>
<p>针对上述三种page类型，InnoDB通过三种链表结构来维护和管理：</p>
<ul>
<li><strong>free list</strong>: 表示空闲缓冲区，管理free page。</li>
<li><strong>flush list</strong>: 表示需要刷新到磁盘的缓冲区，管理dirty page，内部page按修改时间排序。脏页即存在于flush链表，也在LRU链表中，但是两种互不影响，LRU链表负责管理page的可用性和释放，而flush链表负责管理脏页的刷盘操作。</li>
<li><strong>LRU list</strong>: 表示正在使用的缓冲区，管理clean page和dirty page，缓冲区以midpoint为基点，前面的链表称为new列表区，存放经常访问的数据，占63%，后面的链表称为old列表区，存放使用较少的数据，占37%。普通LRU: 末尾淘汰法，新数据从链表头部加入，释放空间时从末尾淘汰。</li>
</ul>
<p>InnoDB改进性LRU: 链表分为new和old两个部分，加入元素时并不是从表头插入，而是从中间midpoint位置插入，如果数据很快被访问，那么page就会向new列表头部移动，如果数据没有被访问，会逐步向old尾部移动，等待淘汰。</p>
<p>每当有新的page数据读取到buffer pool时，InnoDB引擎会判断是否有空闲页，是否足够，如果有就将free page从free list列表删除，放入到LRU链表中。没有空闲页，就会根据LRU算法淘汰LRU链表末尾的页，将内存空间释放分配给新的页。</p>
<h2 id="配置DB"><a href="#配置DB" class="headerlink" title="配置DB"></a>配置DB</h2><h3 id="导入sql语句"><a href="#导入sql语句" class="headerlink" title="导入sql语句"></a>导入sql语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_file</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_file`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_file`</span><br><span class="line">(</span><br><span class="line">    `file_id`                   <span class="type">bigint</span>                                                 <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件id&#x27;</span>,</span><br><span class="line">    `filename`                  <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件名称&#x27;</span>,</span><br><span class="line">    `real_path`                 <span class="type">varchar</span>(<span class="number">700</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件物理路径&#x27;</span>,</span><br><span class="line">    `file_size`                 <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件实际大小&#x27;</span>,</span><br><span class="line">    `file_size_desc`            <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件大小展示字符&#x27;</span>,</span><br><span class="line">    `file_suffix`               <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件后缀&#x27;</span>,</span><br><span class="line">    `file_preview_content_type` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件预览的响应头Content-Type的值&#x27;</span>,</span><br><span class="line">    `identifier`                <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件唯一标识&#x27;</span>,</span><br><span class="line">    `create_user`               <span class="type">bigint</span>                                                 <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `create_time`               datetime                                               <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`file_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin</span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span> COMMENT <span class="operator">=</span><span class="string">&#x27;物理文件信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_share</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_share`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_share`</span><br><span class="line">(</span><br><span class="line">    `share_id`       <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分享id&#x27;</span>,</span><br><span class="line">    `share_name`     <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;分享名称&#x27;</span>,</span><br><span class="line">    `share_type`     tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;分享类型（0 有提取码）&#x27;</span>,</span><br><span class="line">    `share_day_type` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;分享类型（0 永久有效；1 7天有效；2 30天有效）&#x27;</span>,</span><br><span class="line">    `share_day`      tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;分享有效天数（永久有效为0）&#x27;</span>,</span><br><span class="line">    `share_end_time` datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;分享结束时间&#x27;</span>,</span><br><span class="line">    `share_url`      <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;分享链接地址&#x27;</span>,</span><br><span class="line">    `share_code`     <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;分享提取码&#x27;</span>,</span><br><span class="line">    `share_status`   tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;分享状态（0 正常；1 有文件被删除）&#x27;</span>,</span><br><span class="line">    `create_user`    <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分享创建人&#x27;</span>,</span><br><span class="line">    `create_time`    datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`share_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_create_user_time` (`create_user`, `create_time`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;创建人、创建时间唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span> <span class="string">&#x27;用户分享表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_share_file</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_share_file`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_share_file`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `share_id`    <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分享id&#x27;</span>,</span><br><span class="line">    `file_id`     <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件记录ID&#x27;</span>,</span><br><span class="line">    `create_user` <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分享创建人&#x27;</span>,</span><br><span class="line">    `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_share_id_file_id` (`share_id`, `file_id`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;分享ID、文件ID联合唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span> <span class="string">&#x27;用户分享文件表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_user`</span><br><span class="line">(</span><br><span class="line">    `user_id`     <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    `username`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    `password`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    `salt`        <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;随机盐值&#x27;</span>,</span><br><span class="line">    `question`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密保问题&#x27;</span>,</span><br><span class="line">    `answer`      <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密保答案&#x27;</span>,</span><br><span class="line">    `create_time` datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time` datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`user_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_username` (`username`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用户名唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span> <span class="string">&#x27;用户信息表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_user_file</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_user_file`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_user_file`</span><br><span class="line">(</span><br><span class="line">    `file_id`        <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件记录ID&#x27;</span>,</span><br><span class="line">    `user_id`        <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">    `parent_id`      <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;上级文件夹ID,顶级文件夹为0&#x27;</span>,</span><br><span class="line">    `real_file_id`   <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;真实文件id&#x27;</span>,</span><br><span class="line">    `filename`       <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件名&#x27;</span>,</span><br><span class="line">    `folder_flag`    tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;是否是文件夹 （0 否 1 是）&#x27;</span>,</span><br><span class="line">    `file_size_desc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;--&#x27;</span> COMMENT <span class="string">&#x27;文件大小展示字符&#x27;</span>,</span><br><span class="line">    `file_type`      tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;文件类型（1 普通文件 2 压缩文件 3 excel 4 word 5 pdf 6 txt 7 图片 8 音频 9 视频 10 ppt 11 源码文件 12 csv）&#x27;</span>,</span><br><span class="line">    `del_flag`       tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;删除标识（0 否 1 是）&#x27;</span>,</span><br><span class="line">    `create_user`    <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `create_time`    datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_user`    <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time`    datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`file_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    KEY              `index_file_list` (`user_id`, `del_flag`, `parent_id`, `file_type`, `file_id`, `filename`, `folder_flag`,</span><br><span class="line">        `file_size_desc`, `create_time`, `update_time`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;查询文件列表索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin</span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span> COMMENT <span class="operator">=</span><span class="string">&#x27;用户文件信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_user_search_history</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_user_search_history`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_user_search_history`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `user_id`        <span class="type">bigint</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    `search_content` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;搜索文案&#x27;</span>,</span><br><span class="line">    `create_time`    datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time`    datetime(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> (<span class="number">0</span>) COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_user_id_search_content_update_time` (`user_id`, `search_content`, `update_time`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用户id、搜索内容和更新时间唯一索引&#x27;</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_user_id_search_content` (`user_id`, `search_content`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用户id和搜索内容唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span> <span class="string">&#x27;用户搜索历史表&#x27;</span></span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_file_chunk</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_file_chunk`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_file_chunk`</span><br><span class="line">(</span><br><span class="line">    `id`              <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `identifier`      <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;文件唯一标识&#x27;</span>,</span><br><span class="line">    `real_path`       <span class="type">varchar</span>(<span class="number">700</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;分片真实的存储路径&#x27;</span>,</span><br><span class="line">    `chunk_number`    <span class="type">int</span>                              <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;分片编号&#x27;</span>,</span><br><span class="line">    `expiration_time` datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;过期时间&#x27;</span>,</span><br><span class="line">    `create_user`     <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `create_time`     datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY `uk_identifier_chunk_number_create_user` (`identifier`, `chunk_number`, `create_user`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;文件唯一标识、分片编号和用户ID的唯一索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span><span class="string">&#x27;文件分片信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for r_pan_error_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `r_pan_error_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `r_pan_error_log`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    `log_content` <span class="type">varchar</span>(<span class="number">900</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;日志内容&#x27;</span>,</span><br><span class="line">    `log_status`  tinyint                                   <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;日志状态：0 未处理 1 已处理&#x27;</span>,</span><br><span class="line">    `create_user` <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `create_time` datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_user` <span class="type">bigint</span>                           <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新人&#x27;</span>,</span><br><span class="line">    `update_time` datetime                         <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_bin COMMENT <span class="operator">=</span><span class="string">&#x27;错误日志表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><ol>
<li>在orm模块下新建mybatis-plus模块，新建CodeGenerator类</li>
</ol>
<p>![image-20240626235354010](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626235354010.png)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mp代码生成工具类</span></span><br><span class="line"><span class="comment"> * 可以选择安装MyBatisX插件生成</span></span><br><span class="line"><span class="comment"> * 或者执行该类工具方法生成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">scanner</span><span class="params">(String tip)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">help</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ipt</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusException</span>(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner(<span class="string">&quot;用户名&quot;</span>),</span><br><span class="line">                password = scanner(<span class="string">&quot;密码&quot;</span>),</span><br><span class="line">                moduleName = scanner(<span class="string">&quot;模块名&quot;</span>),</span><br><span class="line">                outputDir = scanner(<span class="string">&quot;输出目录&quot;</span>);</span><br><span class="line">        String[] tableNameArray = scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        gc.setOutputDir(outputDir);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;RubinChu&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        gc.setSwagger2(<span class="literal">false</span>);</span><br><span class="line">        gc.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setServiceName(<span class="string">&quot;I%sService&quot;</span>);</span><br><span class="line">        gc.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        gc.setIdType(IdType.INPUT);</span><br><span class="line">        gc.setBaseColumnList(<span class="literal">true</span>);</span><br><span class="line">        gc.setBaseResultMap(<span class="literal">true</span>);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setFileOverride(<span class="literal">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/r_pan?characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(username);</span><br><span class="line">        dsc.setPassword(password);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(moduleName);</span><br><span class="line">        pc.setParent(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        <span class="type">InjectionConfig</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectionConfig</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMap</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line"><span class="comment">//        String templatePath = &quot;/templates/mapper.xml.ftl&quot;;</span></span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templatePath</span> <span class="operator">=</span> <span class="string">&quot;/templates/mapper.xml.vm&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> <span class="title class_">FileOutConfig</span>(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">outputFile</span><span class="params">(TableInfo tableInfo)</span> &#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> outputDir + File.separator + pc.getParent().replace(<span class="string">&quot;.&quot;</span>, File.separator) + File.separator + <span class="string">&quot;mapper&quot;</span> + File.separator + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span></span><br><span class="line"><span class="comment">                if (fileType == FileType.MAPPER) &#123;</span></span><br><span class="line"><span class="comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span></span><br><span class="line"><span class="comment">                    return !new File(filePath).exists();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                // 允许生成模板文件</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        <span class="type">TemplateConfig</span> <span class="variable">templateConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateConfig</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        <span class="comment">// templateConfig.setEntity(&quot;templates/entity2.java&quot;);</span></span><br><span class="line">        <span class="comment">// templateConfig.setService();</span></span><br><span class="line">        <span class="comment">// templateConfig.setController();</span></span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="literal">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line"><span class="comment">//        strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">false</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setEntityTableFieldAnnotationEnable(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line"><span class="comment">//        strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);</span></span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line"><span class="comment">//        strategy.setSuperEntityColumns(&quot;id&quot;);</span></span><br><span class="line">        strategy.setInclude(tableNameArray);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> <span class="title class_">VelocityTemplateEngine</span>());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在test模块下新建Test类</p>
<p>![image-20240626235559521](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626235559521.png)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hth.hthpan.orm.mp.generate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MpGenaratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码生成器的测试方法</span></span><br><span class="line"><span class="comment">     * root</span></span><br><span class="line"><span class="comment">     * 123456</span></span><br><span class="line"><span class="comment">     * com.hth.hthpan.modules.user</span></span><br><span class="line"><span class="comment">     * E:\git\hth-pan\framework\orm\mybatis-plus\src\test\java\com\hth\hthpan\orm\mp\generate\output</span></span><br><span class="line"><span class="comment">     * r_pan_user</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CodeGenerator.generate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后会自动生成代码</p>
<ol start="2">
<li>使用mybatisX脚本自动生成mp代码</li>
</ol>
<p>![image-20240626235824093](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240626235824093.png)</p>
<h2 id="项目初始化总结"><a href="#项目初始化总结" class="headerlink" title="项目初始化总结"></a>项目初始化总结</h2><ol>
<li>安装基础软件</li>
</ol>
<ul>
<li>安装maven</li>
<li>安装Git</li>
</ul>
<ol start="2">
<li>初始化项目</li>
</ol>
<ul>
<li>创建项目</li>
<li>创建三个核心模块</li>
<li>完善核心公用模块</li>
</ul>
<ol start="3">
<li>配置swagger2</li>
</ol>
<ul>
<li>添加swagger2子模块</li>
<li>完善子模块依赖</li>
<li>完善子模块配置</li>
</ul>
<ol start="4">
<li>配置validator</li>
</ol>
<ul>
<li>添加web子模块</li>
<li>添加validator共用处理配置</li>
</ul>
<ol start="5">
<li>配置全局异常处理器</li>
</ol>
<ul>
<li>定义自定义异常类</li>
<li>配置全局异常处理器</li>
</ul>
<ol start="6">
<li>配置热部署</li>
</ol>
<ul>
<li>添加热部署依赖</li>
<li>配置热部署</li>
</ul>
<ol start="7">
<li>配置db</li>
</ol>
<ul>
<li>安装MySQL</li>
<li>添加mp子模块</li>
<li>开发mp相关的代码生成器</li>
<li>使用脚本自动生成代码</li>
</ul>
<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="缓存架构设计JSR107"><a href="#缓存架构设计JSR107" class="headerlink" title="缓存架构设计JSR107"></a>缓存架构设计JSR107</h2><p>首先，我们来了解一下JSR107规范。JSR是Java Specification Requests的缩写，Java规范请求，故名思义是提交Java规范的请求。JSR107就是关于如何使用缓存的规范，是Java提供的一个接口规范，类似于JDBC规范，没有具体的实现，具体的实现则由Ehcache等库提供。以下是JSR107核心接口的介绍：</p>
<h3 id="JSR107核心接口"><a href="#JSR107核心接口" class="headerlink" title="JSR107核心接口"></a>JSR107核心接口</h3><p>Java Caching (JSR-107)定义了5个核心接口，分别是CachingProvider、CacheManager、Cache、Entry和Expiry。</p>
<ul>
<li><strong>CachingProvider（缓存提供者）</strong>：创建、配置、获取、管理和控制多个CacheManager。</li>
<li><strong>CacheManager（缓存管理器）</strong>：创建、配置、获取、管理和控制多个唯一命名的Cache。Cache存在于CacheManager的上下文中。一个CacheManager仅对应一个CachingProvider。</li>
<li><strong>Cache（缓存）</strong>：由CacheManager管理，CacheManager管理Cache的生命周期。Cache存在于CacheManager的上下文中，是一个类似于Map的数据结构，并临时存储以key为索引的值。一个Cache仅被一个CacheManager所拥有。</li>
<li><strong>Entry（缓存键值对）</strong>：是一个存储在Cache中的key-value对。</li>
<li><strong>Expiry（缓存时效）</strong>：每一个存储在Cache中的条目都有一个定义的有效期。一旦超过这个时间，条目就会自动过期。过期后，条目将无法访问、更新和删除。缓存有效期可以通过ExpiryPolicy设置。</li>
</ul>
<p>![image-20240627100837872](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627100837872.png)</p>
<p>一个应用里面可以有多个缓存提供者(CachingProimler)，一个缓存提供者可以获取到多个缓存管理器(CacheManager)，一个缓存管理器管理着不同的缓存(Cache)，缓存中是一个个的缓存键值对(Entry)，每个entry都有一个有效期(Expiry)。缓存管理器和缓存之间的关系有点类似于数据库中连接池和连接的关系。</p>
<h2 id="实现本地缓存"><a href="#实现本地缓存" class="headerlink" title="实现本地缓存"></a>实现本地缓存</h2><p>在cache模块下新建cache-core模块，新建CacheConstants接口（公用缓存常量类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hth Pan 服务端公用缓存常量类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CacheConstants</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">HTH_PAN_CACHE_NAME</span> <span class="operator">=</span> <span class="string">&quot;HTH_PAN_CACHE&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>![image-20240627150047286](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627150047286.png)</p>
<h3 id="方法一：cache-caffeine"><a href="#方法一：cache-caffeine" class="headerlink" title="方法一：cache-caffeine"></a><strong>方法一：cache-caffeine</strong></h3><p>在cache模块下新建cache-caffeine模块，在config包下新建CaffeineCacheConfig类和CaffeineCacheProperties类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineCacheConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CaffeineCacheProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">caffeineCacheManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CaffeineCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CaffeineCacheManager</span>(CacheConstants.HTH_PAN_CACHE_NAME);</span><br><span class="line">        cacheManager.setAllowNullValues(properties.getAllowNullValue());</span><br><span class="line">        Caffeine&lt;Object,Object&gt; caffeineBuilder = Caffeine.newBuilder()</span><br><span class="line">                .initialCapacity(properties.getInitCacheCapacity())</span><br><span class="line">                .maximumSize(properties.getMaxCacheCapacity());</span><br><span class="line">        cacheManager.setCaffeine(caffeineBuilder);</span><br><span class="line">        log.info(<span class="string">&quot;the caffeine cache manager is loaded successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Caffeine Cache自定义配置属性类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;com.hth.hthpan.cache.caffeine&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineCacheProperties</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存初始容量</span></span><br><span class="line"><span class="comment">     * com.hth.hthpan.cache.caffeine.init-cache-capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">initCacheCapacity</span> <span class="operator">=</span> <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存最大容量，超过之后会按照recently or very often（最近最少）策略进行缓存剔除</span></span><br><span class="line"><span class="comment">     * com.hth.hthpan.cache.caffeine.max-cache-capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">maxCacheCapacity</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否允许空值null作为缓存的value</span></span><br><span class="line"><span class="comment">     * com.hth.hthpan.cache.caffeine.allow-null-value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">allowNullValue</span> <span class="operator">=</span> Boolean.TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在resources目录下新建META-INF包，在包下新建additional-spring-configuration-metadata.json文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.hth.hthpan.cache.caffeine.init-cache-capacity&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Integer&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Caffeine缓存的初始容量&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.hth.hthpan.cache.caffeine.max-cache-capacity&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Long&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Caffeine缓存的最大容量&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10000L&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.hth.hthpan.cache.caffeine.allow-null-value&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.lang.Boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Caffeine缓存是否允许null作为value的属性&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在test包下进行测试，新建config包和instance包</p>
<p>在config包下新建CaffeineCacheConfig类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@ComponentScan(value = Constants.BASE_COMPONENT_SCAN_PATH+&quot;.cache.caffeine.test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineCacheConfig</span> &#123;</span><br><span class="line">    <span class="comment">//这是一个包含Caffeine缓存相关配置的属性类，通常会从配置文件（如application.properties或application.yml）中读取配置。</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CaffeineCacheProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">caffeineCacheManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//这是Spring缓存抽象中的一个具体实现，使用Caffeine作为底层缓存库。</span></span><br><span class="line">        <span class="type">CaffeineCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CaffeineCacheManager</span>(CacheConstants.HTH_PAN_CACHE_NAME);</span><br><span class="line">        cacheManager.setAllowNullValues(properties.getAllowNullValue());</span><br><span class="line">        <span class="comment">//Caffeine的缓存构建器，用于设置缓存的各种参数，如初始容量和最大容量。</span></span><br><span class="line">        Caffeine&lt;Object,Object&gt; caffeineBuilder = Caffeine.newBuilder()</span><br><span class="line">                .initialCapacity(properties.getInitCacheCapacity())</span><br><span class="line">                .maximumSize(properties.getMaxCacheCapacity());</span><br><span class="line">        cacheManager.setCaffeine(caffeineBuilder);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来，应用中的其他组件就可以使用Spring的缓存抽象来缓存数据，而底层使用的是Caffeine缓存库。</p>
<p>新建CaffeineCacheProperties类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Caffeine Cache自定义配置属性类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;com.hth.hthpan.cache.caffeine&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineCacheProperties</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存初始容量</span></span><br><span class="line"><span class="comment">     * com.hth.hthpan.cache.caffeine.init-cache-capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">initCacheCapacity</span> <span class="operator">=</span> <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存最大容量，超过之后会按照recently or very often（最近最少）策略进行缓存剔除</span></span><br><span class="line"><span class="comment">     * com.hth.hthpan.cache.caffeine.max-cache-capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">maxCacheCapacity</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否允许空值null作为缓存的value</span></span><br><span class="line"><span class="comment">     * com.hth.hthpan.cache.caffeine.allow-null-value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">allowNullValue</span> <span class="operator">=</span> Boolean.TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在instance包下新建测试实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Cache注解测试实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheAnnotationTester</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试自适应缓存注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable(cacheNames = CacheConstants.HTH_PAN_CACHE_NAME, key = &quot;#name&quot;, sync = true)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testCacheable</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;call com.hth.hthpan.cache.caffeine.test.instance.CacheAnnotationTester.testCacheable, param is &#123;&#125;&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello &quot;</span>).append(name).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在test包下创建测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Caffeine缓存单元测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = CaffeineCacheConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineCacheTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheAnnotationTester cacheAnnotationTester;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单测试CacheManger的功能以及获取的Cache对象的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">caffeineCacheManagerTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Cache</span> <span class="variable">cache</span> <span class="operator">=</span> cacheManager.getCache(CacheConstants.HTH_PAN_CACHE_NAME);</span><br><span class="line">        Assert.notNull(cache);</span><br><span class="line">        cache.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.get(<span class="string">&quot;name&quot;</span>, String.class);</span><br><span class="line">        Assert.isTrue(<span class="string">&quot;value&quot;</span>.equals(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">caffeineCacheAnnotationTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            cacheAnnotationTester.testCacheable(<span class="string">&quot;hth&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试方法</strong>：</p>
<ul>
<li><code>caffeineCacheManagerTest</code>：测试<code>CacheManager</code>的基本功能。<ul>
<li>从<code>CacheManager</code>中获取缓存对象，并确保它不为空。</li>
<li>向缓存中放入一个键值对，并从缓存中取回该值，确保取回的值与放入的值相等。</li>
</ul>
</li>
<li><code>caffeineCacheAnnotationTest</code>：测试带有缓存注解的方法。<ul>
<li>调用<code>cacheAnnotationTester</code>中的<code>testCacheable</code>方法两次，以验证缓存注解的行为</li>
</ul>
</li>
</ul>
<p>具体结构如下图：</p>
<p>![image-20240627153926885](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627153926885.png)</p>
<h3 id="方法二：cache-redis"><a href="#方法二：cache-redis" class="headerlink" title="方法二：cache-redis"></a><strong>方法二：cache-redis</strong></h3><p>在cache模块下新建cache-redis模块，在模块下新建config包，新建redisCacheConfig文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis Cache的配置类</span></span><br><span class="line"><span class="comment"> * 该缓存方案支持事务</span></span><br><span class="line"><span class="comment"> * 该缓存方案直接集成spring-boot-starter-data-redis，所以舍弃自定义配置，直接默认使用spring的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制链接和操作Redis的客户端工具</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(Object.class);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制化redis的缓存管理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">redisCacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">redisCacheConfiguration</span> <span class="operator">=</span> RedisCacheConfiguration</span><br><span class="line">                .defaultCacheConfig()</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer));</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager</span><br><span class="line">                .builder(RedisCacheWriter.lockingRedisCacheWriter(redisConnectionFactory))</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration)</span><br><span class="line">                .transactionAware()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;the redis cache manager is loaded successfully!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>![image-20240627164514463](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627164514463.png)</p>
<p>在test模块下进行测试</p>
<p>![image-20240627164724818](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627164724818.png)</p>
<p>在config包下新建redisCacheConfig文件，添加注解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ComponentScan(value = Constants.BASE_COMPONENT_SCAN_PATH+&quot;.cache.redis.test&quot;)</span><br></pre></td></tr></table></figure>

<p>新建instance包，测试方法同方法一</p>
<p>新建测试类redisCacheTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = RedisCacheTest.class)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheAnnotationTester cacheAnnotationTester;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单测试CacheManger的功能以及获取的Cache对象的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">RedisCacheManagerTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Cache</span> <span class="variable">cache</span> <span class="operator">=</span> cacheManager.getCache(CacheConstants.HTH_PAN_CACHE_NAME);</span><br><span class="line">        Assert.notNull(cache);</span><br><span class="line">        cache.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cache.get(<span class="string">&quot;name&quot;</span>, String.class);</span><br><span class="line">        Assert.isTrue(<span class="string">&quot;value&quot;</span>.equals(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">RedisCacheAnnotationTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            cacheAnnotationTester.testCacheable(<span class="string">&quot;imooc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：![image-20240627165023423](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627165023423.png)</p>
<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>在framework模块下新建schedule模块，在schedule包下新建下面四个文件</p>
<p>![image-20240627190450862](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627190450862.png)</p>
<p>在core模块的exception包下创建FrameworkException类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrameworkException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FrameworkException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时模块配置类</span></span><br><span class="line"><span class="comment"> * 配置定时器执行器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title function_">taskScheduler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskScheduler</span> <span class="variable">taskScheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务管理器</span></span><br><span class="line"><span class="comment"> * 1、创建并启动一个定时任务</span></span><br><span class="line"><span class="comment"> * 2、停止一个定时任务</span></span><br><span class="line"><span class="comment"> * 3、更新一个定时任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部正在执行的定时任务缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, com.hth.hthpan.schedule.ScheduleTaskHolder&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动一个定时任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scheduleTask 定时任务实现类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cron         定时任务的cron表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">startTask</span><span class="params">(com.hth.hthpan.schedule.ScheduleTask scheduleTask, String cron)</span> &#123;</span><br><span class="line">        ScheduledFuture&lt;?&gt; scheduledFuture = taskScheduler.schedule(scheduleTask, <span class="keyword">new</span> <span class="title class_">CronTrigger</span>(cron));</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> UUIDUtil.getUUID();</span><br><span class="line">        com.hth.hthpan.schedule.<span class="type">ScheduleTaskHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.hth.hthpan.schedule.ScheduleTaskHolder(scheduleTask, scheduledFuture);</span><br><span class="line">        cache.put(key, holder);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125; 启动成功！唯一标识为：&#123;&#125;&quot;</span>, scheduleTask.getName(), key);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止一个定时任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 定时任务的唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopTask</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        com.hth.hthpan.schedule.<span class="type">ScheduleTaskHolder</span> <span class="variable">holder</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(holder)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ScheduledFuture</span> <span class="variable">scheduledFuture</span> <span class="operator">=</span> holder.getScheduledFuture();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">cancel</span> <span class="operator">=</span> scheduledFuture.cancel(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (cancel) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125; 停止成功！唯一标识为：&#123;&#125;&quot;</span>, holder.getScheduleTask().getName(), key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&#123;&#125; 停止失败！唯一标识为：&#123;&#125;&quot;</span>, holder.getScheduleTask().getName(), key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新一个定时任务的执行时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  定时任务的唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cron 新的cron表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">changeTask</span><span class="params">(String key, String cron)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(key, cron)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FrameworkException</span>(<span class="string">&quot;定时任务的唯一标识以及新的执行表达式不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ScheduleTaskHolder</span> <span class="variable">holder</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(holder)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FrameworkException</span>(key + <span class="string">&quot;唯一标识不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stopTask(key);</span><br><span class="line">        <span class="keyword">return</span> startTask(holder.getScheduleTask(), cron);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务的任务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ScheduleTask</span> <span class="keyword">extends</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取定时任务的名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务和定时任务结果的缓存对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTaskHolder</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行任务实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ScheduleTask scheduleTask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行任务的结果实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ScheduledFuture scheduledFuture;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在test模块下进行测试</p>
<p>![image-20240627190649503](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627190649503.png)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(Constants.BASE_COMPONENT_SCAN_PATH + &quot;.schedule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTestConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的定时任务执行逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleScheduleTask</span> <span class="keyword">implements</span> <span class="title class_">ScheduleTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试定时任务&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(getName() + <span class="string">&quot;正在执行。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务模块单元测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = ScheduleTestConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTaskTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ScheduleManager manager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpleScheduleTask scheduleTask;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunScheduleTask</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cron</span> <span class="operator">=</span> <span class="string">&quot;0/5 * * * * ? &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> manager.startTask(scheduleTask, cron);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        cron = <span class="string">&quot;0/1 * * * * ? &quot;</span>;</span><br><span class="line"></span><br><span class="line">        key = manager.changeTask(key, cron);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        manager.stopTask(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>![image-20240627190904429](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627190904429.png)</p>
<h1 id="用户模块-1"><a href="#用户模块-1" class="headerlink" title="用户模块"></a>用户模块</h1><h3 id="IDEA生成序列化ID"><a href="#IDEA生成序列化ID" class="headerlink" title="IDEA生成序列化ID"></a><em>IDEA生成序列化ID</em></h3><ul>
<li><em>ctrl+alt+s<strong>快捷键</strong>打开设置界面</em></li>
<li><em>选择Editor 下的Inspections.</em></li>
<li><em>在搜索栏中搜索JVM languages | Serializable class without ‘serialVersionUID’ ，并勾选后面的选项框，点击ok</em></li>
</ul>
<h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><p>在server模块下的user包下新建controller包、context包、converter包和po包</p>
<p>![image-20240627225427806](C:\Users\slow fever\AppData\Roaming\Typora\typora-user-images\image-20240627225427806.png)</p>
<p>在po包下新建UserRegisterPO文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册用户参数实体对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterPO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5521427813609988931L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户名&quot;,required = true)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^[0-9A-Za-z]&#123;6,12&#125;$&quot;,message = &quot;请输入6-12位的用户名，用户名只包含数字和字母&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;密码&quot;,required = true)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(max = 12,min = 8,message = &quot;请输入8-12位的密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;密保问题&quot;,required = true)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密保问题不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(max = 100,message = &quot;密保问题不能超过100个字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String question;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;密保答案&quot;,required = true)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密保答案不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(max = 100,message = &quot;密保答案不能超过100个字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String answer;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在context包下新建UserRegisterContext文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户注册业务的上下文实体对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegisterContext</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">4835860208501507531L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String question;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String answer;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在converter包下新建UserConverter文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块实体转化工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;</span><br><span class="line"><span class="meta">@Mapper(componentModel = &quot;spring&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UserRegisterPO转换成UserRegisterContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userRegisterPO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UserRegisterContext <span class="title function_">userRegisterPO2UserRegisterContext</span><span class="params">(UserRegisterPO userRegisterPO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在controller层新建UserController文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserConverter userConverter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这段代码是一个用于用户注册接口的API文档注解，主要用于生成接口文档和说明接口的具体信息。代码使用了Swagger框架中的@ApiOperation注解。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(</span></span><br><span class="line"><span class="meta">            value = &quot;用户注册接口&quot;,</span></span><br><span class="line"><span class="meta">            notes = &quot;该接口提供了用户注册的功能，实现了冥等性注册的逻辑，可以放心多并发调用&quot;,</span></span><br><span class="line"><span class="meta">            consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,  // 指定接口接受的数据格式，这里是JSON格式的UTF-8编码</span></span><br><span class="line"><span class="meta">            produces = MediaType.APPLICATION_JSON_UTF8_VALUE   // 指定接口输出的数据格式，这里是JSON格式的UTF-8编码</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">register</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> UserRegisterPO userRegisterPO)</span>&#123;</span><br><span class="line">        <span class="type">UserRegisterContext</span> <span class="variable">userRegisterContext</span> <span class="operator">=</span> userConverter.userRegisterPO2UserRegisterContext(userRegisterPO);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> iUserService.register(userRegisterContext);</span><br><span class="line">        <span class="keyword">return</span> R.data(IdUtil.encrypt(userId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在userservice层实现register方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户注册的业务实现</span></span><br><span class="line"><span class="comment"> * 需要实现的功能点：</span></span><br><span class="line"><span class="comment"> * 1、注册用户信息</span></span><br><span class="line"><span class="comment"> * 2、创建新用户的根本目录信息</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 需要实现的技术难点：</span></span><br><span class="line"><span class="comment"> * 1、该业务是幂等的</span></span><br><span class="line"><span class="comment"> * 2、要保证用户名全局唯一</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 实现技术难点的处理方案：</span></span><br><span class="line"><span class="comment"> * 1、幂等性通过数据库表对于用户名字段添加唯一索引，我们上游业务捕获对应的冲突异常，转化返回</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">register</span><span class="params">(UserRegisterContext userRegisterContext)</span> &#123;</span><br><span class="line">        assembleUserEntity(userRegisterContext);</span><br><span class="line">        doRegister(userRegisterContext);</span><br><span class="line">        createUserRootFolder(userRegisterContext);</span><br><span class="line">        <span class="keyword">return</span> userRegisterContext.getEntity().getUserId();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在userservice层新建assembleUserEntity方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体转换</span></span><br><span class="line"><span class="comment"> * 由上下文信息转换为用户实体，封装进上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userRegisterContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">assembleUserEntity</span><span class="params">(UserRegisterContext userRegisterContext)</span> &#123;</span><br><span class="line">    <span class="type">RPanUser</span> <span class="variable">entity</span> <span class="operator">=</span> userConverter.userRegisterContext2RPanUser(userRegisterContext);</span><br><span class="line">    <span class="comment">// 获取一个随机盐值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> PasswordUtil.getSalt(),</span><br><span class="line">            <span class="comment">// 使用盐值和用户输入的密码生成加密后的密码</span></span><br><span class="line">            dbPassword = PasswordUtil.encryptPassword(salt, userRegisterContext.getPassword());</span><br><span class="line">    entity.setUserId(IdUtil.get());</span><br><span class="line">    entity.setSalt(salt);</span><br><span class="line">    entity.setPassword(dbPassword);</span><br><span class="line">    entity.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    entity.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="comment">// 将组装好的实体设置到用户注册上下文中</span></span><br><span class="line">    userRegisterContext.setEntity(entity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在UserConverter类添加userRegisterContext2RPanUser方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块实体转化工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper(componentModel = &quot;spring&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserConverter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UserRegisterPO转换成UserRegisterContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userRegisterPO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UserRegisterContext <span class="title function_">userRegisterPO2UserRegisterContext</span><span class="params">(UserRegisterPO userRegisterPO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mapping(target = &quot;password&quot;,ignore = true)</span></span><br><span class="line">    RPanUser <span class="title function_">userRegisterContext2RPanUser</span><span class="params">(UserRegisterContext userRegisterContext)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="盐值"><a href="#盐值" class="headerlink" title="盐值"></a><strong>盐值</strong></h4><p><strong>盐值（Salt）</strong>是密码学中的一个概念，指的是在对用户密码进行哈希处理之前添加的随机数据。盐值的主要作用是增强密码的安全性，防止一些常见的攻击手段，如彩虹表攻击和字典攻击。以下是对盐值的详细解释：</p>
<h5 id="盐值的作用"><a href="#盐值的作用" class="headerlink" title="盐值的作用"></a>盐值的作用</h5><ol>
<li><strong>防止彩虹表攻击</strong>： 彩虹表是一种预计算的哈希表，可以快速查找哈希值对应的原始密码。通过为每个密码添加一个独特的盐值，即使两个用户的密码相同，经过哈希处理后的结果也会不同，从而有效防止彩虹表攻击。</li>
<li><strong>防止字典攻击</strong>： 字典攻击是一种尝试使用常见密码组合进行暴力破解的攻击方式。通过为每个密码添加盐值，使得攻击者不能简单地使用预先计算好的哈希值进行匹配，增加了破解的难度和时间。</li>
</ol>
<h5 id="如何使用盐值"><a href="#如何使用盐值" class="headerlink" title="如何使用盐值"></a>如何使用盐值</h5><ol>
<li><strong>生成盐值</strong>： 盐值应该是随机生成的，并且长度足够长以确保其唯一性和安全性。通常可以使用安全的随机数生成器来生成盐值。</li>
<li><strong>存储盐值</strong>： 盐值通常与哈希后的密码一起存储在数据库中，因为在验证密码时需要使用相同的盐值进行哈希计算。</li>
<li><strong>加密密码</strong>： 在用户注册或修改密码时，首先生成一个盐值，然后将盐值添加到用户密码前后，再对组合后的字符串进行哈希处理，最终存储哈希值和盐值。</li>
</ol>
<p>在userservice层新建doRegister方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现用户注册的业务</span></span><br><span class="line"><span class="comment"> * 需要捕获数据库的唯一索引冲突异常，来实现全局用户名称唯一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userRegisterContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">(UserRegisterContext userRegisterContext)</span> &#123;</span><br><span class="line">    <span class="comment">// 从用户注册上下文中获取用户实体</span></span><br><span class="line">    <span class="type">RPanUser</span> <span class="variable">entity</span> <span class="operator">=</span> userRegisterContext.getEntity();</span><br><span class="line">    <span class="comment">// 如果用户实体不为空，执行以下操作</span></span><br><span class="line">    <span class="keyword">if</span>(Objects.nonNull(entity))&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试保存用户实体，如果保存失败，抛出业务异常</span></span><br><span class="line">            <span class="keyword">if</span>(!save(entity))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;用户注册失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//DuplicateKeyException 是在数据库操作中遇到违反唯一约束（唯一索引或主键约束）时抛出的异常。</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (DuplicateKeyException duplicateKeyException)&#123;</span><br><span class="line">            <span class="comment">// 捕获数据库中唯一索引冲突异常，并抛出业务异常，提示用户名已存在</span></span><br><span class="line">            <span class="comment">//数据库中设置了username为唯一索引</span></span><br><span class="line">            <span class="comment">//UNIQUE INDEX `uk_username` (`username`) USING BTREE COMMENT &#x27;用户名唯一索引&#x27;</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;用户名已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果用户实体为空，抛出业务异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ResponseCode.ERROR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在file包下新建constants包，在constants包下新建FileConstants方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hth.hthpan.server.modules.file.constants;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件模块常量类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FileConstants</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 顶级父文件ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">TOP_PARENT_ID</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根文件夹名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ALL_FILE_CN_STR</span> <span class="operator">=</span> <span class="string">&quot;全部文件&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文左括号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CN_LEFT_PARENTHESES_STR</span> <span class="operator">=</span> <span class="string">&quot;（&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文右括号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CN_RIGHT_PARENTHESES_STR</span> <span class="operator">=</span> <span class="string">&quot;）&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有文件类型的标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ALL_FILE_TYPE</span> <span class="operator">=</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">CONTENT_TYPE_STR</span> <span class="operator">=</span> <span class="string">&quot;Content-Type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件内容的部署方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CONTENT_DISPOSITION_STR</span> <span class="operator">=</span> <span class="string">&quot;Content-Disposition&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以附件的方式下载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CONTENT_DISPOSITION_VALUE_PREFIX_STR</span> <span class="operator">=</span> <span class="string">&quot;attachment;fileName=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">GB2312_STR</span> <span class="operator">=</span> <span class="string">&quot;GB2312&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">IOS_8859_1_STR</span> <span class="operator">=</span> <span class="string">&quot;ISO-8859-1&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在file包下新建context包，在context包下新建CreateFolderContext方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建文件夹上下文实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateFolderContext</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">861882709652125971L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父文件夹ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件夹名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String folderName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在userservice层新建createUserRootFolder方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建用户根目录信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userRegisterContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createUserRootFolder</span><span class="params">(UserRegisterContext userRegisterContext)</span> &#123;</span><br><span class="line">    <span class="type">CreateFolderContext</span> <span class="variable">createFolderContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateFolderContext</span>();</span><br><span class="line">    createFolderContext.setParentId(FileConstants.TOP_PARENT_ID);</span><br><span class="line">    createFolderContext.setUserId(userRegisterContext.getEntity().getUserId());</span><br><span class="line">    createFolderContext.setFolderName(FileConstants.ALL_FILE_CN_STR);</span><br><span class="line">    iUserFileService.createFolder(createFolderContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在com.hth.hthpan.server.modules.file.service;下创建createFolder方法和saveUserFile方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建文件夹信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> createFolderContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">createFolder</span><span class="params">(CreateFolderContext createFolderContext)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> saveUserFile(createFolderContext.getParentId(),</span><br><span class="line">            createFolderContext.getFolderName(),</span><br><span class="line">            FolderFlagEnum.YES,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            createFolderContext.getUserId(),</span><br><span class="line">            <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存用户文件的映射记录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> folderFlagEnum</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileType       文件类型（1 普通文件 2 压缩文件 3 excel 4 word 5 pdf 6 txt 7 图片 8 音频 9 视频 10 ppt 11 源码文件 12 csv）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> realFileId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileSizeDesc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long <span class="title function_">saveUserFile</span><span class="params">(Long parentId,</span></span><br><span class="line"><span class="params">                          String filename,</span></span><br><span class="line"><span class="params">                          FolderFlagEnum folderFlagEnum,</span></span><br><span class="line"><span class="params">                          Integer fileType,</span></span><br><span class="line"><span class="params">                          Long realFileId,</span></span><br><span class="line"><span class="params">                          Long userId,</span></span><br><span class="line"><span class="params">                          String fileSizeDesc)</span> &#123;</span><br><span class="line">    <span class="type">RPanUserFile</span> <span class="variable">entity</span> <span class="operator">=</span> assembleRPanUserFile(parentId, userId, filename, folderFlagEnum, fileType, realFileId, fileSizeDesc);</span><br><span class="line">    <span class="keyword">if</span> (!save((entity))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;保存文件信息失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> entity.getFileId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同级目录下新建assembleRPanUserFile方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *用户文件映射关系实体转化</span></span><br><span class="line"><span class="comment"> * 1、构建并填充实体</span></span><br><span class="line"><span class="comment"> * 2、处理文件命名一致的问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> folderFlagEnum</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> realFileId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileSizeDesc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> RPanUserFile <span class="title function_">assembleRPanUserFile</span><span class="params">(Long parentId, Long userId, String filename, FolderFlagEnum folderFlagEnum, Integer fileType, Long realFileId, String fileSizeDesc)</span> &#123;</span><br><span class="line">    <span class="type">RPanUserFile</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RPanUserFile</span>();</span><br><span class="line">    entity.setFileId(IdUtil.get());</span><br><span class="line">    entity.setUserId(userId);</span><br><span class="line">    entity.setParentId(parentId);</span><br><span class="line">    entity.setRealFileId(realFileId);</span><br><span class="line">    entity.setFilename(filename);</span><br><span class="line">    entity.setFolderFlag(folderFlagEnum.getCode());</span><br><span class="line">    entity.setFileSizeDesc(fileSizeDesc);</span><br><span class="line">    entity.setFileType(fileType);</span><br><span class="line">    entity.setDelFlag(DelFlagEnum.NO.getCode());</span><br><span class="line">    entity.setCreateUser(userId);</span><br><span class="line">    entity.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    entity.setUpdateUser(userId);</span><br><span class="line">    entity.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    handleDuplicateFileName(entity);</span><br><span class="line">    <span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建handleDuplicateFileName方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用户重复名称</span></span><br><span class="line"><span class="comment"> * 如果同一文件夹下面有文件名称重复</span></span><br><span class="line"><span class="comment"> * 按照系统规则重命名文件(b-&gt;b(1))</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleDuplicateFileName</span><span class="params">(RPanUserFile entity)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> entity.getFilename(),</span><br><span class="line">            newFilenameWithoutSuffix,</span><br><span class="line">            newFilenameSuffix;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newFilenamePointPosition</span> <span class="operator">=</span> filename.lastIndexOf(Constants.POINT_STR);</span><br><span class="line">    <span class="keyword">if</span>(newFilenamePointPosition == Constants.MINUS_ONE_INT)&#123;</span><br><span class="line">        newFilenameWithoutSuffix = filename;</span><br><span class="line">        newFilenameSuffix = StringUtils.EMPTY;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newFilenameWithoutSuffix = filename.substring(Constants.ZERO_INT,newFilenamePointPosition);</span><br><span class="line">        newFilenameSuffix = filename.replace(newFilenameWithoutSuffix,StringUtils.EMPTY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> getDuplicateFilename(entity,newFilenameWithoutSuffix);</span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFilename</span> <span class="operator">=</span> assembleNewFilename(newFilenameWithoutSuffix,count,newFilenameSuffix);</span><br><span class="line">    entity.setFilename(newFilename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新建getDuplicateFilename方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找同一父文件下的同名文件数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newFilenameWithoutSuffix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getDuplicateFilename</span><span class="params">(RPanUserFile entity, String newFilenameWithoutSuffix)</span> &#123;</span><br><span class="line">    <span class="type">QueryWrapper</span> <span class="variable">queryWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;parent_id&quot;</span>,entity.getParentId());</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;folder_flag&quot;</span>,entity.getFolderFlag());</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;user_id&quot;</span>,entity.getUserId());</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;del_flag&quot;</span>,DelFlagEnum.NO.getCode());</span><br><span class="line">    queryWrapper.likeLeft(<span class="string">&quot;filename&quot;</span>,newFilenameWithoutSuffix);</span><br><span class="line">    <span class="keyword">return</span> count(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建assembleNewFilename方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拼装新文件名称</span></span><br><span class="line"><span class="comment"> * 拼装规则参考操作系统重复文件名称的重命名规范</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newFilenameWithoutSuffix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newFilenameSuffix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">assembleNewFilename</span><span class="params">(String newFilenameWithoutSuffix, <span class="type">int</span> count, String newFilenameSuffix)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(newFilenameWithoutSuffix)</span><br><span class="line">            .append(FileConstants.CN_LEFT_PARENTHESES_STR)</span><br><span class="line">            .append(count)</span><br><span class="line">            .append(FileConstants.CN_RIGHT_PARENTHESES_STR)</span><br><span class="line">            .append(newFilenameSuffix)</span><br><span class="line">            .toString();</span><br><span class="line">    <span class="keyword">return</span> newFileName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注册方法测试"><a href="#注册方法测试" class="headerlink" title="注册方法测试"></a>注册方法测试</h3><p>在com.hth.hthpan.server.modules.user;包下新建UserTest测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块单元测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = hthPanServerLauncher.class)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试成功注册用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRegister</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UserRegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> createUserRegisterContext();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">register</span> <span class="operator">=</span> iUserService.register(context);</span><br><span class="line">        Assert.isTrue(register.longValue()&gt;<span class="number">0L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试重复用户名称注册幂等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test(expected = BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRegisterDuplicateUsername</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UserRegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> createUserRegisterContext();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">register</span> <span class="operator">=</span> iUserService.register(context);</span><br><span class="line">        Assert.isTrue(register.longValue()&gt;<span class="number">0</span>);</span><br><span class="line">        iUserService.register(context);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/************************************************private************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;hth&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUESTION</span> <span class="operator">=</span> <span class="string">&quot;question&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ANSWER</span> <span class="operator">=</span> <span class="string">&quot;answer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建注册用户上下文信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UserRegisterContext <span class="title function_">createUserRegisterContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserRegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRegisterContext</span>();</span><br><span class="line">        context.setUsername(USERNAME);</span><br><span class="line">        context.setPassword(PASSWORD);</span><br><span class="line">        context.setQuestion(QUESTION);</span><br><span class="line">        context.setAnswer(ANSWER);</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><p>在PO包下新建UserLoginPO</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册用户参数实体对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;用户登录参数&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginPO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6227590183820189279L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户名&quot;,required = true)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^[0-9A-Za-z]&#123;6,12&#125;$&quot;,message = &quot;请输入6-12位的用户名，用户名只包含数字和字母&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;密码&quot;,required = true)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(max = 12,min = 8,message = &quot;请输入8-12位的密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在userController类下新建login方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(</span></span><br><span class="line"><span class="meta">        value = &quot;用户登录接口&quot;,</span></span><br><span class="line"><span class="meta">        notes = &quot;该接口提供了用户登录的功能,登录成功之后会返回有时效性的accessToken供后续服务使用&quot;,</span></span><br><span class="line"><span class="meta">        consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,  // 指定接口接受的数据格式，这里是JSON格式的UTF-8编码</span></span><br><span class="line"><span class="meta">        produces = MediaType.APPLICATION_JSON_UTF8_VALUE   // 指定接口输出的数据格式，这里是JSON格式的UTF-8编码</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line"><span class="comment">//@RequestBody：这个注解用于将HTTP请求体中的JSON数据绑定到方法参数上。</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">login</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> UserLoginPO userLoginPO)</span> &#123;</span><br><span class="line">    <span class="type">UserLoginContext</span> <span class="variable">userLoginContext</span> <span class="operator">=</span> userConverter.userLoginPO2UserLoginContext(userLoginPO);</span><br><span class="line">    <span class="type">String</span> <span class="variable">assessToken</span> <span class="operator">=</span> iUserService.login(userLoginContext);</span><br><span class="line">    <span class="keyword">return</span> R.data(assessToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在converter包下的UserConverter类下添加userLoginPO2UserLoginContext方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserLoginPO转换成UserLoginContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLoginPO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">UserLoginContext <span class="title function_">userLoginPO2UserLoginContext</span><span class="params">(UserLoginPO userLoginPO)</span>;</span><br></pre></td></tr></table></figure>

<p>在constants新建UserConstants常量类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户模块的常量类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserConstants</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录用户的用户ID的key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">LOGIN_USER_ID</span> <span class="operator">=</span> <span class="string">&quot;LOGIN_USER_ID&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录缓存前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">USER_LOGIN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;USER_LOGIN_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户忘记密码-重置密码临时token的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">FORGET_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;FORGET_USERNAME&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一天的毫秒值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">ONE_DAY_LONG</span> <span class="operator">=</span> <span class="number">24L</span> * <span class="number">60L</span> * <span class="number">60L</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 五分钟的毫秒值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">FIVE_MINUTES_LONG</span> <span class="operator">=</span> <span class="number">5L</span> * <span class="number">60L</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service层新建login方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现用户登录业务</span></span><br><span class="line"><span class="comment"> * 需要实现的功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1、用户的登录信息校验</span></span><br><span class="line"><span class="comment"> * 2、生成一个具有时效性的assessToken</span></span><br><span class="line"><span class="comment"> * 3、将assessToken缓存起来，去实现单机登录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLoginContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(UserLoginContext userLoginContext)</span> &#123;</span><br><span class="line">    checkLoginInfo(userLoginContext);</span><br><span class="line">    generateAndSaveAccessToken(userLoginContext);</span><br><span class="line">    <span class="keyword">return</span> userLoginContext.getAssessToken();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service层新建checkLoginInfo方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验用户名和密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userLoginContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkLoginInfo</span><span class="params">(UserLoginContext userLoginContext)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> userLoginContext.getUsername();</span><br><span class="line">       <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> userLoginContext.getPassword();</span><br><span class="line"></span><br><span class="line">       <span class="type">RPanUser</span> <span class="variable">entity</span> <span class="operator">=</span> getRPanUserByUsername(username);</span><br><span class="line">       <span class="keyword">if</span>(Objects.isNull(entity))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;用户名称不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> entity.getSalt();</span><br><span class="line">       <span class="type">String</span> <span class="variable">encPassword</span> <span class="operator">=</span> PasswordUtil.encryptPassword(salt,password);</span><br><span class="line">       <span class="type">String</span> <span class="variable">dbPassword</span> <span class="operator">=</span> entity.getPassword();</span><br><span class="line">       <span class="keyword">if</span>(!Objects.equals(encPassword,dbPassword))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;密码信息不正确&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">        userLoginContext.setEntity(entity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在service层新建getRPanUserByUsername方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户名获取用户实体信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> RPanUser <span class="title function_">getRPanUserByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="type">QueryWrapper</span> <span class="variable">queryWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    <span class="keyword">return</span> getOne(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service层新建generateAndSaveAccessToken方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成并保存登录之后的凭证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userLoginContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">generateAndSaveAccessToken</span><span class="params">(UserLoginContext userLoginContext)</span> &#123;</span><br><span class="line">    <span class="type">RPanUser</span> <span class="variable">entity</span> <span class="operator">=</span> userLoginContext.getEntity();</span><br><span class="line">    <span class="type">String</span> <span class="variable">assessToken</span> <span class="operator">=</span> JwtUtil.generateToken(entity.getUsername(), UserConstants.LOGIN_USER_ID,entity.getUserId(),UserConstants.ONE_DAY_LONG);</span><br><span class="line">    <span class="type">Cache</span> <span class="variable">cache</span> <span class="operator">=</span> cacheManager.getCache(CacheConstants.HTH_PAN_CACHE_NAME);</span><br><span class="line">    cache.put(UserConstants.USER_LOGIN_PREFIX+entity.getUserId(),assessToken);</span><br><span class="line">    userLoginContext.setAssessToken(assessToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="登陆方法测试"><a href="#登陆方法测试" class="headerlink" title="登陆方法测试"></a>登陆方法测试</h3><p>在UserTest类下新建如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试登录成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLoginSuccess</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UserRegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> createUserRegisterContext();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">register</span> <span class="operator">=</span> iUserService.register(context);</span><br><span class="line">        Assert.isTrue(register.longValue()&gt;<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserLoginContext</span> <span class="variable">userLoginContext</span> <span class="operator">=</span> createUserLoginContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> iUserService.login(userLoginContext);</span><br><span class="line">        Assert.isTrue(StringUtils.isNoneBlank(accessToken));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试登陆失败：用户名不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test(expected = BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrongUsername</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UserRegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> createUserRegisterContext();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">register</span> <span class="operator">=</span> iUserService.register(context);</span><br><span class="line">        Assert.isTrue(register.longValue()&gt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserLoginContext</span> <span class="variable">userLoginContext</span> <span class="operator">=</span> createUserLoginContext();</span><br><span class="line">        userLoginContext.setUsername(userLoginContext.getUsername()+<span class="string">&quot;_changed&quot;</span>);</span><br><span class="line">        iUserService.login(userLoginContext);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试登录失败：密码不正确</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test(expected = BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrongPassword</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UserRegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> createUserRegisterContext();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">register</span> <span class="operator">=</span> iUserService.register(context);</span><br><span class="line">        Assert.isTrue(register.longValue()&gt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UserLoginContext</span> <span class="variable">userLoginContext</span> <span class="operator">=</span> createUserLoginContext();</span><br><span class="line">        userLoginContext.setPassword(userLoginContext.getPassword()+<span class="string">&quot;_changed&quot;</span>);</span><br><span class="line">        iUserService.login(userLoginContext);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建用户登录上下文实体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UserLoginContext <span class="title function_">createUserLoginContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserLoginContext</span> <span class="variable">userLoginContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserLoginContext</span>();</span><br><span class="line">        userLoginContext.setUsername(USERNAME);</span><br><span class="line">        userLoginContext.setPassword(PASSWORD);</span><br><span class="line">        <span class="keyword">return</span> userLoginContext;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上下文创建方法：</span></span><br><span class="line"><span class="comment">确保 createUserRegisterContext() 和 createUserLoginContext() 方法返回正确配置的上下文对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">期望异常：</span></span><br><span class="line"><span class="comment">使用 @Test(expected = BusinessException.class) 表示在 iUserService.login(userLoginContext) 行会抛出 BusinessException。如果没有抛出该异常，测试将失败。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">断言注册成功：</span></span><br><span class="line"><span class="comment">Assert.isTrue(register.longValue() &gt; 0) 确认用户注册成功。如果注册失败，该测试将不会继续进行到登录部分。*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java SpringBoot Vue3 MybatisPlus</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
</search>
